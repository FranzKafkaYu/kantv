//==============================================================================
//
//  Copyright (c) 2019-2024 Qualcomm Technologies, Inc.
//  All Rights Reserved.
//  Confidential and Proprietary - Qualcomm Technologies, Inc.
//
//  Inception_v3.cpp is generated automatically by Qualcomm's dedicated tool
//
//  original Inception_v3.cpp is located at
//  /opt/qcom/aistack/qnn/2.20.0.240223/examples/Models/InceptionV3/model/Inception_v3.cpp
//
//  this customized Inception_v3.cpp is used to troubleshooting issue in
//  PoC-S26: offload a simple f32 2x2 matrix addition operation to QNN CPU backend
//  https://github.com/zhouwg/kantv/issues/121
//==============================================================================

#include <limits>
#include <map>
#include <string>
#include <vector>

#include "QnnInterface.h"
#include "QnnLog.h"
#include "QnnOpDef.h"

static int MODEL_NO_ERROR               = 0;
static int MODEL_TENSOR_ERROR           = 1;
static int MODEL_PARAMS_ERROR           = 2;
static int MODEL_NODES_ERROR            = 3;
static int MODEL_GRAPH_ERROR            = 4;
static int MODEL_CONTEXT_ERROR          = 5;
static int MODEL_GENERATION_ERROR       = 6;
static int MODEL_SETUP_ERROR            = 7;
static int MODEL_INVALID_ARGUMENT_ERROR = 8;
static int MODEL_FILE_ERROR             = 9;
static int MODEL_MEMORY_ALLOCATE_ERROR  = 10;
static int MODEL_UNKNOWN_ERROR = 0x7FFFFFFF;

typedef int         ModelError_t;

#define addTensor       add_tensor
#define addNode         add_node
#define Inception_v3    qnn_backend

extern "C" {


static ModelError_t addTensor_input_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_input_0[] = {1, 299, 299, 3};
  VALIDATE(model.addTensor("input_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "input_0",
                                 .type= QNN_TENSOR_TYPE_APP_WRITE,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_input_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=nullptr,
                                                .dataSize=0}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_1a_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_1a_3x3_weights_read_0[] = {3, 3, 3, 32};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_1a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_1a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_1a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_1a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_1a_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias[] = {32};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution[] = {
    "input_0",
    "InceptionV3_Conv2d_1a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 149, 149, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu_0[] = {1, 149, 149, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_2a_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_2a_3x3_weights_read_0[] = {3, 3, 32, 32};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_2a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_2a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_2a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_2a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_2a_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias[] = {32};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu_0",
    "InceptionV3_Conv2d_2a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 147, 147, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name, must be "qti.aisw" otherwise error occurs
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Conv2d_2a_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu_0[] = {1, 147, 147, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_2b_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_2b_3x3_weights_read_0[] = {3, 3, 32, 64};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_2b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_2b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_2b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_2b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_2b_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu_0",
    "InceptionV3_Conv2d_2b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 147, 147, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Conv2d_2b_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu_0[] = {1, 147, 147, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool */
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_stride,
                           .dataSize=8}}}}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool[] = {
    "InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_0[] = {1, 73, 73, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolMax2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool, // Node Params
                         3, // Num Node Params
                         inputs_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_3b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_3b_1x1_weights_read_0[] = {1, 1, 64, 80};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_3b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_3b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_3b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_3b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_3b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias[] = {80};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool_0",
    "InceptionV3_Conv2d_3b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 73, 73, 80};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Conv2d_3b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu_0[] = {1, 73, 73, 80};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Conv2d_4a_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Conv2d_4a_3x3_weights_read_0[] = {3, 3, 80, 192};
  VALIDATE(model.addTensor("InceptionV3_Conv2d_4a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Conv2d_4a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Conv2d_4a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Conv2d_4a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Conv2d_4a_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu_0",
    "InceptionV3_Conv2d_4a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 71, 71, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Conv2d_4a_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu_0[] = {1, 71, 71, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool */
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_stride,
                           .dataSize=8}}}}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool[] = {
    "InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0[] = {1, 35, 35, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolMax2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool, // Node Params
                         3, // Num Node Params
                         inputs_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 192, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0",
    "InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 192, 48};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {48};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0",
    "InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 192, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0",
    "InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 35, 35, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 192, 32};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {32};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 35, 35, 32};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 64, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0[] = {3, 3, 96, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0[] = {5, 5, 48, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount[] = {2, 2, 2, 2};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5b_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5b_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5b_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5b_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5b_concat_v2_0[] = {1, 35, 35, 256};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5b_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5b_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5b_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5b_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5b_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5b_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 256, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0",
    "InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 256, 48};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias[] = {48};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0",
    "InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 256, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0",
    "InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_5b_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 35, 35, 256};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 256, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 64, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0[] = {3, 3, 96, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0[] = {5, 5, 48, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount[] = {2, 2, 2, 2};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu_0",
    "InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5c_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5c_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5c_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5c_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5c_concat_v2_0[] = {1, 35, 35, 288};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5c_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5c_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5c_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5c_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5c_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5c_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 288, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0",
    "InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 288, 48};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {48};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0",
    "InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 288, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0",
    "InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_5c_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 35, 35, 288};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 288, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 48};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 64, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0[] = {3, 3, 96, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0[] = {5, 5, 48, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount[] = {2, 2, 2, 2};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_5d_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_5d_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_5d_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_5d_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_5d_concat_v2_0[] = {1, 35, 35, 288};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_5d_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_5d_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_5d_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_5d_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_5d_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_5d_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_5d_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0[] = {3, 3, 288, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_concat_v2_0",
    "InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 288, 64};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {64};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_5d_concat_v2_0",
    "InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_stride,
                           .dataSize=8}}}}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    "InceptionV3_InceptionV3_Mixed_5d_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_0[] = {1, 17, 17, 288};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolMax2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool, // Node Params
                         3, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 35, 35, 64};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 64, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu_0[] = {1, 35, 35, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0[] = {3, 3, 96, 96};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias[] = {96};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu_0[] = {1, 17, 17, 96};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu_0[] = {1, 17, 17, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6a_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6a_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6a_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6a_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6a_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6a_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6a_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6a_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6a_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6a_concat_v2, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6a_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0",
    "InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0",
    "InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_6a_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0[] = {7, 1, 128, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0[] = {1, 7, 128, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0[] = {7, 1, 128, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0[] = {1, 7, 128, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu_0",
    "InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 128, 128};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {128};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 128};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 128, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6b_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6b_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6b_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6b_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6b_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6b_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6b_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6b_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6b_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6b_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6b_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0",
    "InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0",
    "InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_6b_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0[] = {7, 1, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0[] = {1, 7, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0[] = {7, 1, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0[] = {1, 7, 160, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu_0",
    "InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 160, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6c_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6c_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6c_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6c_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6c_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6c_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6c_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6c_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6c_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6c_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6c_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0",
    "InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0",
    "InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_6c_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0[] = {7, 1, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0[] = {1, 7, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0[] = {7, 1, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0[] = {1, 7, 160, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu_0",
    "InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 160, 160};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {160};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 160};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 160, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6d_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6d_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6d_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6d_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6d_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6d_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6d_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6d_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6d_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6d_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6d_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0",
    "InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0",
    "InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_6d_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0[] = {7, 1, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0[] = {1, 7, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0[] = {7, 1, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0[] = {1, 7, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu_0",
    "InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_6e_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_6e_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_6e_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_6e_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu_0",
    "InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_6e_concat_v2_0[] = {1, 17, 17, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_6e_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_6e_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_6e_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_6e_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_6e_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_6e_concat_v2, // Input Tensor Names
                         4, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_6e_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_concat_v2_0",
    "InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 768, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_6e_concat_v2_0",
    "InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_stride,
                           .dataSize=8}}}}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    "InceptionV3_InceptionV3_Mixed_6e_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_0[] = {1, 8, 8, 768};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolMax2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool, // Node Params
                         3, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0[] = {1, 7, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount[] = {0, 0, 3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0[] = {7, 1, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount[] = {3, 3, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu_0",
    "InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0[] = {3, 3, 192, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu_0",
    "InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 17, 17, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0[] = {3, 3, 192, 320};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias[] = {320};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7a_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7a_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7a_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7a_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7a_concat_v2_0[] = {1, 8, 8, 1280};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7a_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7a_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7a_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7a_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7a_concat_v2, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7a_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 1280, 320};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {320};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0",
    "InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 1280, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0",
    "InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 1280, 448};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {448};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0",
    "InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 448};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_7a_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 8, 8, 1280};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 1280, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 448};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 448, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0[] = {3, 1, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount[] = {1, 1, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0[] = {1, 3, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount[] = {0, 0, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0[] = {3, 1, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount[] = {1, 1, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0[] = {1, 3, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount[] = {0, 0, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7b_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7b_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7b_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7b_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7b_concat_v2_0[] = {1, 8, 8, 2048};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7b_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7b_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7b_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7b_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7b_concat_v2, // Input Tensor Names
                         6, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7b_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 2048, 320};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias[] = {320};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0",
    "InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 2048, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0",
    "InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0[] = {1, 1, 2048, 448};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias[] = {448};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0",
    "InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 448};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size[] = {3, 3};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_7b_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_0[] = {1, 8, 8, 2048};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0[] = {1, 1, 2048, 192};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias[] = {192};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool_0",
    "InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 320};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu_0[] = {1, 8, 8, 448};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu_0[] = {1, 8, 8, 192};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0[] = {3, 3, 448, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount[] = {1, 1, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0[] = {3, 1, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount[] = {1, 1, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0[] = {1, 3, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount[] = {0, 0, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu_0",
    "InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0[] = {3, 1, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount[] = {1, 1, 0, 0};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0[] = {1, 3, 384, 384};
  VALIDATE(model.addTensor("InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias[] = {384};
  VALIDATE(model.addTensor("InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias),
                                                .dataSize=BINLEN(InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution */
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount[] = {0, 0, 1, 1};
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride[] = {2};
  uint32_t InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_BatchNorm_batchnorm_add_1_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_BatchNorm_batchnorm_add_1_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_BatchNorm_batchnorm_add_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu */
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_BatchNorm_batchnorm_add_1_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu_0[] = {1, 8, 8, 384};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu", // Node Name
                         "qti.aisw", // Package Name
                         "Relu", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_InceptionV3_Mixed_7c_concat_v2(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_InceptionV3_Mixed_7c_concat_v2 */
  Qnn_Param_t params_InceptionV3_InceptionV3_Mixed_7c_concat_v2[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 3}}}}
  };
  const char*  inputs_InceptionV3_InceptionV3_Mixed_7c_concat_v2[] = {
    "InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu_0",
    "InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu_0"
  };
  uint32_t dimensions_InceptionV3_InceptionV3_Mixed_7c_concat_v2_0[] = {1, 8, 8, 2048};
  Qnn_Tensor_t outputs_InceptionV3_InceptionV3_Mixed_7c_concat_v2[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_InceptionV3_Mixed_7c_concat_v2_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_InceptionV3_Mixed_7c_concat_v2_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_InceptionV3_Mixed_7c_concat_v2", // Node Name
                         "qti.aisw", // Package Name
                         "Concat", // Qnn Node Type
                         params_InceptionV3_InceptionV3_Mixed_7c_concat_v2, // Node Params
                         1, // Num Node Params
                         inputs_InceptionV3_InceptionV3_Mixed_7c_concat_v2, // Input Tensor Names
                         6, // Num Input Tensor Names
                         outputs_InceptionV3_InceptionV3_Mixed_7c_concat_v2, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_Logits_AvgPool_1a_8x8_AvgPool */
  uint32_t dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size[] = {2};
  uint32_t InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size[] = {8, 8};
  uint32_t dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount[] = {2, 2};
  uint32_t InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride[] = {2};
  uint32_t InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride[] = {2, 2};
  Qnn_Param_t params_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="filter_size",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_filter_size,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="count_pad_for_edges",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_BOOL_8, {.bool8Value = 0}}}}
  };
  const char*  inputs_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool[] = {
    "InceptionV3_InceptionV3_Mixed_7c_concat_v2_0"
  };
  uint32_t dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_0[] = {1, 1, 1, 2048};
  Qnn_Tensor_t outputs_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool", // Node Name
                         "qti.aisw", // Package Name
                         "PoolAvg2d", // Qnn Node Type
                         params_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0[] = {1, 1, 2048, 1001};
  VALIDATE(model.addTensor("InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 4,
                                 .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0),
                                                .dataSize=BINLEN(InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addTensor_InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0[] = {1001};
  VALIDATE(model.addTensor("InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0", // Tensor Name
                           (Qnn_Tensor_t) {
                               .version= QNN_TENSOR_VERSION_1,
                               {.v1= {
                                 .id=0,
                                 .name= "InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0",
                                 .type= QNN_TENSOR_TYPE_STATIC,
                                 .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
                                 .dataType= QNN_DATATYPE_FLOAT_32,
                                 .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                                                    QNN_QUANTIZATION_ENCODING_UNDEFINED,
                                                    {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
                                 .rank= 1,
                                 .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0,
                                 .memType= QNN_TENSORMEMTYPE_RAW,
                                 {.clientBuf= { .data=BINVARSTART(InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0),
                                                .dataSize=BINLEN(InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0)}}}}}
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_Logits_Conv2d_1c_1x1_convolution(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_Logits_Conv2d_1c_1x1_convolution */
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation[] = {2};
  uint32_t InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation[] = {1, 1};
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount[] = {2, 2};
  uint32_t InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount[] = {0, 0, 0, 0};
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride[] = {2};
  uint32_t InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride[] = {1, 1};
  Qnn_Param_t params_InceptionV3_Logits_Conv2d_1c_1x1_convolution[] = {
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="dilation",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_Conv2d_1c_1x1_convolution_dilation,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="pad_amount",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_Conv2d_1c_1x1_convolution_pad_amount,
                           .dataSize=16}}}}}}},
    {.paramType=QNN_PARAMTYPE_TENSOR,
     .name="stride",
     {.tensorParam=(Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride",
            .type= QNN_TENSOR_TYPE_STATIC,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_UINT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 1,
            .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=(uint8_t*)InceptionV3_Logits_Conv2d_1c_1x1_convolution_stride,
                           .dataSize=8}}}}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="group",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}}
  };
  const char*  inputs_InceptionV3_Logits_Conv2d_1c_1x1_convolution[] = {
    "InceptionV3_Logits_AvgPool_1a_8x8_AvgPool_0",
    "InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0",
    "InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0"
  };
  uint32_t dimensions_InceptionV3_Logits_Conv2d_1c_1x1_BiasAdd_0[] = {1, 1, 1, 1001};
  Qnn_Tensor_t outputs_InceptionV3_Logits_Conv2d_1c_1x1_convolution[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Logits_Conv2d_1c_1x1_BiasAdd_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 4,
            .dimensions=dimensions_InceptionV3_Logits_Conv2d_1c_1x1_BiasAdd_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_Logits_Conv2d_1c_1x1_convolution", // Node Name
                         "qti.aisw", // Package Name
                         "Conv2d", // Qnn Node Type
                         params_InceptionV3_Logits_Conv2d_1c_1x1_convolution, // Node Params
                         4, // Num Node Params
                         inputs_InceptionV3_Logits_Conv2d_1c_1x1_convolution, // Input Tensor Names
                         3, // Num Input Tensor Names
                         outputs_InceptionV3_Logits_Conv2d_1c_1x1_convolution, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_Logits_SpatialSqueeze_0(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_Logits_SpatialSqueeze_0 */
  const char*  inputs_InceptionV3_Logits_SpatialSqueeze_0[] = {
    "InceptionV3_Logits_Conv2d_1c_1x1_BiasAdd_0"
  };
  uint32_t dimensions_InceptionV3_Predictions_Reshape_0[] = {1, 1001};
  Qnn_Tensor_t outputs_InceptionV3_Logits_SpatialSqueeze_0[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Predictions_Reshape_0",
            .type= QNN_TENSOR_TYPE_NATIVE,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_Predictions_Reshape_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_Logits_SpatialSqueeze_0", // Node Name
                         "qti.aisw", // Package Name
                         "Reshape", // Qnn Node Type
                         nullptr, // Node Params
                         0, // Num Node Params
                         inputs_InceptionV3_Logits_SpatialSqueeze_0, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_Logits_SpatialSqueeze_0, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}

static ModelError_t addNode_InceptionV3_Predictions_Softmax(qnn_implementation& model){
  ModelError_t err = MODEL_NO_ERROR;

  /* ADDING NODE FOR InceptionV3_Predictions_Softmax */
  Qnn_Param_t params_InceptionV3_Predictions_Softmax[] = {
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="axis",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_UINT_32, {.uint32Value = 1}}}},
    {.paramType=QNN_PARAMTYPE_SCALAR,
     .name="beta",
     {.scalarParam= (Qnn_Scalar_t) {QNN_DATATYPE_FLOAT_32, {.floatValue = 1.000000000000f}}}}
  };
  const char*  inputs_InceptionV3_Predictions_Softmax[] = {
    "InceptionV3_Predictions_Reshape_0"
  };
  uint32_t dimensions_InceptionV3_Predictions_Reshape_1_0[] = {1, 1001};
  Qnn_Tensor_t outputs_InceptionV3_Predictions_Softmax[] = {
    (Qnn_Tensor_t) {
          .version= QNN_TENSOR_VERSION_1,
          {.v1= {
            .id=0,
            .name= "InceptionV3_Predictions_Reshape_1_0",
            .type= QNN_TENSOR_TYPE_APP_READ,
            .dataFormat= QNN_TENSOR_DATA_FORMAT_FLAT_BUFFER,
            .dataType= QNN_DATATYPE_FLOAT_32,
            .quantizeParams= { QNN_DEFINITION_UNDEFINED,
                               QNN_QUANTIZATION_ENCODING_UNDEFINED,
                               {.scaleOffsetEncoding= {.scale= 0.0000000000000000f, .offset= 0}}},
            .rank= 2,
            .dimensions=dimensions_InceptionV3_Predictions_Reshape_1_0,
            .memType= QNN_TENSORMEMTYPE_RAW,
            {.clientBuf= { .data=nullptr,
                           .dataSize=0}}}}}
  };
  VALIDATE(model.addNode(QNN_OPCONFIG_VERSION_1, // Op_Config_t Version
                         "InceptionV3_Predictions_Softmax", // Node Name
                         "qti.aisw", // Package Name
                         "Softmax", // Qnn Node Type
                         params_InceptionV3_Predictions_Softmax, // Node Params
                         2, // Num Node Params
                         inputs_InceptionV3_Predictions_Softmax, // Input Tensor Names
                         1, // Num Input Tensor Names
                         outputs_InceptionV3_Predictions_Softmax, // Output Tensors 
                         1// Num Output Tensors 
  ), err);
  return err;
}


int ggml_qqn_debug_composegraphs(GraphInfoPtr_t ** graphsInfo,uint32_t * numGraphsInfo)
{

  LOGGI("enter %s\n", __func__);

  ModelError_t err = MODEL_NO_ERROR;


  /* model/graph for Inception_v3*/
  VALIDATE(addTensor_input_0(Inception_v3), err);
  //VALIDATE(addTensor_InceptionV3_Conv2d_1a_3x3_weights_read_0(Inception_v3), err);
  //VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_1a_3x3_convolution(Inception_v3), err);
#if 0
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_1a_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_2a_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_2a_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_2a_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_2b_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_2b_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_2b_3x3_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_MaxPool_3a_3x3_MaxPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_3b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_3b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_3b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Conv2d_4a_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_4a_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Conv2d_4a_3x3_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_MaxPool_5a_3x3_MaxPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0b_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_2_Conv2d_0c_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_Branch_1_Conv2d_0b_5x5_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5b_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0b_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_2_Conv2d_0c_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_Branch_1_Conv_1_0c_5x5_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5c_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0b_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_2_Conv2d_0c_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_Branch_1_Conv2d_0b_5x5_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_5d_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_2_MaxPool_1a_3x3_MaxPool(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_0b_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_1_Conv2d_1a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_Branch_0_Conv2d_1a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6a_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0b_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0c_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0d_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_2_Conv2d_0e_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0b_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_Branch_1_Conv2d_0c_7x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6b_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0b_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0c_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0d_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_2_Conv2d_0e_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0b_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_Branch_1_Conv2d_0c_7x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6c_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0b_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0c_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0d_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_2_Conv2d_0e_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0b_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_Branch_1_Conv2d_0c_7x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6d_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0b_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0c_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0d_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_2_Conv2d_0e_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0b_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_Branch_1_Conv2d_0c_7x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_6e_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_2_MaxPool_1a_3x3_MaxPool(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0b_1x7_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_0c_7x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_1_Conv2d_1a_3x3_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_Branch_0_Conv2d_1a_3x3_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7a_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0b_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0d_3x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_2_Conv2d_0c_1x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_3x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_Branch_1_Conv2d_0b_1x3_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7b_concat_v2(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_AvgPool_0a_3x3_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_0_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0a_1x1_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_3_Conv2d_0b_1x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0b_3x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0d_3x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_2_Conv2d_0c_1x3_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0c_3x1_Relu(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution_bias(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_Branch_1_Conv2d_0b_1x3_Relu(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_InceptionV3_Mixed_7c_concat_v2(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_Logits_AvgPool_1a_8x8_AvgPool(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Logits_Conv2d_1c_1x1_weights_read_0(Inception_v3), err);
  VALIDATE(addTensor_InceptionV3_Logits_Conv2d_1c_1x1_biases_read_0(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_Logits_Conv2d_1c_1x1_convolution(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_Logits_SpatialSqueeze_0(Inception_v3), err);
  VALIDATE(addNode_InceptionV3_Predictions_Softmax(Inception_v3), err);
#endif

  uint32_t numModels = 1;
  // Populate the constructed graphs in provided output variables
  //qnn_backend.get_graphinfo_from_model(graphsInfo, numGraphsInfo);
  *numGraphsInfo = numModels;

  LOGGI("leave %s\n", __func__);

  return err;

} // PREPARE_GRAPHS


}
