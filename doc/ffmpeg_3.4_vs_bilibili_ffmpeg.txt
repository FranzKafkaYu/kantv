diff -r android/contrib/ffmpeg-x86/Changelog /tmp/ffmpeg-x86/Changelog
3a4,986
> version 3.4.8:
>  avcodec/hevc_mp4toannexb_bsf: Check NAL size against available input
>  lavf/webm_chunk: Fix NULL dereference
>  avcodec/ttaenc: Fix undefined shift
>  fftools/ffmpeg: Free swresample dictionary during cleanup
>  avfilter/vf_xbr: Fix left shift of negative number
>  avfilter/vf_hqx: Fix undefined left shifts of negative numbers
>  avcodec/jpeg2000dwt: Fix undefined shifts of negative numbers
>  avcodec/ituh263dec: Fix undefined left shift of negative number
>  avcodec/dnxhdenc: Fix undefined left shifts of negative numbers
>  swscale/utils: Fix invalid left shifts of negative numbers
>  swscale/x86/swscale: Fix undefined left shifts of negative numbers
>  avcodec/exr: Fix undefined left shifts of negative numbers
>  avformat/movenc: Fix undefined shift
>  avcodec/pcm: Fix undefined shifts
>  avcodec/wavpackenc: Fix undefined shifts
>  avcodec/ac3enc: Fix invalid shift
>  avcodec/tdsc: Fix undefined shifts
>  fftools/ffmpeg_opt: Fix signed integer overflow
>  avformat/mov: Fix reel_name size check
>  avformat/mov: Fix memleak upon encountering repeating tags
>  avformat/matroskaenc: Don't use NULL for %s format string
>  avformat/webvttdec: Fix memleak upon read header failure
>  avformat/vplayerdec: Fix memleak upon read header failure
>  avformat/tedcaptionsdec: Fix memleak upon read header failure
>  avformat/subviewerdec: Fix memleak upon read header failure
>  avformat/subviewer1dec: Fix memleak upon read header failure
>  avformat/stldec: Fix memleak upon read header failure
>  avformat/srtdec: Fix memleak upon read header failure
>  avformat/sccdec: Fix memleak upon read header failure
>  avformat/samidec: Fix memleak upon read header failure
>  avformat/pjsdec: Fix memleak upon read header failure
>  avformat/mpsubdec: Fix memleak upon read header failure
>  avformat/mpl2dec: Fix memleak upon read header failure
>  avformat/microdvddec: Fix memleak upon read header failure
>  avformat/lrcdec: Fix memleak upon read header failure
>  avformat/jacosubdec: Fix memleak upon read header failure
>  avformat/assdec: Fix memleak upon read header failure
>  avformat/aqtitledec: Fix memleak upon read header failure
>  avformat/mov: Fix memleaks upon read_header failure
>  avformat/omadec: Fix memleaks upon read_header failure
>  avformat/matroskadec: Fix memleaks in WebM DASH manifest demuxer
>  avformat/matroskadec: Use right number of tracks
>  avformat/matroskadec: Fix handling gigantic durations
>  avformat/aviobuf: Don't check for overflow after it happened
>  avformat/matroskaenc: Fix memleak upon encountering bogus chapter
>  fftools/ffmpeg_opt: Check attachment filesize
>  avformat/webmdashenc: Check codec types
>  avformat/avidec: Fix memleak with embedded GAB2 subtitles
>  avformat/webmdashenc: Fix memleak upon realloc failure
>  avformat/matroskadec: Don't discard the upper 32bits of TrackNumber
>  avformat/hnm: Check for extradata allocation failure
>  avformat/subtitles: Don't increment packet counter prematurely
>  avformat/bethsoftvid: Fix potential memleak upon reallocation failure
>  avformat/smoothstreaming: Fix memleaks on errors
>  avformat/matroskaenc: Check BlockAdditional size before use
>  avformat/utils: Fix memleaks in avformat_open_input()
>  avcodec/cavsdsp: Fix undefined left shifts of negative numbers
>  avformat/hevc: Fix potential leak in case of ff_hevc_annexb2mp4_buf failure
>  avformat/matroskaenc: Check for reformatting errors
>  avcodec/ra144enc: Fix invalid left shift of negative number
>  avcodec/adxenc: Avoid undefined left shift of negative numbers
>  avcodec/adpcm: Fix undefined left shifts of negative numbers
>  avcodec/proresenc_anatoliy: Fix invalid left shift of negative number
>  avformat/wtvdec: Fix memleak when reading header fails
>  avformat/fitsdec: Fix potential leak of string in AVBPrint
>  avformat/mov: fix memleaks
>  libavformat/mov: Fix memleaks when demuxing DV audio
>  avcodec/bitstream: Don't check for undefined behaviour after it happened
>  avcodec/dstdec: Replace AC overread check by sample rate check
>  avformat/utils: reorder duration computation to avoid overflow
>  avcodec/pngdec: Check for fctl after idat
>  avformat/hls: Pass a copy of the URL for probing
>  avformat/hls: check segment duration value of EXTINF
>  avutil/common: Fix integer overflow in av_ceil_log2_c()
>  avcodec/wmalosslessdec: fix overflow with pred in revert_cdlms
>  avformat/mvdec: Fix integer overflow with billions of channels
>  avformat/microdvddec: skip malformed lines without frame number.
>  avformat/mxfdec: free duplicated utf16 strings
>  avformat/4xm: Check that a video stream was created before returning packets for it
>  avcodec/ffwavesynth: Avoid undefined operation on ts overflow
>  avcodec/mpeg4videodec: Fix 2 integer overflows in get_amv()
>  avcodec/lossless_audiodsp: Fix undefined overflows in scalarproduct_and_madd_int16_c()
>  avcodec/sonic: Fix several integer overflows
>  avcodec/pixlet: Fix log(0) check
>  avcodec/iff: Fix off by x error
>  avcodec/wmalosslessdec: Check block_align maximum
>  avcodec/loco: Fix signed integer overflow in loco_get_rice()
>  avformat/thp: Check fps
>  avformat/mpl2dec: Fix integer overflow with duration
>  avcodec/mpeg12dec: remove outdated comments
>  avcodec/snowdec: Avoid integer overflow with huge qlog
>  avformat/mov: Check if DTS is AV_NOPTS_VALUE in mov_find_next_sample().
>  avcodec/mpeg12dec: Fix got_output
>  avformat/4xm: Cleanup on GET_LIST_HEADER() failure
>  avcodec/lzf: Consider the needed size in reallocation
>  avformat/mlvdec: fail reading a packet with 0 streams
>  avformat/thp: Check compcount
>  avcodec/adpcm: XA: Check shift similar to filter
>  avcodec/huffyuvdec: Test vertical coordinate more often
>  avcodec/hq_hqa: Check info size
>  avcodec/wmalosslessdec: Fix integer overflow in mclms_predict()
>  avcodec/vp9dsp_template: Fix integer overflow(s) in iadst16_1d()
>  avcodec/h264dec: Disable forced small_padding on flag2 fast
>  avformat/oggparsevorbis: Error out on double init of vp
>  avcodec/pnmdec: Use unsigned for maxval rescaling
>  avcodec/ivi: Clear got_p_frame before decoding a new frame using it
>  avcodec/dsddec: Check channels
>  avcodec/xvididct: Fix integer overflow in idct_row()
>  avcodec/wmalosslessdec: Fix integer overflows in revert_inter_ch_decorr()
>  avformat/mpegenc: Fix integer overflow with AV_NOPTS_VALUE
>  avformat/swfenc: Fix integer overflow in frame rate handling
>  avformat/aadec: Check toc_size to contain the minimum to demuxer uses
>  avformat/mov: Don't allow negative sample sizes.
>  mpeg4videoenc: Don't crash with -fsanitize=bounds
>  avformat/mpegts: Shuffle avio_seek
>  avcodec/binkaudio: Fix 2Ghz sample_rate
>  avcodec/adpcm: Fix integer overflow in ADPCM THP
>  avcodec/ralf: Check num_blocks before use
>  avcodec/iff: Test video_size being non zero
>  avcodec/utvideodec: Fix integer overflow in decode_plane()
>  avcodec/ttadsp: Fix several integer overflows in tta_filter_process_c()
>  avcodec/ralf: Fix integer overflow in decode_block()
>  avcodec/nuv: widen buf_size type
>  avcodec/iff: Fix several integer overflows
>  avcodec/g729postfilter: Clip gain before scaling with AGC_FAC1
>  avcodec/alac: Fix integer overflow with 24/20bps samples
>  avcodec/dstdec: Check sample rate
>  avformat/thp: Require a video stream
>  avformat/mpeg: Decrease score by 1 for files with very little valid data
>  avcodec/pngdec: Check length in fdAT
>  avcodec/g2meet: Check tile_width in epic_jb_decode_tile()
>  avcodec/vp9dsp_template: Fix integer overflows in idct32_1d()
>  avcodec/alacdsp: Fix invalid shift in append_extra_bits()
>  libavcodec/wmalosslessdec: prevent sum of positive numbers from becoming negative
>  avcodec/dstdec: Fix integer overflow in read_table()
>  avcodec/txd: Check for input size against the header size.
>  avcodec/svq1dec: Check that there is data left after the header
>  avcodec/intrax8: Check for end of bitstream in ff_intrax8_decode_picture()
>  avcodec/hevc_mp4toannexb_bsf: Check nalu_size
>  avcodec/iff: Check length before memcpy() in decode_deep_rle32()
>  avcodec/iff: Fix invalid pointer intermediates in decode_deep_rle32()
>  avcodec/pngdec: Pass ret from decode_iccp_chunk()
>  avcodec/rv40dsp: Fix integer overflows in rv40_weight_func_*()
>  avcodec/ac3dec_fixed: Fix several invalid left shifts in scale_coefs()
>  avcodec/flac_parser: Do not lose header count in find_headers_search()
>  avcodec/audiodsp: Fix integer overflow in scalarproduct_int16_c()
>  avformat/oggdec: Check for EOF after page header
>  swscale/yuv2rgb: Fix vertical dither offset with slices
>  avcodec/dpcm: clip exponent into supported range in XAN DPCM
>  avcodec/flacdsp_template: Fix invalid shifts in decorrelate
>  avcodec/xvididct: Fix integer overflow in MULT()
>  avcodec/ffwavesynth: Correct undefined overflow of PINK_UNIT
>  swscale/output: Fix integer overflow in yuv2rgb_write_full() with out of range input
>  swscale/output: Fix integer overflow in alpha computation in yuv2gbrp16_full_X_c()
>  libavformat/amr.c: Check return value from avio_read()
>  libavformat/mov.c: Free aes_decrypt to avoid leaking memory
>  libavformat/oggdec.c: Check return value from avio_read()
>  avformat/asfdec_f: Fix overflow check in get_tag()
>  avformat/nsvdec: Fix memleaks on errors while reading the header
>  avcodec/ffwavesynth: Fix integer overflow in computation of ddphi
>  avcodec/adpcm: Fix invalid shift in AV_CODEC_ID_ADPCM_PSX
>  avcodec/mpeg12dec: Fix invalid shift in mpeg2_fast_decode_block_intra()
>  avcodec/mpegaudioenc_template: fix invalid shift of sample
>  avcodec/motion_est_template: Fix invalid shifts in no_sub_motion_search()
>  libavformat/avienc: Check bits per sample for PAL8
>  avformat/mpegts: Improve the position determination for avpriv_mpegts_parse_packet()
>  avcodec/magicyuv: Check that there are enough lines for interlacing to be possible
>  avformat/mvdec: Check stream numbers
>  avcodec/pcm: Fix invalid shift in AV_CODEC_ID_PCM_LXF
>  avcodec/qdm2: Check fft_coefs_index
>  avformat/utils: Fix integer overflow with complex time bases in avformat_find_stream_info()
>  avformat/avidec: Avoid integer overflow in NI switch check
>  fftools/ffmpeg: Fix integer overflow in duration computation in seek_to_start()
>  avfilter/vf_aspect: Fix integer overflow in compute_dar()
>  avcodec/apedec: Fix invalid shift with 24 bps
>  avformat/utils: Fix undefined behavior in ff_configure_buffers_for_index()
>  avcodec/dpcm: Fix integer overflow in AV_CODEC_ID_GREMLIN_DPCM
>  avcodec/wmalosslessdec: Fix integer overflow with sliding in padding bits
>  avcodec/wmalosslessdec: Fix loop in revert_acfilter()
>  avcodec/lagarith: Sanity check scale
>  avcodec/apedec: Fix integer overflows in predictor_decode_mono_3950()
>  avcodec/ralf: Fix integer overflow in apply_lpc()
>  avcodec/dca_lbr: Fix some error codes and error passing
>  avcodec/wmavoice: Fix rounding and integer anomalies in calc_input_response()
>  avcodec/wmavoice: sanity check block_align
>  avcodec/pcm: Fix invalid shift in pcm_decode_frame for LXF
>  avcodec/snappy: Sanity check bytestream2_get_levarint()
>  avcodec/mlpdsp: Fix a invalid shift in ff_mlp_rematrix_channel()
>  avcodec/avdct: Clear IDCTDSPContext context
>  avcodec/x86/diracdsp: Fix high bits on Windows x86_64
>  avformat/mov: Check STCO location
>  avcodec/wmalosslessdec: Fix multiple integer overflows
>  avcodec/apedec: Fix undefined integer overflow in decode_array_0000()
>  avcodec/smacker: Check space before decoding type
>  avcodec/rawdec: Use linesize in b64a
>  avcodec/iff: Over-allocate ham_palbuf for HAM6 IFF-PBM
>  avcodec/x86/diracdsp: Fix incorrect src addressing in dequant_subband_32()
>  avfilter/vf_find_rect: Remove assert
>  avfilter/vf_find_rect: Increase worst case score
>  swscale/input: Fix several invalid shifts related to rgb2yuv constants
>  swscale/output: Fix several invalid shifts in yuv2rgb_full_1_c_template()
>  swscale/swscale: Fix several invalid shifts related to vChrDrop
>  avcodec/hevc_mp4toannexb_bsf: check that nalu size doesnt overflow
>  avcodec/hevc_mp4toannexb_bsf: Avoid NULL memcpy()
>  avcodec/wmalosslessdec: move channel check up
>  avcodec/adpcm: Fix overflow in FFABS() IMA_EA_EACS
>  avcodec/alac: Fix integer overflow in LPC coefficient adaption
>  avcodec/g729postfilter: Optimize out overflowing multiplication from apply_tilt_comp()
>  avcodec/vc1dec: Check field_mode for sprites
>  avcodec/vc1dec: Limit bits by the actual bitstream size
>  avcodec/vmdaudio: Check block_align more
>  configure: bump year
>  avcodec/pgssubdec: Free subtitle on error
>  avcodec/ffwavesynth: Fix undefined overflow in wavesynth_synth_sample()
>  avcodec/cook: Use 3 stage VLC decoding for channel_coupling
>  avcodec/wmalosslessdec: Fixes undefined overflow in dequantization in decode_subframe()
>  avcodec/sonic: Check e in get_symbol()
>  avcodec/twinvqdec: Correct overflow in block align check
>  avcodec/vc1dec: Fix "return -1" cases
>  avcodec/vc1dec: Free sprite_output_frame on error
>  avcodec/wmadec: Keep track of exponent initialization per channel
>  avcodec/iff: Check that video_size is large enough for the read parameters
>  avcodec/adpcm: Clip predictor for APC
>  avcodec/targa: Check colors vs. available space
>  avcodec/dstdec: Use get_ur_golomb_jpegls()
>  avcodec/wmavoice: Check remaining input in parse_packet_header()
>  avcodec/wmalosslessdec: Fix 2 overflows in mclms
>  avcodec/wmaprodec: Fixes integer overflow with 32bit samples
>  avcodec/adpcm: Fix invalid shift in xa_decode()
>  avcodec/wmalosslessdec: Fix several integer issues
>  avcodec/wmalosslessdec: Check that padding bits is not more than sample bits
>  avcodec/iff: Skip overflowing runs in decode_delta_d()
>  avcodec/pnm: Check that the header is not truncated
>  avcodec/mp3_header_decompress_bsf: Check sample_rate_index
>  avformat/rmdec: Initialize and sanity check offset in ivr_read_header()
>  avcodec/apedec: Fix 2 integer overflows
>  avcodec/wmaprodec: Set packet_loss when we error out on a sanity check
>  avcodec/wmaprodec: Check offset
>  avcodec/truemotion2: Fix 2 integer overflows in tm2_low_res_block()
>  avcodec/wmaprodec: Check if the channel sum of all internal contexts match the external
>  libavcodec/libvpxenc: Don't free user-provided AVPacket
>  libavcodec/libmp3lame: Don't free user-provided AVPacket
>  avcodec/libopusenc: Don't free user-provided AVPacket
>  avformat/matroskadec: Fix default value of BlockAddID
> 
> version 3.4.7:
> - avcodec/g729dec: require buf_size to be non 0
> - avcodec/alac: Fix integer overflow in lpc_prediction() with sign
> - avcodec/wmaprodec: Fix buflen computation in save_bits()
> - avcodec/vc1_block: Fix integer overflow in AC rescaling in vc1_decode_i_block_adv()
> - avcodec/vmdaudio: Check chunk counts to avoid integer overflow
> - avformat/mxfdec: Clear metadata_sets_count in mxf_read_close()
> - avcodec/nuv: Use ff_set_dimensions()
> - avcodec/ffwavesynth: Fix integer overflow with pink_ts_cur/next
> - avcodec/ralf: Fix integer overflows with the filter coefficient in decode_channel()
> - avcodec/g729dec: Use 64bit and clip in scalar product
> - avcodec/mxpegdec: Check for multiple SOF
> - avcodec/nuv: Move comptype check up
> - avcodec/wmavoice: Fix integer overflow in synth_frame()
> - avcodec/rawdec: Check bits_per_coded_sample more pedantically for 16bit cases
> - avutil/lfg: Correct index increment type to avoid undefined behavior
> - avcodec/cngdec: Remove AV_CODEC_CAP_DELAY
> - avcodec/iff: Move index use after check in decodeplane8()
> - avcodec/atrac3: Check for huge block aligns
> - avcodec/ralf: use multiply instead of shift to avoid undefined behavior in decode_block()
> - avcodec/wmadec: Require previous exponents for reuse
> - avcodec/vc1_block: Fix undefined behavior in ac prediction rescaling
> - avcodec/qdm2: The smallest header seems to have 2 bytes so treat 1 as invalid
> - avcodec/apedec: Fixes integer overflow of res+*data in do_apply_filter()
> - avcodec/sonic: Fix integer overflow in predictor_calc_error()
> - avformat/mp3dec: Check that the frame fits within the probe buffe
> - lavc/tableprint_vlc: Remove avpriv_request_sample() from included files.
> - avcodec/wmaprodec: get frame during frame decode
> - avcodec/interplayacm: Fix overflow of last unused value
> - avcodec/adpcm: Fix undefined behavior with negative predictions in IMA OKI
> - avcodec/cook: Move up and extend block_align check
> - avcodec/twinvq: Check block_align
> - avcodec/cook: Enlarge gain table
> - avcodec/cook: Check samples_per_channel earlier
> - avcodec/atrac3plus: Check split point in fill mode 3
> - avcodec/wmavoice: Check sample_rate
> - avcodec/xsubdec: fix overflow in alpha handling
> - avcodec/iff: Check available space before entering loop in decode_long_vertical_delta2() / decode_long_vertical_delta()
> - avcodec/apedec: Fix integer overflow in filter_3800()
> - avutil/lfg: Document the AVLFG struct
> - avcodec/ffv1dec: Use a different error message for the slice level CRC
> - avcodec/apedec: Fix undefined integer overflow in long_filter_ehigh_3830()
> - avcodec/dstdec: Check that AC probabilities are within range
> - avcodec/dstdec: Check read_table() for failure
> - avcodec/snowenc: Set mb_num to avoid ratecontrol floating point divisions by 0.0
> - avcodec/snowenc: Fix 2 undefined shifts
> - avformat/nutenc: Do not pass NULL to memcmp() in get_needed_flags()
> - avcodec/aacdec_template: Check samplerate
> - avcodec/truemotion2: Fix several integer overflows in tm2_low_res_block()
> - avcodec/utils: Check block_align
> - avcodec/wmalosslessdec: Fix some integer anomalies
> - avcodec/adpcm: Fix invalid shifts in ADPCM DTK
> - avcodec/apedec: Only clear the needed buffer space, instead of all
> - avcodec/libvorbisdec: Fix insufficient input checks leading to out of array reads
> - avcodec/g723_1dec: fix invalid shift with negative sid_gain
> - avcodec/vp5: Check render_x/y
> - avcodec/qdrw: Check input for header/skiped space before get_buffer()
> - avcodec/ralf: Skip initializing unused filter variables
> - avcodec/takdec: Fix overflow with large sample rates
> - avcodec/alsdec: Check that input space for header exists in read_diff_float_data()
> - avformat/pjsdec: Check duration for overflow
> - avcodec/ptx: Check that the input contains at least one line
> - avcodec/alac: Fix integer overflow in LPC
> - avcodec/smacker: Fix integer overflows in pred[] in smka_decode_frame()
> - avcodec/aliaspixdec: Check input size against minimal picture size
> - avcodec/ffwavesynth: Fix integer overflows in pink noise addition
> - avcodec/vc1_block: Fixes integer overflow in vc1_decode_i_block_adv()
> - avcodec/wmalosslessdec: Check block_align
> - avcodec/g729postfilter: Fix left shift of negative value
> - avcodec/binkaudio: Check sample rate
> - avcodec/adpcm: Check initial predictor for ADPCM_IMA_EA_EACS
> - avcodec/g723_1dec: Fix overflow in shift
> - avcodec/apedec: Fix integer overflow in predictor_update_3930()
> - avcodec/g729postfilter: Fix undefined intermediate pointers
> - avcodec/g729postfilter: Fix undefined shifts
> - avcodec/lsp: Fix undefined shifts in lsp2poly()
> - avcodec/adpcm: Fix left shifts in AV_CODEC_ID_ADPCM_EA
> - avformat/shortendec: Check k in probe
> - avfilter/vf_geq: Use av_clipd() instead of av_clipf()
> - avcodec/wmaprodec: Check that the streams channels do not exceed the overall channels
> - avcodec/qdmc: Check input space in qdmc_get_vlc()
> - avcodec/pcm: Check bits_per_coded_sample
> - avcodec/exr: Allow duplicate use of channel indexes
> - avcodec/fitsdec: Fail on 0 naxisn
> - avcodec/ituh263dec: Check input for minimal frame size
> - avcodec/truemotion1: Check that the input has enough space for a minimal index_stream
> - avformat/mpsubdec: Clear queue on error
> - avcodec/sunrast: Check that the input is large enough for the maximally compressed image
> - avcodec/sunrast: Check for availability of maplength before allocating image
> - avformat/subtitles: Check nb_subs in ff_subtitles_queue_finalize()
> - avcodec/wmaprodec: Check if there is a stream
> - avcodec/g2meet: Check for end of input in jpg_decode_block()
> - avcodec/g2meet: Check if adjusted pixel was on the stack
> - avformat/electronicarts: If no packet has been read at the end do not treat it as if theres a packet
> - avcodec/utils: Check sample_rate before opening the decoder
> - avcodec/fitsdec: fix use of uninitialised values
> - avcodec/motionpixels: Mark 2 functions as always_inline
> - avcodec/ralf: Fix integer overflow in decode_channel()
> - vcodec/vc1: compute rangex/y only for P/B frames
> - avcodec/vc1_pred: Fix invalid shifts in scaleforopp()
> - avcodec/vc1_block: Fix invalid shift with rangeredfrm
> - avcodec/vc1: Check for excessive resolution
> - avcodec/vc1: check REFDIST
> - avcodec/apedec: Fix several integer overflows in predictor_update_filter() and do_apply_filter()
> - avcodec/hevc_cabac: Tighten the limit on k in ff_hevc_cu_qp_delta_abs()
> - avcodec/4xm: Check index in decode_i_block() also in the path where its not used.
> - avcodec/atrac3: Check block_align
> - avcodec/alsdec: Avoid dereferencing context pointer in inner interleave loop
> - avcodec/fitsdec: Prevent division by 0 with huge data_max
> - avcodec/dstdec: Fix integer overflow in samples_per_frame computation
> - avcodec/g729_parser: Check block_size
> - avcodec/utils: Optimize ff_color_frame() using memcpy()
> - avcodec/aacdec: Check if we run out of input in read_stream_mux_config()
> - avcodec/utils: Use av_memcpy_backptr() in ff_color_frame()
> - avcodec/smacker: Fix integer overflow in signed int multiply in SMK_BLK_FILL
> - avcodec/alac: Fix invalid shifts in 20/24 bps
> - avcodec/alac: fix undefined behavior with INT_MIN in lpc_prediction()
> - avcodec/ffwavesynth: Fix integer overflow in timestamps
> - avcodec/adpcm: Check number of channels for MTAF
> - avcodec/sunrast: Fix indention
> - avcodec/sunrast: Fix return type for "unsupported (compression) type"
> - avformat/mov: Check for EOF in mov_read_meta()
> - avcodec/hevcdec: Fix memleak of a53_caption
> - avformat/cdxl: Fix integer overflow in intermediate
> - avcodec/hevcdec: repeat character in skiped
> - avcodec/gdv: Replace assert() checking bitstream by if()
> - libavcodec/utils: Free threads on init failure
> - avcodec/htmlsubtitles: Avoid locale dependant isdigit()
> - avcodec/alsdec: Check k from being outside what our implementation can handle
> - avcodec/takdec: Fix integer overflow in decorrelate()
> - avcodec/aacps: Fix integer overflows in hybrid_synthesis()
> - avcodec/vp56rac: delay signaling an error on truncated input
> - avcodec/vp5/6/8: use vpX_rac_is_end()
> - avcodec/vp56: Add vpX_rac_is_end() to check for the end of input
> - avcodec/qdm2: Check frame size
> - avcodec/vc1_pred: Fix refdist in scaleforopp()
> - avcodec/vorbisdec: fix FASTDIV usage for vr_type == 2
> - avcodec/iff: Check for overlap in cmap_read_palette()
> - avcodec/apedec: Fix 32bit int overflow in do_apply_filter()
> - avcodec/ralf: fix undefined shift in extend_code()
> - avcodec/ralf: fix undefined shift
> - avcodec/bgmc: Check input space in ff_bgmc_decode_init()
> - avcodec/truemotion2: Fix multiple integer overflows in tm2_null_res_block()
> - avcodec/vc1dec: Require res_sprite for wmv3images
> - avcodec/vc1_block: Check for double escapes
> - avcodec/vorbisdec: Check get_vlc2() failure
> - avcodec/tta: Fix integer overflow in prediction
> - avcodec/vb: Check input packet size to be large enough to contain flags
> - avcodec/cavsdec: Limit the number of access units per packet to 2
> - avcodec/alac: Check for bps of 0
> - avcodec/alac: Fix multiple integer overflows in lpc_prediction()
> - avcodec/rl2: set dimensions
> - avcodec/aacdec: Add FF_CODEC_CAP_INIT_CLEANUP
> - avcodec/idcinvideo: Add 320x240 default maximum resolution
> - avformat/realtextdec: free queue on error
> - avcodec/alsdec: Fix integer overflow in decode_var_block_data()
> - avcodec/alsdec: Limit maximum channels to 512
> - avcodec/anm: Check input size for a frame with just a stop code
> - avcodec/flicvideo: Optimize and Simplify FLI_COPY in flic_decode_frame_24BPP() by using bytestream2_get_buffer()
> - avcodec/loco: Check left column value
> - avcodec/ffwavesynth: Fixes invalid shift with pink noise seeking
> - avcodec/ffwavesynth: Fix integer overflow for some corner case values
> - avcodec/indeo2: Check remaining input more often
> - avcodec/diracdec: Check that slices are fewer than pixels
> - avcodec/vp56: Consider the alpha start as end of the prior header
> - avcodec/4xm: Check for end of input in decode_p_block()
> - avcodec/hevcdec: Check delta_luma_weight_l0/1
> - avcodec/hnm4video: Optimize postprocess_current_frame()
> - avcodec/hevc_refs: Optimize 16bit generate_missing_ref()
> - avcodec/scpr: Use av_memcpy_backptr() in type 17 and 33
> - avcodec/dds: Use ff_set_dimensions()
> - avcodec/mpc8: Fix 32bit mask/enum
> - avcodec/alsdec: Fix integer overflows of raw_samples in decode_var_block_data()
> - avcodec/alsdec: Fix integer overflow of raw_samples in decode_blocks()
> - avcodec/alsdec: fix mantisse shift
> - avcodec/aacdec_template: fix integer overflow in imdct_and_windowing()
> - libavcodec/iff: Use unsigned to avoid undefined behaviour
> - avcodec/alsdec: Check for block_length <= 0 in read_var_block_data()
> - avcodec/vqavideo: Set video size
> - avcodec/sanm: Check extradata_size before allocations
> - avcodec/mss1: check for overread and forward errors
> - avcodec/dirac_parser: Fix overflow in dts
> - avcodec/ralf: Fix undefined pointer in decode_channel()
> - avcodec/ralf: Fix integer overflow in apply_lpc()
> - avcodec/vorbisdec: Implement vr->classifications = 1
> - avcodec/vorbisdec: Check parameters in vorbis_floor0_decode() before divide
> - avformat/realtextdec: Check for duplicate extradata in realtext_read_header()
> - avcodec/apedec: Fix 2 signed overflows
> - avcodec/mss3: Check for the rac stream being invalid in rac_normalize()
> - avcodec/vc1_block: Check get_vlc2() return before use
> - avcodec/apedec: Do not partially clear data array
> - avcodec/hnm4video: Forward errors of decode_interframe_v4()
> - avcodec/vp3: Check that theora is theora
> - avcodec/vc1_pred: Fix invalid shift in scaleforsame()
> - avcodec/vc1_block: Fix integer overflow in ff_vc1_pred_dc()
> - avcodec/truemotion2: Fix several integer overflows in tm2_motion_block()
> - avcodec/apedec: make left/right unsigned to avoid undefined behavior
> - avcodec/apedec: Fix multiple integer overflows and undefined behaviorin filter_3800()
> - avformat/mpc: deallocate frames array on errors
> - avcodec/eatqi: Check for minimum frame size
> - avcodec/eatgv: Check remaining size after the keyframe header
> - avcodec/assdec: undefined use of memcpy()
> - avcodec/brenderpix: Check input size before allocating image
> - lafv/wavdec: Fail bext parsing on incomplete reads
> - avcodec/utils: fix leak of subtitle_header on error path
> - avcodec/utils: Check close before calling it
> - avcodec/vorbisdec: Check vlc for floor0 dec vector offset
> - avcodec/vorbisdec: amplitude bits can be more than 25 bits
> - avutil/softfloat_ieee754: Fix odd bit position for exponent and sign in av_bits2sf_ieee754()
> - avcodec/apedec: Fix various integer overflows
> - avcodec/apedec: Fix multiple integer overflows in predictor_update_filter()
> - avcodec/alsdec: fix undefined shift in multiply()
> - avcodec/alsdec: Fix 2 integer overflows
> - avcodec/flicvideo: Make line_packets int
> - avcodec/dvbsubdec: Use ff_set_dimensions()
> - avcodec/ffwavesynth: Check if there is enough extradata before allocation
> - avcodec/ffwavesynth: More correct cast in wavesynth_seek()
> - avcodec/ffwavesynth: Check sample rate before use
> - avcodec/dnxhd_parser: Fix parser when input does not have nicely sized packets
> - avcodec/dnxhd_parser: remove unneeded code
> - avformat/utils: Check rfps_duration_sum for overflow
> - avcodec/h264_refs: Also check reference in ff_h264_build_ref_list()
> - avcodec/parser: Check next index validity in ff_combine_frame()
> - avcodec/ivi: Ask for samples with odd tiles
> - avformat/xmv: Make bitrate 64bit
> - avcodec/pngdec: Check that previous_picture has same w/h/format
> - avcodec/huffyuv: remove gray8a (the format is listed but not supported by the implementation)
> - avcodec/mpc8: Fixes invalid shift in mpc8_decode_frame()
> - avcodec/utils, avcodec_open2: close codec on failure
> - avcodec/golomb: Correct the doxy about get_ue_golomb() and errors
> - avformat/utils: Check timebase before use in estimate_timings()
> - avcodec/hq_hqa: Use ff_set_dimensions()
> - avcodec/rv10: Fix integer overflow in aspect ratio compare
> - avcodec/4xm: Fix signed integer overflows in idct()
> - avcodec/qdm2: Check checksum_size for 0
> - avcodec/qdm2: error out of qdm2_fft_decode_tones() before entering endless loop
> - avcodec/qdm2: Do not read out of array in fix_coding_method_array()
> - avcodec/svq3: Use ff_set_dimension()
> - avcodec/iff: Check ham vs bpp
> - avcodec/ffwavesynth: use uint32_t to compute difference, it is enough
> - avcodec/ffwavesynth: Simplify lcg_seek(), avoid negative case
> - avcodec/ffwavesynth: Fix backward lcg_seek()
> - avcodec/flicvideo: Fix off by 1 error in flic_decode_frame_24BPP()
> - avcodec/vc1_block: Check for vlc error in vc1_decode_ac_coeff()
> - avcodec/alac: Check lpc_quant
> - avcodec/alsdec: Add FF_CODEC_CAP_INIT_CLEANUP
> - avcodec/alsdec: Fix integer overflow with buffer number
> - avcodec/alsdec: Fixes signed integer overflow in LSB addition
> - avcodec/alsdec: Check opt_order / sb_length in ra_block handling
> - avcodec/alsdec: Fix integer overflow with shifting samples
> - avcodec/alsdec: Fix undefined behavior in decode_rice()
> - avcodec/alsdec: Fixes invalid shifts in read_var_block_data() and INTERLEAVE_OUTPUT()
> - avcodec/hevc_ps: Change num_tile_rows/columns checks to sps->ctb_height/weight
> - avcodec/hevc_ps: Fix integer overflow with num_tile_rows and num_tile_columns
> - avcodec/apedec: Add k < 24 check to the only k++ case which lacks such a check
> - avformat/aviobuf: Delay buffer downsizing until asserts are met
> - avcodec/fitsdec: Check data_min/max
> - avcodec/m101: Fix off be 2 error
> - avcodec/qdm2: Move fft_order check up
> - avcodec/libvorbisdec: Check extradata size
> - avformat/vqf: Check header_size
> - avcodec/utils: Check bits_per_coded_sample
> - avcodec/videodsp_template: Fix overflow of addition
> - avcodec/alsdec: Fix invalid shift in multiply()
> - avcodec/ffwavesynth: Check ts_end - ts_start for overflow
> - avcodec/vc1dsp: Avoid undefined shifts in vc1_v_s_overlap_c / vc1_h_s_overlap_c
> - avcodec/tta: Fix undefined shift
> - avcodec/qdmc: Fix integer overflows in PRNG
> - avcodec/bintext: Check font height
> - avcodec/binkdsp: Fix integer overflows in idct
> - avcodec/motionpixels: Check for vlc error in mp_get_vlc()
> - avcodec/loco: Limit lossy parameter so it is sane and does not overflow
> - avformat/mov: Set fragment.found_tfhd only after TFHD has been parsed
> - avcodec/xpmdec: Do not use context dimensions as temporary variables
> - avcodec/fitsdec: Fix division by 0 in size check
> - avcodec/aacpsdsp_template: Fix integer overflow in ps_hybrid_analysis_c()
> - avcodec/truemotion2: Fix integer overflow in last loop in tm2_update_block()
> - avcodec/iff: finetune the palette size check in the mask case
> - avcodec/iff: Fix mask_buf / mask_palbuf leak
> - avformat/icodec: Free ico->images on error paths
> - avformat/wsddec: Fix undefined shift
> - avcodec/fmvc: Check if header fields are available before allocating the image
> - avcodec/bink: Reorder operations in init to avoid memleak on error
> - avformat/wtvdec: Avoid (32bit signed) sectors
> - avcodec/bitstream: Check for more conflicting codes in build_table()
> - avcodec/bitstream: Check for integer code truncation in build_table()
> - avformat/sbgdec: Fixes integer overflow in str_to_time() with hours
> - avformat/vpk: Check offset for validity
> - avformat/vpk: Fix integer overflow in samples_per_block computation
> - avcodec/mjpegdec: Check for non ls PAL8
> - avcodec/interplayvideo: check decoding_map_size with video_data_size
> - avcodec/h264_parse: Use 64bit for expectedpoc and expected_delta_per_poc_cycle
> - avcodec/mss4: Check input size against skip bits
> - avcodec/diracdec: Fix integer overflow in global_mv()
> - avcodec/vmnc: Check available space against chunks before reget_buffer()
> - avcodec/aacdec_template: skip apply_tns() if max_sfb is 0 (from previous header decode failure)
> - avcodec/aacdec_fixed: Handle more extreem cases in noise_scale()
> - avcodec/aacdec_template: Merge 3 #ifs related to noise handling
> - avcodec/aacdec_fixed: ssign seems always -1 in noise_scale(), simplify
> - avformat/mp3enc: Avoid SEEK_END as it is unsupported
> - avcodec/truemotion2: Fix several integer overflows in tm2_update_block()
> - avformat/webm_chunk: Specify expected argument length of get_chunk_filename()
> - avformat/webm_chunk: Check header filename length
> - avcodec/cpia: Check input size also against linesizes and EOL
> - swscale/tests/swscale: Lengthen pixfmt name buffer to 21 bytes
> - libswcale: Fix possible string overflow in test.
> - avcodec/hq_hqa: Check available space before reading slice offsets
> - lavf/webm_chunk: Respect buffer size
> - avcodec/fits: Check bitpix
> - avcodec/jvdec: Use ff_get_buffer() when the content is not reused
> - avcodec/truemotion2: Fix 2 integer overflows in tm2_update_block()
> - avcodec/jpeg2000: Check stepsize before using it
> - avcodec/aacdec_fixed: Fix undefined shift in noise_scale()
> - avutil/avstring: Fix bug and undefined behavior in av_strncasecmp()
> - avformat/mov: Skip stsd adjustment without chunks
> - avformat/aadec: Check for scanf() failure
> - avcodec/ccaption_dec: Add a blank like at the end to avoid rollup reading from outside
> - avcodec/ivi: Move buffer/block end check to caller of ivi_dc_transform()
> - avcodec/diracdec: Use 64bit in intermediate of global motion vector field generation
> - avcodec/truemotion2: Fix integer overflow in tm2_decode_blocks()
> - avcodec/rscc: Check that the to be uncompressed input is large enough
> - avcodec/bsf: check that AVBSFInternal was allocated before dereferencing it
> - lavf/rawenc: Only accept the appropriate stream type for raw muxers.
> - avcodec/h263dec: fix hwaccel decoding
> - avutil/mem: Fix invalid use of av_alloc_size
> - avformat/aacdec: resync to the next adts frame on invalid data instead of aborting
> - avformat/aacdec: factorize the adts frame resync code
> 
> version 3.4.6:
> - avcodec/hevcdec: Avoid only partly skiping duplicate first slices
> - lavc/bmp: Avoid a heap buffer overwrite for 1bpp input.
> - avcodec/truemotion2: Fix integer overflow in tm2_null_res_block()
> - avcodec/dfa: Check the chunk header is not truncated
> - avcodec/dvbsubdec: Check object position
> - avcodec/cdgraphics: Use ff_set_dimensions()
> - avformat/gdv: Check fps
> - avcodec/scpr: Fix use of uninitialized variable
> - avcodec/qpeg: Limit copy in qpeg_decode_intra() to the available bytes
> - avcodec/aic: Check remaining bits in aic_decode_coeffs()
> - avcodec/gdv: Check for truncated tags in decompress_5()
> - avcodec/bethsoftvideo: Check block_type
> - avcodec/jpeg2000dwt: Fix integer overflow in dwt_decode97_int()
> - avcodec/error_resilience: Use a symmetric check for skipping MV estimation
> - avcodec/mlpdec: Insuffient typo
> - avcodec/zmbv: obtain frame later
> - avcodec/jvdec: Check available input space before decode8x8()
> - avcodec/h264_direct: Fix overflow in POC comparission
> - avformat/webmdashenc: Check id in adaption_sets
> - avformat/http: Fix Out-of-Bounds access in process_line()
> - avformat/ftp: Fix Out-of-Bounds Access and Information Leak in ftp.c:393
> - avcodec/htmlsubtitles: Fixes denial of service due to use of sscanf in inner loop for handling braces
> - avcodec/htmlsubtitles: Fixes denial of service due to use of sscanf in inner loop for tag scaning
> - avformat/matroskadec: Do not leak queued packets on sync errors
> - avformat/mov: Do not use reference stream in mov_read_sidx() if there is no reference stream
> - avcodec/sbrdsp_fixed.c: remove input value limit for sbr_sum_square_c()
> - avformat/mov: validate chunk_count vs stsc_data
> - avformat/mov.c: require tfhd to begin parsing trun
> - avcodec/pgssubdec: Check for duplicate display segments
> - avformat/rtsp: Check number of streams in sdp_parse_line()
> - avformat/rtsp: Clear reply in every iteration in ff_rtsp_connect()
> - avcodec/fic: Check that there is input left in fic_decode_block()
> - avcodec/tiff: Check for 12bit gray fax
> - avutil/imgutils: Optimize memset_bytes() by using av_memcpy_backptr()
> - avutil/mem: Optimize fill32() by unrolling and using 64bit
> - configure: bump year
> - avcodec/diracdec: Check component quant
> - avcodec/tests/rangecoder: initialize array to avoid valgrind warning
> - avcodec/h264_slice: Fix integer overflow in implicit_weight_table()
> - avcodec/exr: set layer_match in all branches
> - avcodec/exr: Check for duplicate channel index
> - avcodec/4xm: Fix returned error codes
> - avcodec/v4l2_m2m: fix cant typo
> - avcodec/mjpegbdec: Fix some misplaced {} and spaces
> - avformat/wvdec: detect and error out on WavPack DSD files
> - avcodec/mips: Fix failed case: hevc-conformance-AMP_A_Samsung_* when enable msa
> - avcodec/fic: Fail on invalid slice size/off
> - postproc/postprocess_template: remove FF_REG_sp from clobber list
> - postproc/postprocess_template: Avoid using %4 for the threshold compare
> - avcodec/rpza: Check that there is enough data for all the blocks
> - avcodec/rpza: Move frame allocation to a later point
> - avcodec/avcodec: Document the data type for AV_PKT_DATA_MPEGTS_STREAM_ID
> - avformat/mpegts: Fix side data type for stream id
> - tests/fate/filter-video: increase fuzz for fate-filter-refcmp-psnr-rgb
> - avcodec/mjpegdec: Fix indention of ljpeg_decode_yuv_scan()
> - lavf/id3v2: fail read_apic on EOF reading mimetype
> - avformat/nutenc: Document trailer index assert better
> - lavf/mov: ensure only one tkhd per trak
> - avcodec/ppc/hevcdsp: Fix build failures with powerpc-linux-gnu-gcc-4.8 with --disable-optimizations
> - avcodec/msvideo1: Check for too small dimensions
> - avcodec/wmv2dec: Skip I frame if its smaller than 1/8 of the minimal size
> - avcodec/msmpeg4dec: Skip frame if its smaller than 1/8 of the minimal size
> - avcodec/truemotion2rt: Fix rounding in input size check
> - avcodec/truemotion2: fix integer overflows in tm2_low_chroma()
> - avcodec/pngdec: Check compression method
> - fftools/ffmpeg: Repair reinit_filter feature
> - avcodec/shorten: Fix integer overflow with offset
> - avcodec/cavsdec: Propagate error codes inside decode_mb_i()
> - avcodec/mpegaudio_parser: Consume more than 0 bytes in case of the unsupported mp3adu case
> - avcodec/hevcdec: decode at most one slice reporting being the first in the picture
> - avfilter/af_silenceremove: fix possible crash if supplied duration is negative
> 
> version 3.4.5:
> - avutil/integer: Fix integer overflow in av_mul_i()
> - avcodec/msrle: Check that the input is large enough to contain a end of picture code
> - avcodec/jpeg2000dec: Fix off by 1 error in JPEG2000_PGOD_CPRL handling
> - avcodec/mpeg4videodec: Fix typo in sprite delta check
> - avcodec/h264_cavlc: Check mb_skip_run
> - avcodec/ra144: Fix integer overflow in add_wav()
> - avformat/utils: Never store negative values in last_IP_duration
> - avformat/utils: Fix integer overflow in discontinuity check
> - avcodec/unary: Improve get_unary() docs
> - avcodec/gdv: Replace divisions by shifts in rescale()
> - avcodec/dvdsubdec: Sanity check len in decode_rle()
> - avcodec/mpeg4videodec: Fix undefined shift in get_amv()
> - avcodec/zmbv: Check that the decompressed data size is correct
> - avcodec/zmbv: Update decomp_len in raw frames
> - avcodec/shorten: Fix bitstream end check in read_header()
> - avcodec/dvdsubdec: Avoid branch in decode_run_8bit()
> - avcodec/h264_refs: Document last if() in ff_h264_execute_ref_pic_marking()
> - avcodec/ra144: Fix undefined integer overflow in add_wav()
> - avcodec/indeo4: Check dimensions in decode_pic_hdr()
> - avformat/mov: Error on too large stsd entry counts.
> - examples: Fix use of AV_CODEC_FLAG_GLOBAL_HEADER
> - avcodec/hq_hqa: Check remaining input bits in hqa_decode_mb()
> - avcodec/vb: Check for end of bytestream before reading blocktype
> - avcodec/snowdec: Fix integer overflow with motion vector residual
> - avformat/nsvdec: Do not parse multiple NSVf
> - avformat/mlvdec: read_string() received unsigned size, make the argument unsigned
> - avformat/rmdec: Fix EOF check in the stream loop in ivr_read_header()
> - avcodec/scpr: Check for min > max in decompress_p()
> - avcodec/shorten: Fix signed 32bit overflow in shift in shorten_decode_frame()
> - avcodec/shorten: Fix integer overflow in residual/LPC combination
> - avcodec/shorten: Check verbatim length
> - avcodec/mpegaudio_parser: Initialize poutbuf*
> - avcodec/aacpsdsp_template: Fix integer overflow in ps_stereo_interpolate_c()
> - avformat/flvenc: Check audio packet size
> - lavc/svq3: Fix regression decoding some files.
> - avcodec/qtrle: Check remaining bytestream in qtrle_decode_XYbpp()
> - avcodec/diracdec: Check bytes count in else branch in decode_lowdelay() too
> - avcodec/diracdec: Check slice numbers for overflows in relation to picture dimensions
> - avcodec/diracdec: Change frame_number to 64bit as its a 32bit from the bitstream and we also have a -1 special case
> - avcodec/dirac_dwt_template: Fix several integer overflows in horizontal_compose_daub97i()
> - avcodec/diracdec: Prevent integer overflow in intermediate in global_mv()
> - swresample/swresample: Fix input channel count in resample_first computation
> - avutil/pixfmt: Document chroma plane size for odd resolutions
> - avcodec/cuviddec: properly take deinterlacing and display delay into account for buffer_full check
> - configure: add LIBDRM to extralibs_avutil
> - avcodec/bitstream_filters: check the input argument of av_bsf_get_by_name() for NUL
> 
> version 3.4.4:
> - avcodec/dvdsub_parser: Allocate input padding
> - avcodec/dvdsub_parser: Init output buf/size
> - avcodec/dirac_dwt_template: Fix signedness regression in interleave()
> - avformat/movenc: Write version 2 of audio atom if channels is not known
> - swresample/arm: rename labels to fix xcode build error
> - avcodec/imgconvert: fix possible null pointer dereference
> 
> version 3.4.3:
> - avformat/movenc: Check input sample count
> - avcodec/mjpegdec: Check for odd progressive RGB
> - avformat/movenc: Check that frame_types other than EAC3_FRAME_TYPE_INDEPENDENT have a supported substream id
> - avcodec/vp8_parser: Do not leave data/size uninitialized
> - avformat/mms: Add missing chunksize check
> - avformat/pva: Check for EOF before retrying in read_part_of_packet()
> - avformat/rmdec: Do not pass mime type in rm_read_multi() to ff_rm_read_mdpr_codecdata()
> - avformat/asfdec_o: Check size_bmp more fully
> - avcodec/indeo4: Check for end of bitstream in decode_mb_info()
> - avcodec/shorten: Fix undefined addition in shorten_decode_frame()
> - avcodec/shorten: Fix undefined integer overflow
> - avcodec/jpeg2000dec: Fixes invalid shifts in jpeg2000_decode_packets_po_iteration()
> - avcodec/jpeg2000dec: Check that there are enough bytes for all tiles
> - avformat/movenc: Do not pass AVCodecParameters in avpriv_request_sample
> - avcodec/escape124: Fix spelling errors in comment
> - avcodec/ra144: Fix integer overflow in ff_eval_refl()
> - avcodec/cscd: Check output buffer size for lzo.
> - avcodec/escape124: Check buf_size against num_superblocks
> - avcodec/h264_parser: Reduce needed history for parsing mb index
> - avcodec/magicyuv: Check bits left in flags&1 branch
> - avcodec/mjpegdec: Check for end of bitstream in ljpeg_decode_rgb_scan()
> - avcodec/aacdec_fixed: Fix undefined integer overflow in apply_independent_coupling_fixed()
> - avcodec/dirac_dwt_template: Fix undefined behavior in interleave()
> - avutil/common: Fix undefined behavior in av_clip_uintp2_c()
> - fftools/ffmpeg: Fallback to duration if sample rate is unavailable
> - avformat/mov: Only set pkt->duration to non negative values
> - avcodec/h264_slice: Fix overflow in recovery_frame computation
> - avcodec/h264_ps: Move MAX_LOG2_MAX_FRAME_NUM to header so it can be used in h264_sei
> - avcodec/h264_mc_template: Only prefetch motion if the list is used.
> - avcodec/xwddec: Use ff_set_dimensions()
> - avcodec/wavpack: Fix overflow in adding tail
> - avcodec/shorten: Fix multiple integer overflows
> - avcodec/shorten: Fix undefined shift in fix_bitshift()
> - avcodec/shorten: Fix a negative left shift in shorten_decode_frame()
> - avcodec/shorten: Sanity check nmeans
> - avcodec/shorten: Check non COMM chunk len before skip in decode_aiff_header()
> - avcodec/mjpegdec: Fix integer overflow in ljpeg_decode_rgb_scan()
> - avcodec/truemotion2: Fix overflow in tm2_apply_deltas()
> - avcodec/opus_silk: Change silk_lsf2lpc() slightly toward silk/NLSF2A.c
> - avcodec/amrwbdec: Fix division by 0 in find_hb_gain()
> - avformat/mov: replace a value error by clipping into valid range in mov_read_stsc()
> - avformat/mov: Break out early if chunk_count is 0 in mov_build_index()
> - avcodec/fic: Avoid some magic numbers related to cursors
> - avcodec/g2meet: ask for sample with overflowing RGB
> - avcodec/aacdec_fixed: use 64bit to avoid overflow in rounding in apply_dependent_coupling_fixed()
> - oavcodec/aacpsdsp_template: Use unsigned for hs0X to prevent undefined behavior
> - avcodec/g723_1dec: Clip bits2 in both directions
> - avcodec/mpeg4videoenc: Use 64 bit for times in mpeg4_encode_gop_header()
> - avcodec/mlpdec: Only change noise_type if the related fields are valid
> - indeo4: Decode all or nothing of a band header.
> - avformat/mov: Only fail for STCO/STSC contradictions if both exist
> - avcodec/dirac_dwt: Fix integer overflow in COMPOSE_DD97iH0 / COMPOSE_DD137iL0
> - avcodec/fic: Check available input space for cursor
> - avcodec/g2meet: Check RGB upper limit
> - avcodec/jpeg2000dec: Fix undefined shift in the jpeg2000_decode_packets_po_iteration() CPRL case
> - avcodec/jpeg2000dec: Skip init for component in CPRL if nothing is to be done
> - avcodec/g2meet: Change order of operations to avoid undefined behavior
> - avcodec/flac_parser: Fix infinite loop
> - avcodec/wavpack: Fix integer overflow in DEC_MED() / INC_MED()
> - avcodec/wavpack: Fix integer overflow in wv_unpack_stereo()
> - avcodec/error_resilience: Fix integer overflow in filter181()
> - avcodec/h263dec: Check slice_ret in mspeg4 slice loop
> - avcodec/elsdec: Fix memleaks
> - avcodec/vc1_block: simplify ac_val computation
> - avcodec/ffv1enc: Check that the crc + version combination is supported
> - lavf/http.c: Free allocated client URLContext in case of error.
> - avcodec/dsicinvideo: Fail if there is only a small fraction of the data available that comprises a full frame
> - avcodec/dsicinvideo: Propagate errors from cin_decode_rle()
> - avcodec/dfa: Check dimension against maximum
> - avcodec/cinepak: Skip empty frames
> - avcodec/cinepak: move some checks prior to frame allocation
> - swresample/arm: remove unintentional relocation.
> - doc/APIchanges: Fix typos in hashes
> - avformat/utils: Check cur_dts in update_initial_timestamps() more
> - avcodec/utils: Enforce minimum width also for VP5/6
> - avcodec/truemotion2: Propagate out of bounds error from GET_TOK()
> - avformat/utils: Fix integer overflow in end time calculation in update_stream_timings()
> - avcodec/mjpegdec: Check input buffer size.
> - avcodec/h264_slice: Fix integer overflow with last_poc
> - avformat/mov: Fix extradata memleak
> - lavc/libopusdec: Allow avcodec_open2 to call .close
> - avcodec/movtextdec: Check style_start/end
> - avcodec/aacsbr_fixed: Fix integer overflow in sbr_hf_assemble()
> - libavcodec/rv34: error out earlier on missing references
> - swresample/swresample: Fix for seg fault in swr_convert_internal() -> sum2_float during dithering.
> - avcodec/aacdec_fixed: Fix integer overflow in apply_independent_coupling_fixed()
> - avcodec/cscd: Error out when LZ* decompression fails
> - avcodec/imgconvert: Fix loss mask bug in avcodec_find_best_pix_fmt_of_list()
> - avfilter/vf_signature: use av_strlcpy()
> - avcodec/utvideodec: Set pro flag based on fourcc
> - avcodec/wmalosslessdec: Fix null pointer dereference in decode_frame()
> - avcodec/tableprint_vlc: Fix build failure with --enable-hardcoded-tables
> - avformat/mov: Move +1 in check to avoid hypothetical overflow in add_ctts_entry()
> - avcodec/get_bits: Make sure the input bitstream with padding can be addressed
> - avformat/mov: Check STSC and remove invalid entries
> - avcodec/nuv: rtjpeg with dimensions less than 16 would result in no decoded pixels thus reject it
> - avcodec/nuv: Check for minimum input size for uncomprssed and rtjpeg
> - avcodec/wmalosslessdec: Reset num_saved_bits on error path
> - avformat/mov: Fix integer overflows related to sample_duration
> - avformat/img2dec: fix infinite loop
> - avformat/oggparsedaala: Do not adjust AV_NOPTS_VALUE
> - avformat/oggparseogm: Check lb against psize
> - avformat/oggparseogm: Fix undefined shift in ogm_packet()
> - avformat/avidec: Fix integer overflow in cum_len check
> - avformat/oggparsetheora: Do not adjust AV_NOPTS_VALUE
> - avformat/utils: Fix integer overflow of fps_first/last_dts
> - avformat/oggdec: Fix metadata memleak on multiple headers
> - libavformat/oggparsevorbis: Fix memleak on multiple headers
> - avformat/mov: Fix integer overflow in mov_get_stsc_samples()
> - avcodec/truemotion2rt: Check input buffer size
> - avcodec/g2meet: Check tile dimensions with av_image_check_size2()
> - avcodec/exr: fix invalid shift in unpack_14()
> - avcodec/bintext: sanity check dimensions
> - avcodec/utvideodec: Check subsample factors
> - avcodec/smc: Check input packet size
> - avcodec/cavsdec: Check alpha/beta offset
> - avcodec/diracdec: Fix integer overflow in mv computation
> - avcodec/h264_parse: Clear invalid chroma weights in ff_h264_pred_weight_table()
> - avcodec/aacdec_templat: Fix integer overflow in apply_ltp()
> - avcodec/jpeg2000dwt: Fix integer overflows in sr_1d53()
> - avcodec/diracdec: Use int64 in global mv to prevent overflow
> - avcodec/dxtory: Remove code that corrupts dimensions
> - avcodec/dirac_dwt_template: Fix Integer overflow in horizontal_compose_dd137i()
> - avcodec/hevcdec: Check luma/chroma_log2_weight_denom
> - avcodec/jpeg2000dec: Use av_image_check_size2()
> - avcodec/vp8: Check for bitstream end before vp7_fade_frame()
> - avcodec/exr: Check remaining bits in last get code loop
> - avutil/common: Fix integer overflow in av_clip_uint8_c() and av_clip_uint16_c()
> - avdevice/decklink_dec: Fix ;;
> - avcodec/h264_cabac: Tighten allowed coeff_abs range
> - avcodec/h264_cavlc: Set valid qscale value in ff_h264_decode_mb_cavlc()
> - avdevice/iec61883: free the private context at the end
> - avdevice/iec61883: return reference counted packets
> - configure: add nvcc to CMDLINE_SET
> - avcodec/mpeg4_unpack_bframes: make sure the packet is writable when data needs to be changed
> - avcodec/mp3_header_decompress: don't free the user provided packet on error
> - avcodec/extract_extradata: zero initalize the padding bytes in all allocated buffers
> - avformat/hvcc: zero initialize the nal buffers past the last written byte
> - swresample/rematrix: fix update of channel matrix if input or output layout is undefined
> - avformat/matroskadec: ignore CodecPrivate if the stream is VP9
> 
> version 3.4.2:
> - avcodec/vp3: Error out on invalid num_coeffs in unpack_vlcs()
> - avcodec/mpeg4videodec: Ignore multiple VOL headers
> - avcodec/vp3: Check eob_run
> - avcodec/pafvideo: Check allocated frame size
> - avcodec/scpr: Fix reading a pixel before the first
> - avcodec/mpeg2dec: Fix field selection for skipped macroblocks
> - avcodec/huffyuvdec: Check input buffer size
> - avcodec/utvideodec: Fix bytes left check in decode_frame()
> - avcodec/wavpack: Fix integer overflow in FFABS
> - avcodec/aacsbr_fixed: Fix overflows in rounding in sbr_hf_assemble()
> - avcodec/exr: Fix memleaks in decode_header()
> - avcodec/mediacodecdec: use ff_hevc_ps_uninit()
> - avcodec/hevc_parser: use ff_hevc_uninit_parameter_sets()
> - avcodec/hevcdec: use ff_hevc_uninit_parameter_sets()
> - avcodec/hevc_ps: add a function to uninitialize parameter set buffers
> - avcodec/dirac_dwt: Fix several integer overflows
> - avcodec/indeo5: Do not leave frame_type set to an invalid value
> - avcodec/hevc_ps: Check log2_sao_offset_scale_*
> - avcodec/mpeg4videodec: Avoid possibly aliasing violating casts
> - avcodec/get_bits: Document the return code of get_vlc2()
> - avcodec/mpeg4videodec: Check mb_num also against 0
> - avfilter/vf_transpose: Fix used plane count.
> - avcodec/hevc_cabac: Check prefix so as to avoid invalid shifts in coeff_abs_level_remaining_decode()
> - avcodec/mjpegdec: Fix integer overflow in DC dequantization
> - avcodec/dxtory: Fix bits left checks
> - avcodec/hevc_cabac: Move prefix check in coeff_abs_level_remaining_decode() down
> - avcodec/truemotion2: Fix integer overflow in TM2_RECALC_BLOCK()
> - avcodec/snowdec: Fix integer overflow before htaps check
> - avcodec/ulti: Check number of blocks at init
> - avcodec/wavpack: Fix integer overflows in wv_unpack_stereo / mono
> - avcodec/jpeg2000: Check sum of sizes of band->prec before allocating
> - avcodec/ac3dec_fixed: Fix integer overflow in scale_coefs()
> - avformat/lrcdec: Fix memory leak in lrc_read_header()
> - avformat/matroskadec: Fix float-cast-overflow undefined behavior in matroska_parse_tracks()
> - lavfi/deinterlace_vaapi: fix can't show full option information.
> - configure:version 3.4.1: bump year
> - avcodec/utils: Avoid hardcoding duplicated types in sizeof()
> - avcodec/arm/sbrdsp_neon: Use a free register instead of putting 2 things in one
> - avcodec/h264addpx_template: Fixes integer overflows
> - avcodec/dirac_dwt: Fix overflows in COMPOSE_HAARiH0/COMPOSE_HAARiL0
> - avcodec/diracdec: Fix integer overflow with quant
> - avcodec/opus_parser: Check payload_len in parse_opus_ts_header()
> - avcodec/jpeg2000dsp: Fix integer overflows in ict_int()
> - avcodec/h264_slice: Do not attempt to render into frames already output
> - avcodec/dnxhddec: Check dc vlc
> - avcodec/exr: Check buf_size more completely
> - avcodec/flacdec: Fix overflow in multiplication in decode_subframe_fixed()
> - avcodec/hevcdsp_template: Fix Invalid shifts in put_hevc_qpel_bi_w_h() and put_hevc_qpel_bi_w_w()
> - avcodec/flacdec: avoid undefined shift
> - avcodec/hevcdsp_template.c: Fix undefined shift in FUNC(dequant)
> - avcodec/dirac_dwt: Fix integer overflow in COMPOSE_DD97iH0() and COMPOSE_DD137iL0()
> - avcodec/hevc_cabac: Fix integer overflow in ff_hevc_cu_qp_delta_abs()
> - tests/audiomatch: Add missing return code at the end of main()
> - avcodec/hevc_sei: Fix integer overflows in decode_nal_sei_message()
> - avcodec/hevcdsp_template: Fix undefined shift in put_hevc_qpel_bi_w_hv()
> - avcodec/h264_parse: Treat escaped and unescaped decoding error equal in decode_extradata_ps_mp4()
> - avcodec/vp9: mark frame as finished on decode_tiles() failure
> - libavfilter/af_dcshift.c: Fixed repeated spelling error
> - avfilter/formats: fix wrong function name in error message
> 
> version 3.4.1:
> - avcodec/vp9_superframe_split_bsf: Fix integer overflow in frame_size/total_size checks
> - avcodec/amrwbdec: Fix division by 0 in voice_factor()
> - avformat/utils: Fix warning: ISO C90 forbids mixed declarations and code
> - avcodec/decode: reset codec on receiving packet after EOF in compat_decode
> - avcodec/diracdsp: Fix integer overflow in PUT_SIGNED_RECT_CLAMPED()
> - avcodec/dirac_dwt: Fix integer overflows in COMPOSE_DAUB97*
> - avcodec/extract_extradata_bsf: Fix leak discovered via fuzzing
> - avcodec/vorbis: Fix another 1 << 31 > int32_t::max() with 1u.
> - avcodec/vorbis: 1 << 31 > int32_t::max(), so use 1u << 31 instead.
> - avformat/utils: Prevent undefined shift with wrap_bits > 64.
> - avcodec/j2kenc: Fix out of array access in encode_cblk()
> - avcodec/hevcdsp_template: Fix undefined shift in put_hevc_epel_bi_w_h()
> - lavf/mov: fix huge alloc in mov_read_ctts
> - avcodec/mlpdsp: Fix signed integer overflow, 2nd try
> - avcodec/h264idct_template: Fix integer overflow in ff_h264_idct8_add
> - avcodec/kgv1dec: Check that there is enough input for maximum RLE compression
> - avformat/aacdec: Fix leak in adts_aac_read_packet()
> - avcodec/dirac_dwt: Fix integer overflow in COMPOSE_FIDELITYi*
> - avcodec/sbrdsp_fixed: Fix integer overflow
> - avcodec/mpeg4videodec: Check also for negative versions in the validity check
> - Close ogg stream upon error when using AV_EF_EXPLODE.
> - Fix undefined shift on assumed 8-bit input.
> - Use ff_thread_once for fixed, float table init.
> - Fix leak of frame_duration_buffer in mov_fix_index().
> - avformat/mov: Propagate errors in mov_switch_root.
> - avcodec/hevcdsp_template: Fix invalid shift in put_hevc_epel_bi_w_v()
> - avcodec/mlpdsp: Fix undefined shift ff_mlp_pack_output()
> - avcodec/zmbv: Check that the buffer is large enough for mvec
> - avcodec/dirac_dwt: Fix integer overflow in COMPOSE_DD137iL0()
> - avcodec/wmv2dec: Check end of bitstream in parse_mb_skip() and ff_wmv2_decode_mb()
> - avcodec/snowdec: Check for remaining bitstream in decode_blocks()
> - avcodec/snowdec: Check intra block dc differences.
> - avformat/mov: Check size of STSC allocation
> - avcodec/vc2enc: Clear coef_buf on allocation
> - avcodec/h264dec: Fix potential array overread
> - avcodec/x86/mpegvideodsp: Fix signedness bug in need_emu
> - avcodec/aacpsdsp_template: Fix integer overflows in ps_decorrelate_c()
> - avcodec/aacdec_fixed: Fix undefined shift
> - avcodec/mdct_*: Fix integer overflow in addition in RESCALE()
> - avcodec/snowdec: Fix integer overflow in header parsing
> - avcodec/cngdec: Fix integer clipping
> - avcodec/sbrdsp_fixed: Fix integer overflow in shift in sbr_hf_g_filt_c()
> - avcodec/aacsbr_fixed: Fix division by zero in sbr_gain_calc()
> - avutil/softfloat: Add FLOAT_MIN
> - avcodec/h264idct_template: Fix integer overflows in ff_h264_idct8_add()
> - avcodec/xan: Check for bitstream end in xan_huffman_decode()
> - avcodec/exr: fix undefined shift in pxr24_uncompress()
> - avformat: Free the internal codec context at the end
> - avcodec/h264idct_template: Fix integer overflows in ff_h264_idct8_add()
> - avcodec/xan: Improve overlapping check
> - avcodec/aacdec_fixed: Fix integer overflow in apply_dependent_coupling_fixed()
> - avcodec/aacdec_fixed: Fix integer overflow in predict()
> - avcodec/jpeglsdec: Check for end of bitstream in ls_decode_line()
> - avcodec/jpeglsdec: Check ilv for being a supported value
> - tests/ffserver.regression.ref: update checksums to what ffserver currently produces
> - ffserver: Fix off by 1 error in path
> - avcodec/proresdec: align dequantization matrix buffers
> - avformat/matroskaenc: add missing allocation failure checks for stream durations
> - avformat/matroskaenc: actually enforce the stream limit
> - configure: Fix dependencies of aac_at decoder.
> - Don't manipulate duration when it's AV_NOPTS_VALUE.
> - lavfi/af_pan: fix sign handling in channel coefficient parser
> - avformat/hlsenc: write fmp4 init header after first AV frame
> - avformat/hlsenc: allocate space for terminating null
> - avformat/hlsenc: reindent hlsenc code
> - avformat/hlsenc: check hls segment mode for ignore the init filename
> - avformat/hlsenc: reindent hlsenc code
> - avformat/hlsenc: fix missing first segment bug in fmp4 mode
> - avformat/hlsenc: fix base_output_dirname is null when basename_size is 0 bug
> - ffplay: use SDL2 audio API
> - ffplay: only use hardware accelerated SDL texture formats
> - ffplay: create the window and the renderer before starting playback
> - ffmpeg: always init output stream before reaping filters
> - vc2enc_dwt: pad the temporary buffer by the slice size
> - lavu/arm: Check for have_vfp_vm instead of !have_vfpv3 for float_dsp_vfp
> 
diff -r android/contrib/ffmpeg-x86/configure /tmp/ffmpeg-x86/configure
2279a2280
>     nvcc
2905a2907
> aac_at_decoder_select="aac_adtstoasc_bsf"
5920c5922
< enabled libdrm            && require_pkg_config libdrm libdrm xf86drm.h drmGetVersion
---
> enabled libdrm            && require_pkg_config libdrm libdrm xf86drm.h drmGetVersion && LIBDRM="-ldrm"
7002c7004
< #define CONFIG_THIS_YEAR 2017
---
> #define CONFIG_THIS_YEAR 2020
7097c7099
< extralibs_avutil="$LIBRT $LIBM"
---
> extralibs_avutil="$LIBRT $LIBDRM $LIBM"
diff -r android/contrib/ffmpeg-x86/doc/APIchanges /tmp/ffmpeg-x86/doc/APIchanges
745c745
< 2014-08-13 - afbd4b8 - lavf 56.01.0 - avformat.h
---
> 2014-08-13 - afbd4b7e09 - lavf 56.01.0 - avformat.h
762c762
< 2014-08-07 - bb78903 - lsws 2.1.3 - swscale.h
---
> 2014-08-07 - bb789016d4 - lsws 2.1.3 - swscale.h
diff -r android/contrib/ffmpeg-x86/doc/Doxyfile /tmp/ffmpeg-x86/doc/Doxyfile
41c41
< PROJECT_NUMBER         = 3.4
---
> PROJECT_NUMBER         = 3.4.8
diff -r android/contrib/ffmpeg-x86/doc/examples/transcoding.c /tmp/ffmpeg-x86/doc/examples/transcoding.c
175a176,178
>             if (ofmt_ctx->oformat->flags & AVFMT_GLOBALHEADER)
>                 enc_ctx->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
> 
187,188d189
<             if (ofmt_ctx->oformat->flags & AVFMT_GLOBALHEADER)
<                 enc_ctx->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
diff -r android/contrib/ffmpeg-x86/fftools/ffmpeg.c /tmp/ffmpeg-x86/fftools/ffmpeg.c
555a556
>         av_dict_free(&ost->swr_opts);
2157,2159d2157
<     if (!!ifilter->hw_frames_ctx != !!frame->hw_frames_ctx ||
<         (ifilter->hw_frames_ctx && ifilter->hw_frames_ctx->data != frame->hw_frames_ctx->data))
<         need_reinit = 1;
2172a2171,2177
>     if (!ifilter->ist->reinit_filters && fg->graph)
>         need_reinit = 0;
> 
>     if (!!ifilter->hw_frames_ctx != !!frame->hw_frames_ctx ||
>         (ifilter->hw_frames_ctx && ifilter->hw_frames_ctx->data != frame->hw_frames_ctx->data))
>         need_reinit = 1;
> 
2740,2741c2745,2750
<             ist->next_dts += ((int64_t)AV_TIME_BASE * ist->dec_ctx->frame_size) /
<                              ist->dec_ctx->sample_rate;
---
>             if (ist->dec_ctx->sample_rate) {
>                 ist->next_dts += ((int64_t)AV_TIME_BASE * ist->dec_ctx->frame_size) /
>                                   ist->dec_ctx->sample_rate;
>             } else {
>                 ist->next_dts += av_rescale_q(pkt->duration, ist->st->time_base, AV_TIME_BASE_Q);
>             }
4196c4205,4206
<         duration += ist->max_pts - ist->min_pts;
---
>         if (ist->max_pts > ist->min_pts && ist->max_pts - (uint64_t)ist->min_pts < INT64_MAX - duration)
>             duration += ist->max_pts - ist->min_pts;
4538a4549,4557
>         if (!ost->initialized) {
>             char error[1024] = {0};
>             ret = init_output_stream(ost, error, sizeof(error));
>             if (ret < 0) {
>                 av_log(NULL, AV_LOG_ERROR, "Error initializing output stream %d:%d -- %s\n",
>                        ost->file_index, ost->index, error);
>                 exit_program(1);
>             }
>         }
diff -r android/contrib/ffmpeg-x86/fftools/ffmpeg_opt.c /tmp/ffmpeg-x86/fftools/ffmpeg_opt.c
0a1
> 
2381,2382c2382,2384
<         if (!(attachment = av_malloc(len))) {
<             av_log(NULL, AV_LOG_FATAL, "Attachment %s too large to fit into memory.\n",
---
>         if (len > INT_MAX - AV_INPUT_BUFFER_PADDING_SIZE ||
>             !(attachment = av_malloc(len + AV_INPUT_BUFFER_PADDING_SIZE))) {
>             av_log(NULL, AV_LOG_FATAL, "Attachment %s too large.\n",
2386a2389
>         memset(attachment + len, 0, AV_INPUT_BUFFER_PADDING_SIZE);
2778c2781
<             int i, j, fr;
---
>             int i, j;
2781a2785
>                     int64_t fr;
2784c2788
<                     fr = st->time_base.den * 1000 / st->time_base.num;
---
>                     fr = st->time_base.den * 1000LL / st->time_base.num;
diff -r android/contrib/ffmpeg-x86/fftools/ffplay.c /tmp/ffmpeg-x86/fftools/ffplay.c
363a364,365
> static SDL_RendererInfo renderer_info = {0};
> static SDL_AudioDeviceID audio_dev;
1194c1196
<         SDL_CloseAudio();
---
>         SDL_CloseAudioDevice(audio_dev);
1323,1354c1325,1333
<     if (!window) {
<         int flags = SDL_WINDOW_SHOWN;
<         if (!window_title)
<             window_title = input_filename;
<         if (is_full_screen)
<             flags |= SDL_WINDOW_FULLSCREEN_DESKTOP;
<         if (borderless)
<             flags |= SDL_WINDOW_BORDERLESS;
<         else
<             flags |= SDL_WINDOW_RESIZABLE;
<         window = SDL_CreateWindow(window_title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, w, h, flags);
<         SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
<         if (window) {
<             SDL_RendererInfo info;
<             renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
<             if (!renderer) {
<                 av_log(NULL, AV_LOG_WARNING, "Failed to initialize a hardware accelerated renderer: %s\n", SDL_GetError());
<                 renderer = SDL_CreateRenderer(window, -1, 0);
<             }
<             if (renderer) {
<                 if (!SDL_GetRendererInfo(renderer, &info))
<                     av_log(NULL, AV_LOG_VERBOSE, "Initialized %s renderer.\n", info.name);
<             }
<         }
<     } else {
<         SDL_SetWindowSize(window, w, h);
<     }
< 
<     if (!window || !renderer) {
<         av_log(NULL, AV_LOG_FATAL, "SDL: could not set video mode - exiting\n");
<         do_exit(is);
<     }
---
>     if (!window_title)
>         window_title = input_filename;
>     SDL_SetWindowTitle(window, window_title);
> 
>     SDL_SetWindowSize(window, w, h);
>     SDL_SetWindowPosition(window, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED);
>     if (is_full_screen)
>         SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN_DESKTOP);
>     SDL_ShowWindow(window);
1365c1344
<     if (!window)
---
>     if (!is->width)
1853c1832,1833
<     int i;
---
>     int nb_pix_fmts = 0;
>     int i, j;
1855,1856c1835,1843
<     for (i = 0; i < FF_ARRAY_ELEMS(pix_fmts); i++)
<         pix_fmts[i] = sdl_texture_format_map[i].format;
---
>     for (i = 0; i < renderer_info.num_texture_formats; i++) {
>         for (j = 0; j < FF_ARRAY_ELEMS(sdl_texture_format_map) - 1; j++) {
>             if (renderer_info.texture_formats[i] == sdl_texture_format_map[j].texture_fmt) {
>                 pix_fmts[nb_pix_fmts++] = sdl_texture_format_map[j].format;
>                 break;
>             }
>         }
>     }
>     pix_fmts[nb_pix_fmts] = AV_PIX_FMT_NONE;
2468c2455
<                 SDL_MixAudio(stream, (uint8_t *)is->audio_buf + is->audio_buf_index, len1, is->audio_volume);
---
>                 SDL_MixAudioFormat(stream, (uint8_t *)is->audio_buf + is->audio_buf_index, AUDIO_S16SYS, len1, is->audio_volume);
2513c2500
<     while (SDL_OpenAudio(&wanted_spec, &spec) < 0) {
---
>     while (!(audio_dev = SDL_OpenAudioDevice(NULL, 0, &wanted_spec, &spec, SDL_AUDIO_ALLOW_FREQUENCY_CHANGE | SDL_AUDIO_ALLOW_CHANNELS_CHANGE))) {
2683c2670
<         SDL_PauseAudio(0);
---
>         SDL_PauseAudioDevice(audio_dev, 0);
3752a3740,3764
> 
>     if (!display_disable) {
>         int flags = SDL_WINDOW_HIDDEN;
>         if (borderless)
>             flags |= SDL_WINDOW_BORDERLESS;
>         else
>             flags |= SDL_WINDOW_RESIZABLE;
>         window = SDL_CreateWindow(program_name, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, default_width, default_height, flags);
>         SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
>         if (window) {
>             renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
>             if (!renderer) {
>                 av_log(NULL, AV_LOG_WARNING, "Failed to initialize a hardware accelerated renderer: %s\n", SDL_GetError());
>                 renderer = SDL_CreateRenderer(window, -1, 0);
>             }
>             if (renderer) {
>                 if (!SDL_GetRendererInfo(renderer, &renderer_info))
>                     av_log(NULL, AV_LOG_VERBOSE, "Initialized %s renderer.\n", renderer_info.name);
>             }
>         }
>         if (!window || !renderer || !renderer_info.num_texture_formats) {
>             av_log(NULL, AV_LOG_FATAL, "Failed to create window or renderer: %s", SDL_GetError());
>             do_exit(NULL);
>         }
>     }
diff -r android/contrib/ffmpeg-x86/fftools/ffserver.c /tmp/ffmpeg-x86/fftools/ffserver.c
479c479
<     char *slash;
---
>     char *dirname, *prog;
498,505c498,504
<     slash = strrchr(my_program_name, '/');
<     if (!slash) {
<         pathname = av_mallocz(sizeof("ffmpeg"));
<     } else {
<         pathname = av_mallocz(slash - my_program_name + sizeof("ffmpeg"));
<         if (pathname != NULL) {
<             memcpy(pathname, my_program_name, slash - my_program_name);
<         }
---
>    /* use "ffmpeg" in the path of current program. Ignore user provided path */
>     prog = av_strdup(my_program_name);
>     if (prog) {
>         dirname = av_dirname(prog);
>         pathname = *dirname ? av_asprintf("%s/%s", dirname, "ffmpeg")
>                             : av_asprintf("ffmpeg");
>         av_free(prog);
507c506
<     if (!pathname) {
---
>     if (!prog || !pathname) {
511,513d509
<    /* use "ffmpeg" in the path of current program. Ignore user provided path */
< 
<     strcat(pathname, "ffmpeg");
diff -r android/contrib/ffmpeg-x86/.git/config /tmp/ffmpeg-x86/.git/config
7c7
< 	url = git@gitee.com:zhouweiguo2020/bilibili_ffmpeg.git
---
> 	url = git@gitee.com:zhouweiguo2020/FFmpeg.git
11a12,14
> [branch "release/3.4"]
> 	remote = origin
> 	merge = refs/heads/release/3.4
diff -r android/contrib/ffmpeg-x86/.git/HEAD /tmp/ffmpeg-x86/.git/HEAD
1c1
< ref: refs/heads/ijkplayer
---
> ref: refs/heads/release/3.4
Binary files android/contrib/ffmpeg-x86/.git/index and /tmp/ffmpeg-x86/.git/index differ
diff -r android/contrib/ffmpeg-x86/.git/info/refs /tmp/ffmpeg-x86/.git/info/refs
1,30c1,33
< d100dc6c9955af8b7a7a60a37a362a51c819222e	refs/heads/master
< d100dc6c9955af8b7a7a60a37a362a51c819222e	refs/remotes/origin/HEAD
< d31ba044b321f927882d8f0c1420e2fe512a5724	refs/remotes/origin/chromium
< ea1df44dc7049c6a0f47ce6888daed44f755f02e	refs/remotes/origin/develop
< a49ed9e32d5f6aa57f61b804d3c466e5dc29453a	refs/remotes/origin/ff3.0--ijk0.5.0--dev0.4.5--rc11
< 26d81b5703ea3b100d5138c0a6359076de2a1e0d	refs/remotes/origin/ffmpeg
< aeb421d49d365dcb46a02800af99e60ed03cca53	refs/remotes/origin/ijk-r0.0.1-dev
< 4332cff2c6cc49918e1195d0b855f244254e9008	refs/remotes/origin/ijk-r0.0.2-dev
< 1d2255757b12ffcc7e0ef3d8e50a3818b7db1694	refs/remotes/origin/ijk-r0.0.3-dev
< 2ffd408e9291fdfc340b4b89ab51b7ab3b0b5823	refs/remotes/origin/ijk-r0.0.4-dev
< 7bbff483aae11351762696d141d8b54c9ec59850	refs/remotes/origin/ijk-r0.0.5-dev
< 0806753650242623ec95f0e602a466e6054428a7	refs/remotes/origin/ijk-r0.0.6-dev
< 19867946a113b5c541e0b7a51b3db5df66305915	refs/remotes/origin/ijk-r0.1.0-dev
< 8da49c130fc8050cf931c651522511a15b24408e	refs/remotes/origin/ijk-r0.1.2-dev
< 66696b66c09de97955301ea0ad896bcd80957341	refs/remotes/origin/ijk-r0.1.3-dev
< 4d8bd9a9528acba8d4c20848d832ddbb13705b90	refs/remotes/origin/ijk-r0.2.0-dev
< be1311f24c686fef4ebba27b362d5a75a27caa9f	refs/remotes/origin/ijk-r0.2.1-dev
< 65c3ab457f0bee64466a7560a7d5d26850ed0f29	refs/remotes/origin/ijk-r0.2.2-dev
< efc9856eb94458644b3407eef3a548da6358bd43	refs/remotes/origin/ijk-r0.2.3-dev
< 250af29be195be3239b4a92a22c0e8e106797da8	refs/remotes/origin/ijk-r0.2.4-dev
< d8f1ec9f4e339f8f473220480b664ffaf3e3f2e1	refs/remotes/origin/ijk-r0.2.4-dev-async-rebase5
< ea2b3498b3a0e639a00091a5b38642c3720e34d6	refs/remotes/origin/ijk-r0.3.3-dev
< b6ec5b1b1c29874cb0e5a558491fae320e10c557	refs/remotes/origin/ijk-r0.4.5-ff3.0-dev
< 30d5036dfbaa7c8df187aa16c2ce59882aeb8b21	refs/remotes/origin/ijk-r0.4.5-ff3.0-dev-getaddrinfo-timeout-rb2
< 17871003bc7c36c16ec9e502e70c4eacebcb26f6	refs/remotes/origin/ijk-r0.6.0-ff3.1-dev
< 9c09fbd8053292267cdc4b542913ceced43ea3a9	refs/remotes/origin/libav
< d100dc6c9955af8b7a7a60a37a362a51c819222e	refs/remotes/origin/master
< c02b64868a6f01f8e54268d6081789928e0d5155	refs/remotes/origin/master-allocated-filename2
< d6dcce358174d2c3c8b62ca34d948e5068b4dd17	refs/tags/Mp4.alpha
< 913e4738d4e593e271df91c227c66d29ae029c02	refs/tags/Mp4.alpha^{}
---
> ab658db4d06fa5a3ef5b218e0b86970738e33016	refs/heads/master
> ab658db4d06fa5a3ef5b218e0b86970738e33016	refs/remotes/origin/HEAD
> ab658db4d06fa5a3ef5b218e0b86970738e33016	refs/remotes/origin/master
> ea4e8e642acc8c192a129470cb58c45beb62940b	refs/remotes/origin/oldabi
> 79bc4798b7bb31d213c0d97ab1c858c6be35113e	refs/remotes/origin/release/0.10
> d3a1bf3579bc270a8a4ecfa8f834d14338a70f3d	refs/remotes/origin/release/0.11
> b256bd3be348fd37108583fdac7db6337994c26d	refs/remotes/origin/release/0.5
> 0a849fe1f2d7b7b5186f8eade6cd000e20d0df4b	refs/remotes/origin/release/0.6
> 9526ad4f25f6f379f520e847f15c1be79a149d2f	refs/remotes/origin/release/0.7
> a064b4eb1297a9bfaff63a35a398d417008a88bf	refs/remotes/origin/release/0.8
> 36a3063aae33988493a6826225b6830600beaacc	refs/remotes/origin/release/0.9
> e8bf189db28300e592ab104bd8c761139aa01f0a	refs/remotes/origin/release/1.0
> 7608871734c8d951f6f1fd80bef54d77714b65a4	refs/remotes/origin/release/1.1
> 17788711ac4390f490d958590e218f45199950c4	refs/remotes/origin/release/1.2
> 72006016ae70ab21dfc39d5e90d55f94182cbb1c	refs/remotes/origin/release/2.0
> a9a5f5b388aaa2f9882a44fddb6f26f2873985e9	refs/remotes/origin/release/2.1
> c7fe604cf1896f7599c23b5707fc577a93c66229	refs/remotes/origin/release/2.2
> 49fb1f66f15ff00c45bb20dfa94c3555503a2605	refs/remotes/origin/release/2.3
> 1cae2f002d4e76a389f41c207b05e9eb9f8b04d3	refs/remotes/origin/release/2.4
> 52a9f668eed6aec35804e362671ba4352a441c3c	refs/remotes/origin/release/2.5
> a3fd8126445ae4de8fbe25aca6530c1487bafe8e	refs/remotes/origin/release/2.6
> 2b6bc8e340ac214971aace12483f4ed460afd36c	refs/remotes/origin/release/2.7
> d5b9ecc2d1ed345282064e41a2d6fbe4fa03bb4e	refs/remotes/origin/release/2.8
> df000208eaa413bd27a0645aa71e3772d018ceba	refs/remotes/origin/release/3.0
> 29584733e6de3e1f901761b19dccddb533461ccb	refs/remotes/origin/release/3.1
> cb456b8fb00e04bedf117cb4b72c87a9c3db5145	refs/remotes/origin/release/3.2
> af8d5aab74c1fac2280e1a0b1e52c09b7e92e8b1	refs/remotes/origin/release/3.3
> 8f5e16b5f129f6d62b5135bd095c41e64998d2ed	refs/remotes/origin/release/3.4
> 0c7dc6105224cd199b8e966bc76aafaeaacb2061	refs/remotes/origin/release/4.0
> d44da66fac3127b655b316711b8f1e57b7ed1acf	refs/remotes/origin/release/4.1
> c9f3835b2b4d2f50a20113caa0a2d23107fe3f89	refs/remotes/origin/release/4.2
> 85713d85a70a534e8906a574c68af37a1f7053d9	refs/remotes/origin/release/4.3
> 49e3dd7709da920ac224aa2f9d48da3ea8897982	refs/remotes/origin/release/4.4
32,272d34
< 41a57affa9f905f65a7fb9093d87424dccbbe7b6	refs/tags/cronet-dev-rb0
< 4d0461e5e94da703dc02dfd8d49a8face7337a45	refs/tags/cronet-dev-rb0^{}
< c5b84bd1456386351dd362219d1a0f263f4b5c44	refs/tags/cronet-dev-rb1
< c79e3f8ab972ba14081dc91d5eb94c6dc65649da	refs/tags/cronet-dev-rb1^{}
< b4b7831ced9cd0951316364f0d62ab6cd5339f4b	refs/tags/cronet-dev-rb2
< 92871e4291697e107f814a998ebf70ce3426e5d7	refs/tags/cronet-dev-rb2^{}
< 178a1f3936ea5c0a5a76c1b7c3be1a0cc6a8b225	refs/tags/cronet-dev-rb3
< 273f74053bd4a46ca8d211d55063c76ae3f6fe31	refs/tags/cronet-dev-rb3^{}
< 2a77c01bf9f5ac9ec2629d8ad93443fe4ae05f28	refs/tags/ff2.8--ijk0.3.3--dev0.3.3--rc1
< a5d86a90526c449bdeb92d4b84f93649d00d863a	refs/tags/ff2.8--ijk0.3.3--dev0.3.3--rc1^{}
< fa1cda4d646c4dbe00700c7a19f3e7abd25a3df5	refs/tags/ff2.8--ijk0.3.3--dev0.3.3--rc2
< 888401a5a5812557f6e6eac63383930f61bc550b	refs/tags/ff2.8--ijk0.3.3--dev0.3.3--rc2^{}
< ab322f2f9012d04f271d77095934eed25d172b27	refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc1
< 25cd5a8965a0ca0fd043e163488c7927b63f4767	refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc1^{}
< a2e2b32a48bb8bbb998a52ba7503b07660aacd27	refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc2
< f6312a2f803435c1ee54fedb0f8a7a7d613c2646	refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc2^{}
< f152c353a77bea663b179bac7cad870ee12de9ea	refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc3
< 4c6aab39d7acfdda42b66d9d7839dbdf798b791a	refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc3^{}
< bceda9b0c78ee783a2c7b6396796cb4faa5fbd12	refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc4
< 09bf393f9f1106efb67361de2fb3bfa9494dfe47	refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc4^{}
< 4ec9daf7182e0f0ba3cd2bd8ca204e02afa839e3	refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc5
< fe795db8b88948fb318696091f10c71b586c5571	refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc5^{}
< c20a45f508a67dc6fa9f1fa3ddab12383d148197	refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc6
< e3f2528c0eeca687252b4898a574cdfeb1c46b3b	refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc6^{}
< 39b4a2ba4edc66814e722284ffea8cef661b17af	refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc7
< 70fae437f7e3e58d7f7a9dc1906da96cdd3eeca8	refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc7^{}
< 4087158db5e513d68c8a5ea66effd6a27035ca2a	refs/tags/ff2.8--ijk0.4.5.1--dev0.3.3--rc8
< b51fa00670f8f4c07b2c2bcf8f490ae869f2c2e8	refs/tags/ff2.8--ijk0.4.5.1--dev0.3.3--rc8^{}
< 01d2fdb8a2e95f495e252c1e441a2746d6938e87	refs/tags/ff2.8--ijk0.4.5.1--dev0.3.3--rc9
< ea2b3498b3a0e639a00091a5b38642c3720e34d6	refs/tags/ff2.8--ijk0.4.5.1--dev0.3.3--rc9^{}
< d5be9e1785663897ccabfeda746f0e25ff884874	refs/tags/ff3.0--ijk0.4.5.1--dev0.4.5--rc10
< 1d6ab4265036841a346cafbb46d416f3bd21e0be	refs/tags/ff3.0--ijk0.5.0--dev0.4.5--rc11
< b6ec5b1b1c29874cb0e5a558491fae320e10c557	refs/tags/ff3.0--ijk0.5.0--dev0.4.5--rc11^{}
< 957b417940edd7af1938426f8f0e50ce51849842	refs/tags/ff3.1--ijk0.6.0--20160627--001
< 29f8f2dbf4e5eb64c50175a7b86b12cfec5ae339	refs/tags/ff3.1--ijk0.6.0--20160627--001^{}
< 5c4b2a9fb101e24cb81c857ab161ba3cc6137f27	refs/tags/ff3.1--ijk0.6.0--20160715--001
< 25110b4e9b2e8bd190ba2b3068db9bb8e80c44ce	refs/tags/ff3.1--ijk0.6.0--20160715--001^{}
< 17871003bc7c36c16ec9e502e70c4eacebcb26f6	refs/tags/ff3.1--ijk0.6.0--20160718--001
< 20f5740c431e856fc47775cbae6845f7b923758c	refs/tags/ff3.1--ijk0.6.0--20160811--001
< e0a6ae63fa3d6f31986d0d8d5ec197ad75178cfc	refs/tags/ff3.1--ijk0.6.0--20160811--001^{}
< 8be446701a6d119b56b5610499fda55ab3a79d5a	refs/tags/ff3.1--ijk0.6.1--20160811--002
< 45fbf75a92b763720636bdbc357d08729d6e19d6	refs/tags/ff3.1--ijk0.6.1--20160811--002^{}
< 98248d1dd6d1f0ac3cce0883b667b92bf280ba80	refs/tags/ff3.1--ijk0.6.1--20160824--001
< dd851ed5932f8a1ca28075f1d2dc2591f0b1a055	refs/tags/ff3.1--ijk0.6.2--20160926--001
< 622e4e460380e20de590bbf6cae03fd2c19ffd8c	refs/tags/ff3.1--zaku0.0.0--20160701--001
< 29f8f2dbf4e5eb64c50175a7b86b12cfec5ae339	refs/tags/ff3.1--zaku0.0.0--20160701--001^{}
< 5b97f9a8a5a673be3a15960a1f8655950f9520f1	refs/tags/ff3.2--ijk0.7.0--20161102--001
< 7d5f3fada66bd2b77ff12b80b2acf56951bb4922	refs/tags/ff3.2--ijk0.7.2-20161107--001
< 7d5f3fada66bd2b77ff12b80b2acf56951bb4922	refs/tags/ff3.2--ijk0.7.4--20161116--001
< d1fab012e14a93366592e0971a4ae49916d354c3	refs/tags/ff3.2--ijk0.7.5--20161205--001
< bfe5b3eafc2065e96c0c3a001f4bbe0cb8205aa2	refs/tags/ff3.2--ijk0.7.6--20170203--001
< 681b854a5bebda9557845116fde9ffa3e2d7fd50	refs/tags/ff3.2--ijk0.7.6--20170301--001
< 0854d8e8b929bb19d5d7a84a7c5085139018c326	refs/tags/ff3.2--ijk0.7.6--20170301--001^{}
< 283a1af5a6b9115cdf986189c5ed0bb04a8309dc	refs/tags/ff3.2--ijk0.7.6--20170324--001
< ce854514294c4206d0aeac291dc19f6b81840839	refs/tags/ff3.2--ijk0.7.6--20170324--001^{}
< fee3fd9a9eaa29e6b0f235802fcb9ca1f384aa16	refs/tags/ff3.2--private-fix-pipe-seek
< 3e30ea77e138ac43e3eed732ea2ddf64c69f3e4a	refs/tags/ff3.2--private-fix-pipe-seek^{}
< 2cabdec12b1334cdc31b3d6e340553a3c387e332	refs/tags/ff3.3--ijk0.8.0--20170420--001
< 002e2b0f4bee8900f7dc66084ed623293c332c30	refs/tags/ff3.3--ijk0.8.0--20170420--001^{}
< 6898b0f52d2b825bc1523fd8822f89d0ec0ac349	refs/tags/ff3.3--ijk0.8.0--20170426--001
< 0f75c5593f0b97f8b84a9aafd2fc1e4a6d07621d	refs/tags/ff3.3--ijk0.8.0--20170426--001^{}
< 011eb85c4a9b92b6d1eabb276916dec4d5975f90	refs/tags/ff3.3--ijk0.8.0--20170427--001
< 7df54dc17684948e1a517bbb2777595ebe22e544	refs/tags/ff3.3--ijk0.8.0--20170427--001^{}
< 91c58500b15d31498fab8725f8d9f8a58114a43b	refs/tags/ff3.3--ijk0.8.0--20170512--001
< 7fc360cb42587faebb68d48180782e246ed24265	refs/tags/ff3.3--ijk0.8.0--20170512--001^{}
< c84c3ecb42cb6f1d05b5de527fc32d8f27768812	refs/tags/ff3.3--ijk0.8.0--20170518--001
< 3fbc116a1caf9030200d92bd9475672bdcfc4255	refs/tags/ff3.3--ijk0.8.0--20170518--001^{}
< b317f9274f270684c70cfe4d418e3d8e59cdedbf	refs/tags/ff3.3--ijk0.8.0--20170607--001
< e18d0f20a75be0973df9a379d746a858ccaa2a98	refs/tags/ff3.3--ijk0.8.0--20170607--001^{}
< b5349267c75921ccfb30a0c50e87819701a1b4e8	refs/tags/ff3.3--ijk0.8.0--20170615--001
< bf7f19e467ded23b5429a0c6df3133cf3168d552	refs/tags/ff3.3--ijk0.8.0--20170615--001^{}
< a6af0452b143ef280ef9729c204a7f0fb0a68999	refs/tags/ff3.3--ijk0.8.0--20170623--001
< cd655d0df2f7ad3ef76cc2c8c55297af169cb254	refs/tags/ff3.3--ijk0.8.0--20170623--001^{}
< 9a981d481642bbb495b8ad809b3a7a7c0a878404	refs/tags/ff3.3--ijk0.8.0--20170626--001
< a05e4af54922e9438e6e9c0c77cf81717771247f	refs/tags/ff3.3--ijk0.8.0--20170626--001^{}
< bd09a15c83e05e35a0e3d5b413bc41e8a5714715	refs/tags/ff3.3--ijk0.8.0--20170704--001
< fd852a913f04a8b9c2338dcf7451a4114db855a5	refs/tags/ff3.3--ijk0.8.0--20170704--001^{}
< 7a11a02db7e69b9324015b557ace747920d01b38	refs/tags/ff3.3--ijk0.8.0--20170707--001
< 5bdecd52b31df9c20e71181faf2e2e56f8a861b3	refs/tags/ff3.3--ijk0.8.0--20170707--001^{}
< a01121273d9a8e4cd9bc41ca18d6f46dddc6972d	refs/tags/ff3.3--ijk0.8.0--20170710--001
< 7aafcda44d91234ce35f66cfc49cb8961e59d6e5	refs/tags/ff3.3--ijk0.8.0--20170710--001^{}
< 1ad98fe1599d4fcc0785ce0da5268dbd0737d557	refs/tags/ff3.3--ijk0.8.0--20170811--001
< bfbf4cbc72d2b84b5a2c2f7120f100c84ce41b9f	refs/tags/ff3.3--ijk0.8.0--20170811--001^{}
< 9d251bd91e74fa8469b42210fe21fde802a79cec	refs/tags/ff3.3--ijk0.8.0--20170829--001
< 3e7320e81a2ed1e9dd9a16e2d0b76461148289b9	refs/tags/ff3.3--ijk0.8.0--20170829--001^{}
< 9eaf12871b3418db2a52a82f640ac31d98c5e2f9	refs/tags/ff3.3--ijk0.8.0--20171219--001
< 5b5c1092116c7f2c5be669a3355033080b0fe9d6	refs/tags/ff3.3--ijk0.8.0--20171219--001^{}
< e4b083aa51735c3835f1382c09b3671116c14b4d	refs/tags/ff3.3--ijk0.8.0--20171222--001
< ecc6a5c2d119441f94e39024329c97fa588368ec	refs/tags/ff3.3--ijk0.8.0--20171222--001^{}
< ed5af17561e5ec73f612f214a9d2d7610ab913d5	refs/tags/ff3.4--git--ijk0.8.7--20200911--001
< 50aabff7e59fe8dfb7fe2420767606475775879b	refs/tags/ff3.4--ijk0.8.7--20171211--001
< 231ccbcf2c05812b20805c3a1bdb1cfae6ce4ffe	refs/tags/ff3.4--ijk0.8.7--20171211--001^{}
< d05c7566c2250b6b4574cd087d64efef366d4393	refs/tags/ff3.4--ijk0.8.7--20180102--001
< 78e652ed171bd25f2004cc2e994412fe26ce28bd	refs/tags/ff3.4--ijk0.8.7--20180102--001^{}
< b26eaa6d8cd0493f3bec47e3bcd40712397afbc8	refs/tags/ff3.4--ijk0.8.7--20180103--001
< 2902e33f6e59ed77ddc1b372586c1ab8db1fb096	refs/tags/ff3.4--ijk0.8.7--20180103--001^{}
< f0dcee53be3e48e72f59128f2a8b7489f64220f9	refs/tags/ff3.4--ijk0.8.7--20180301--001
< bdc143ee30270ca604f43b8a1f8119b4e5bdaa62	refs/tags/ff3.4--ijk0.8.7--20180301--001^{}
< 210475d947133b8ff21006d0bf3b5a8c584f1a99	refs/tags/ff3.4--ijk0.8.7--20180305--001
< 8a960c6fa57db8c20346e76596c715d0c9dde699	refs/tags/ff3.4--ijk0.8.7--20180305--001^{}
< c6c7d02232538af90420f4c75a6563f0b098a5f2	refs/tags/ff3.4--ijk0.8.7--20180320--001
< 1bd4ca3ecf343edbeaf017d4a07bad0eaf8d00da	refs/tags/ff3.4--ijk0.8.7--20180320--001^{}
< 65cf7923bebd26cf2020523bf3f12ba138360f71	refs/tags/ff3.4--ijk0.8.7--20180322--001
< 2258bda902701b26a9df0aee199344f560519666	refs/tags/ff3.4--ijk0.8.7--20180322--001^{}
< f875c66eed78063d9c4c6da3403e54c66ad9d48f	refs/tags/ff3.4--ijk0.8.7--20180404--001
< 33faea2fe84b8cf6077afed3b0e85d6f7ac71ed1	refs/tags/ff3.4--ijk0.8.7--20180404--001^{}
< 27cfc0f0a1afa096b0bf41630f42265fcdadd9dc	refs/tags/ff3.4--ijk0.8.7--20180428--001
< 0016bf68fca3efc426655a54cc965639685c8432	refs/tags/ff3.4--ijk0.8.7--20180428--001^{}
< 12ee124bf7a3a170ca77b2c65ecccf3a14bdcf34	refs/tags/ff3.4--ijk0.8.7--20180607--001
< 11071ca02457a692a4dfc237d8f77420c7cf3141	refs/tags/ff3.4--ijk0.8.7--20180607--001^{}
< 551df4e07f75580919c859e5fb47c1d6bb3aba17	refs/tags/ff3.4--ijk0.8.7--20180612--001
< 24d6572af9acac230e1deff527fa295729ef5fd2	refs/tags/ff3.4--ijk0.8.7--20180612--001^{}
< f886615aaba147aeaeb69bc199766cf52f980713	refs/tags/ff4.0--git--ijk0.8.8--20210205--001
< 13e3c15a9d80c5d1759fd2788d174d68dcf491d8	refs/tags/ff4.0--ijk0.8.20--20180626--001
< 5fe6d47527c870d40a433a47615380f697491af2	refs/tags/ff4.0--ijk0.8.20--20180626--001^{}
< 8e14249d32bc0c5b90e18d9c1490d397b201179d	refs/tags/ff4.0--ijk0.8.20--20180704--001
< f8cc8cc78e584b154beaded7fd6c82b466c0245c	refs/tags/ff4.0--ijk0.8.20--20180704--001^{}
< cb04da468429307a6e7be77f1341c4eda9f4fcdc	refs/tags/ff4.0--ijk0.8.23--20180712--001
< 473754ba2a69c59bd150d12b92318d5b5d7a704a	refs/tags/ff4.0--ijk0.8.23--20180712--001^{}
< f59ce1918e2673591b27ee7af2d06e9a01b98e33	refs/tags/ff4.0--ijk0.8.23--20180720--001
< d1f095c2e43c19a4caa7bb68f62d271c90190637	refs/tags/ff4.0--ijk0.8.23--20180720--001^{}
< 5879e9daf99ce54dd7432a12bae3ef11fcb195b8	refs/tags/ff4.0--ijk0.8.25--20180127--001
< 152d7bfef087cf0f5fca1fd45e773a7263abc31e	refs/tags/ff4.0--ijk0.8.25--20180127--001^{}
< 512724f6778dba3634f809e520d3727f8f6d96b5	refs/tags/ff4.0--ijk0.8.25--20180128--001
< e810539da5742d627d7c1e09d171a2c137f708f1	refs/tags/ff4.0--ijk0.8.25--20180128--001^{}
< d7fbf1475daaad0f0b65d403c355c353aa687913	refs/tags/ff4.0--ijk0.8.25--20180129--001
< f7eec6aa1a12426dc4e28794a53f06964da9413c	refs/tags/ff4.0--ijk0.8.25--20180129--001^{}
< f729b8c3df5ece485a18f48ac57a51bc165a3f6b	refs/tags/ff4.0--ijk0.8.25--20180130--001
< 029d275eecb911fcf3ecc3ca2ea32793d57c82d2	refs/tags/ff4.0--ijk0.8.25--20180130--001^{}
< dd7504cfa63817403b0bb6aeee1ef3f21c44d64b	refs/tags/ff4.0--ijk0.8.25--20180721--001
< 2441c00f6504eab5442350479bfef2f27134539f	refs/tags/ff4.0--ijk0.8.25--20180721--001^{}
< 84d88b050bfdffee22ba33fab8173fb06faab262	refs/tags/ff4.0--ijk0.8.25--20180722--001
< 802637211158b7072770c6944835676bac983f03	refs/tags/ff4.0--ijk0.8.25--20180722--001^{}
< 87944e2bd994f1ca2e78832c2160365f312088ed	refs/tags/ff4.0--ijk0.8.25--20180724--001
< e18bb7824e7f2b478e9535624d976abf97ec5871	refs/tags/ff4.0--ijk0.8.25--20180724--001^{}
< 62118a18d5f3170913a45153b2dbdde9d16360de	refs/tags/ff4.0--ijk0.8.25--20180801--001
< 1d3074233d33ae56920d2662bad38af655307eef	refs/tags/ff4.0--ijk0.8.25--20180801--001^{}
< 996a668ca8bd206e7cd2a334ac4fdbf971e0663a	refs/tags/ff4.0--ijk0.8.25--20180807--001
< 520553d5613b728be271444703387fe7f9e84254	refs/tags/ff4.0--ijk0.8.25--20180807--001^{}
< 032c1ec8f8ada23ceb93c7d754041c588f7684e9	refs/tags/ff4.0--ijk0.8.25--20180816-001
< 10a66bb39d538c1029a6e96bb0b63273337b0993	refs/tags/ff4.0--ijk0.8.25--20180817--001
< ecaa972322ce7953df5c42cc8c07bd6880c69420	refs/tags/ff4.0--ijk0.8.25--20180817--001^{}
< 9d3b74a6a32708d2f8721e5761bd957bb77c59e9	refs/tags/ff4.0--ijk0.8.25--20180817-001
< ecaa972322ce7953df5c42cc8c07bd6880c69420	refs/tags/ff4.0--ijk0.8.25--20180817-001^{}
< 7ca41c2cea85feeb6beccda63198bfabf265413b	refs/tags/ff4.0--ijk0.8.25--20180819--001
< 66d12622dfb76129093094f5d9c182035d0d568b	refs/tags/ff4.0--ijk0.8.25--20180819--001^{}
< 23274d4d78d7d21182354e917cbea6539ff20e3d	refs/tags/ff4.0--ijk0.8.25--20180820--001
< 3b6df976364377916107664642e179ded8420f15	refs/tags/ff4.0--ijk0.8.25--20180820--001^{}
< bd902eb2473e06c41e8d7c5f2a1f525bd9f304cc	refs/tags/ff4.0--ijk0.8.25--20180821--001
< 5814639bc0b0193cf7db3209a597a13843816db7	refs/tags/ff4.0--ijk0.8.25--20180821--001^{}
< 4f24dea9666bca6f64150e4b58313900ba865544	refs/tags/ff4.0--ijk0.8.25--20180823--001
< b72f8e49f73ed11e4c4ee7e0a9515e8ceee51e92	refs/tags/ff4.0--ijk0.8.25--20180823--001^{}
< 0a1887937b0bdcf5f04d4d3e9d3a737b20c05bcd	refs/tags/ff4.0--ijk0.8.25--20180824--001
< 13f501febf22cac5170b7479a806734ab2cd7899	refs/tags/ff4.0--ijk0.8.25--20180824--001^{}
< 8605dc00e623d49afc5ba3e3f43fd1a0a7d7e3a2	refs/tags/ff4.0--ijk0.8.25--20180904--001
< 3b4512c183df34263a91c60dc9ea34ad735a0e02	refs/tags/ff4.0--ijk0.8.25--20180904--001^{}
< f1335ad321ba1c4c3ecf0a74f83b13362c72f48b	refs/tags/ff4.0--ijk0.8.25--20180907--001
< 19a91e0109a7bc0d178436f9316e230f4de58b0a	refs/tags/ff4.0--ijk0.8.25--20180907--001^{}
< 05a3ffd40a8d18a1bdfd637fc3029d651ce7e645	refs/tags/ff4.0--ijk0.8.25--20180911--001
< 8e0547f681d3603cf3c010a3500d8d3773958d7c	refs/tags/ff4.0--ijk0.8.25--20180911--001^{}
< 442f01f839dcd040b2af921957707cffedaa9e5e	refs/tags/ff4.0--ijk0.8.25--20180920--001
< 5a7fa8076d113c9ebc890a22b7954ded464807d0	refs/tags/ff4.0--ijk0.8.25--20180926--001
< 5227926549bd4aa8bc9c68780ae1093fe97a5838	refs/tags/ff4.0--ijk0.8.25--20180926--001^{}
< 2cf79106af0d459b3fc2a000f0beab53cd04ce55	refs/tags/ff4.0--ijk0.8.25--20181030--001
< a694df4430b9da0b8fd7538b752eba8543048a14	refs/tags/ff4.0--ijk0.8.25--20181101--001
< ecbc6ae0029f186e84b21187c05e3c5e3c8c8bac	refs/tags/ff4.0--ijk0.8.25--20181114--001
< 9df167e4184e76adb05021510b422e138c24b96e	refs/tags/ff4.0--ijk0.8.25--20181114--001^{}
< 0876ba5f8eea77c9dc6f79b5665c98a22307930f	refs/tags/ff4.0--ijk0.8.25--20181123--001
< 8fefddd64448777c619c0cf363c5786cbf30fba7	refs/tags/ff4.0--ijk0.8.25--20181123--001^{}
< 9d495b792b5b734436d19b61b3f949439f05ad45	refs/tags/ff4.0--ijk0.8.25--20190104--001
< 51f32183b65938254d005d6110b26dff3bd400ee	refs/tags/ff4.0--ijk0.8.25--20190129--001
< 029d275eecb911fcf3ecc3ca2ea32793d57c82d2	refs/tags/ff4.0--ijk0.8.25--20190129--001^{}
< a2ef70fb6c224d2bfce94048dce21cf8e010e2c7	refs/tags/ff4.0--ijk0.8.25--20190130--001
< fc3ff9c6beb9005dd89db16f854f1c0dda814244	refs/tags/ff4.0--ijk0.8.25--20190130--001^{}
< 797f76c42b9d15dff7a517c9c8c392557bb05ecd	refs/tags/ff4.0--ijk0.8.25--20190305--001
< dffa7925706dba2bc3be95f3f071e0cbd85e2e50	refs/tags/ff4.0--ijk0.8.25--20190305--001^{}
< 13a43aab866c792e51ae9bb2403157aa8a1de6c7	refs/tags/ff4.0--ijk0.8.25--20190325--001
< 22977c0a60b7dad97802f1a5a481b77b50446afa	refs/tags/ff4.0--ijk0.8.25--20190325--001^{}
< 9755afe1ab7bf0f67ec6a7a99d7b6cad8faefa4b	refs/tags/ff4.0--ijk0.8.25--20190410--001
< 2f9a0940b5f2db2cbf188d4c25cdae44fa5ea7ec	refs/tags/ff4.0--ijk0.8.25--20190429--001
< 41ebd6f935ad46496f01b61277431d92c5ed273d	refs/tags/ff4.0--ijk0.8.25--20190528--001
< f75929d56bdc7fd289eac635d8db4f8a2dfb1dcd	refs/tags/ff4.0--ijk0.8.25--20190528--001^{}
< d02ecb94208963d025b7f64d1dacd9eda667a6e7	refs/tags/ff4.0--ijk0.8.25--20190529--001
< f602b20be4f05fe02cd693e6bf053a4f8f3166ff	refs/tags/ff4.0--ijk0.8.25--20190529--001^{}
< aaa25991c4b5412580289e4a88d81bd27bda26d3	refs/tags/ff4.0--ijk0.8.25--20190531--001
< 9ada4e0d90c9334b165a64c327ce4d58deb13a6f	refs/tags/ff4.0--ijk0.8.25--20190531--001^{}
< eb55ede1689be59b7917c738797e60ebf71172c3	refs/tags/ff4.0--ijk0.8.25--20190610--001
< f8661ec7440aada7ec14c0cc7fca8051d52d11db	refs/tags/ff4.0--ijk0.8.25--20190610--001^{}
< 2bc01fbee8ecb21f72e34bbe21752c6a0b01b48a	refs/tags/ff4.0--ijk0.8.25--20190614--001
< 93f83adee73fda5336fde1be528b63260651e7c8	refs/tags/ff4.0--ijk0.8.25--20190614--001^{}
< 942a2890a9c86ce69e69f84a6346b8b8b2d19ec5	refs/tags/ff4.0--ijk0.8.25--20190615--001
< 82b98c937396d34f6dc947f3209d1f91f098ff5d	refs/tags/ff4.0--ijk0.8.25--20190615--001^{}
< 89779933a761116a595be67ae55e24a666ccc25d	refs/tags/ff4.0--ijk0.8.25--20190618--001
< c7dfeb38f26601a859afa80ae0c2428c3dda0d14	refs/tags/ff4.0--ijk0.8.25--20190618--001^{}
< 980912bcba42b36ed892f283f509df9f962dce40	refs/tags/ff4.0--ijk0.8.25--20190703--001
< 1bf6d7d679163988b9eb09263046b3df73c4af14	refs/tags/ff4.0--ijk0.8.25--20190703--001^{}
< 6617864ed4a3440c45578b3b25bedf19f70a96d9	refs/tags/ff4.0--ijk0.8.25--20190704--001
< b6b511edae84b446f6c3d46da34b0b5477746e9d	refs/tags/ff4.0--ijk0.8.25--20190704--001^{}
< 48559541223b48ff94b0932558050888b54f2118	refs/tags/ff4.0--ijk0.8.25--20190705--001
< a58177e537e72aa534be2e2d8f91fdc06a4c12c5	refs/tags/ff4.0--ijk0.8.25--20190711--001
< d75838992e1645b8cc2d9aa439b618d799693a35	refs/tags/ff4.0--ijk0.8.25--20190711--001^{}
< b06a9d2ada097183eb885491d67e0db0eca4ba7c	refs/tags/ff4.0--ijk0.8.25--20190829--002
< ce0abc2959c1b762d9e6596ab78338470d5975c8	refs/tags/ff4.0--ijk0.8.25--20190906--001
< 1199b95b51d19945f6093423b5b37034ff820d82	refs/tags/ff4.0--ijk0.8.25--20190906--001^{}
< 1199b95b51d19945f6093423b5b37034ff820d82	refs/tags/ff4.0--ijk0.8.25--20190906-001
< ad5e0bd8b7e7be32d470362efdab864902824ee4	refs/tags/ff4.0--ijk0.8.25--20190929--001
< db24275b267997549c7009a592161b5938577691	refs/tags/ff4.0--ijk0.8.25--20190929--001^{}
< 042246e5423429d55fde123b8d8809653d811a9a	refs/tags/ff4.0--ijk0.8.25--20190929-001
< db24275b267997549c7009a592161b5938577691	refs/tags/ff4.0--ijk0.8.25--20190929-001^{}
< 0ba828a5ca3412e1f7db9a7a4278abb012b5fd69	refs/tags/ff4.0--ijk0.8.25--20191018--001
< 0cec4ce92c1336d417678b9f7a69fa4de9039c3a	refs/tags/ff4.0--ijk0.8.25--20191018--001^{}
< c0272e0beec3f5cca63a5547dcf03e6430dce1cf	refs/tags/ff4.0--ijk0.8.25--20191023--001
< 4c5991c69b7b73a8c6cdca1b1123bb0f8781de7f	refs/tags/ff4.0--ijk0.8.25--20191023--001^{}
< 0e21146005037baa79798ebf3128ff8f062b2b1a	refs/tags/ff4.0--ijk0.8.25--20191024--001
< 7274d77bd95e4dbcb3ff41d6c8a4ae0b72c0ce2f	refs/tags/ff4.0--ijk0.8.25--20191031--001
< 5ae8dcce8e4e3163eea16a857a89c2af3793ab67	refs/tags/ff4.0--ijk0.8.25--20191125--001
< 6ecb10c515f60e8dc0d85741611450562a1b061d	refs/tags/ff4.0--ijk0.8.25--20191125--001^{}
< 8d3fb77a2fa58be81fb8cb49a73947e41751aa4d	refs/tags/ff4.0--ijk0.8.25--20191205--001
< 8860107939b88983f420cdcf935c16557e0747cc	refs/tags/ff4.0--ijk0.8.25--20191205--001^{}
< 0a34b8820d74c5605b2d6a14a9121f0be94f1e98	refs/tags/ff4.0--ijk0.8.25--20191217--001
< 7c7ec318af292749f20833a70fc6f799e3eb44a3	refs/tags/ff4.0--ijk0.8.25--20191217--001^{}
< c72b9240d3e1ac6f862c1bd358e539c17ae494b8	refs/tags/ff4.0--ijk0.8.25--20191218--001
< 1cf38dd8eada14b16cc012d013f7e359b53cee85	refs/tags/ff4.0--ijk0.8.25--20191218--001^{}
< 6407c212f68d0f70a91e8ab9e8685b7c5b1c1f05	refs/tags/ff4.0--ijk0.8.25--20191225--001
< 6ce84a965b07dc727472799708f0fe625b1b496c	refs/tags/ff4.0--ijk0.8.25--20191225--001^{}
< 474eaa2edd292d6640ffd3cf83268116b3c410d7	refs/tags/ff4.0--ijk0.8.25--20191228--001
< 328e26e7024f52c2d0f76001cee24c3d99fad92d	refs/tags/ff4.0--ijk0.8.25--20191228--001^{}
< 3434cbfbb2390f26543f1dd8f8529061913f74c3	refs/tags/ff4.0--ijk0.8.25--20191229--001
< e88d564e458f35d4f79acae2c63c73c7119eefa9	refs/tags/ff4.0--ijk0.8.25--20191229--001^{}
< 41958296f0ca8c09989a701a8df9abb96d670df6	refs/tags/ff4.0--ijk0.8.25--20191230--001
< 8e56bf0fbced9c4f2acfbeb64c5b8351d3c9e624	refs/tags/ff4.0--ijk0.8.25--20191230--001^{}
< 39a60a1a846d65bb142c5b55f8146be6c4c70131	refs/tags/ff4.0--ijk0.8.25--20191231--001
< cc116330834a592e544d20ea5a4472db7c32abb8	refs/tags/ff4.0--ijk0.8.25--20191231--001^{}
< 621c935cc4aa8234ffaa33aea6b833c965a03ced	refs/tags/ff4.0--ijk0.8.25--20200217--001
< 247c2994c5178983147b16e932e774916d00e8db	refs/tags/ff4.0--ijk0.8.25--20200217--001^{}
< 6f832e2ca430fb61d5ec0b693c8ff4f49e26d415	refs/tags/ff4.0--ijk0.8.25--20200221--001
< ab5142d62b168d4189d36b00f9ef8378968666b8	refs/tags/ff4.0--ijk0.8.8--20201130--001
< 9c891dd716e413a2fb451422a3e9e022d93f6031	refs/tags/ff4.0--ijk0.8.8--20210205--001
< f886615aaba147aeaeb69bc199766cf52f980713	refs/tags/ff4.0--ijk0.8.8--20210205--001^{}
< 6ccd5fa770b20547b5eb463fd98ca8560adfe696	refs/tags/ff4.0--ijk0.8.8--20210426--001
< e88b5afbf9ca543a098ede6dd6765ef0e629836d	refs/tags/ff4.0--ijk0.8.8--20210426--001^{}
275,302d36
< c8bc12cb9ba26160a78edc171b6ca646756a43c0	refs/tags/ijk-multi-io-rb0
< e457eeca391ba93f76f8ff616b772d428c689105	refs/tags/ijk-multi-io-rb0^{}
< f09cc054f8be9845d4ef53901c76f3babcb4d024	refs/tags/ijk-multi-io-rb1
< 2c42340bed9868cdfcdb8a8cdf641c2b67c78675	refs/tags/ijk-multi-io-rb2
< 77e32bbfba6c517850b1c27b9e91df86418248f8	refs/tags/ijk-multi-io-rb3
< 47fc963f5981d8fd00ec51eea410a0fe098aa855	refs/tags/ijk-multi-io-rb3^{}
< cb06509f319d2df452b337a1ebf52d6beb1b2b94	refs/tags/ijk-multi-io-rb5
< 4f31b74ec5121cd55ccb4f02b255c4a0d5e4d77d	refs/tags/ijk-multi-io-rb6
< 2981cbfc5e528d46197ba4029cee74d89fb8bbcf	refs/tags/ijk-multi-io-rb6^{}
< 0855699862b25633432a6d5084b24cf05274a24b	refs/tags/ijk-n0.0.1
< aeb421d49d365dcb46a02800af99e60ed03cca53	refs/tags/ijk-n0.0.1^{}
< 8f13fa0f46d2e2d102a3d3d3ba2af7fd19f169d2	refs/tags/ijk-n0.0.2
< 4332cff2c6cc49918e1195d0b855f244254e9008	refs/tags/ijk-n0.0.2^{}
< 6a6c138ad707a619073b66bf6612aba7a0ad9035	refs/tags/ijk-n0.0.3
< 1d2255757b12ffcc7e0ef3d8e50a3818b7db1694	refs/tags/ijk-n0.0.3^{}
< 0f5a649c0018680e06e9628359c02f990f5c3012	refs/tags/ijk-n0.0.4
< 2ffd408e9291fdfc340b4b89ab51b7ab3b0b5823	refs/tags/ijk-n0.0.4^{}
< 8aceba76417cf8e4647e56e3f182815e3639d5f8	refs/tags/ijk-n0.0.6
< 48173fa1330e49e7c97f8f82479181bc8bd568d8	refs/tags/ijk-n0.0.6^{}
< b749e2313a1425fcfb837339fa8a9b5bdd295ed2	refs/tags/live-test-rb0
< e93c0c93fc2980777dfdc8df72ae823bb60d292b	refs/tags/live-test-rb0^{}
< d42f6de5cb39c2d1fa2d86aaaf3bdd5fab6d35d7	refs/tags/multi-io-vod-rb0
< 6b9c50eea336527ab8f485822db53f16247cac23	refs/tags/multi-io-vod-rb0^{}
< 49e31a145abe5523afe2078cf5404621e873be28	refs/tags/multi-io-vod-rb1
< 99323d8672cf21177c564e6b218f8a9862ca3485	refs/tags/multi-io-vod-rb1^{}
< 23b7be744c46f13af8385c0b36dd9dc04de679d8	refs/tags/multi-io-vod-rb2
< a536603087968094a6f63ced54a2e0187dd90ea7	refs/tags/multi-io-vod-rb2.1
< 23fdc4d4124c45e3a7878b50ea816c06cf11ffa4	refs/tags/multi-io-vod-rb2.1^{}
652a387,388
> 4d62c6ee36f8411cde663df6ead27818b3f85bac	refs/tags/n2.4.14
> 935c93c069d3330ebba46ea05785eef3906b1c7c	refs/tags/n2.4.14^{}
740a477,492
> d11c1564e641721cd0d9e3cb4b577de5c1f97313	refs/tags/n2.8.10
> 16c0d8aa46b6a206d14f1d1010b7487809d54e5f	refs/tags/n2.8.10^{}
> 623e339a2b64267360ad033e1e096dee2167b883	refs/tags/n2.8.11
> 523da8eac176c241881a9177237f8bf60e8d7b75	refs/tags/n2.8.11^{}
> 75d251eb515beac6a7bfbffacbeb3316b8a0a88a	refs/tags/n2.8.12
> ffab459e4e491384756cf8bae0f3922c5e4f6271	refs/tags/n2.8.12^{}
> 305ac17d1b8c0da2bde43b40c5340e4ee7c925bd	refs/tags/n2.8.13
> 7f0359f05e32d435435f36a986885b57a2af11f0	refs/tags/n2.8.13^{}
> 69083be98a03d9620db84aeb29c496d3a4f9510a	refs/tags/n2.8.14
> 3f8a0d5ad1a9ee2d15083f954a75f2aabe987b07	refs/tags/n2.8.14^{}
> 7158ecf7abf6880ad3711e72a635c608461e3ef2	refs/tags/n2.8.15
> 48e104a8240d773f66a62969680a93d3c952e45b	refs/tags/n2.8.15^{}
> a3e7f723500cd9a033a7fd6f13dbde4debe4f20c	refs/tags/n2.8.16
> f93e026b642431e796775345df2483ae283283f2	refs/tags/n2.8.16^{}
> 62afc82a6e0d068e161f4f600eca37cb917137be	refs/tags/n2.8.17
> d5b9ecc2d1ed345282064e41a2d6fbe4fa03bb4e	refs/tags/n2.8.17^{}
752a505,508
> 94823ff628da0048e0294226a85ad3f5cfd099e2	refs/tags/n2.8.8
> d828aabf0343452a76547239832e27045be92549	refs/tags/n2.8.8^{}
> 7d336688c4ec9c9e43c62ad5470b551c450afcc3	refs/tags/n2.8.9
> fb93771072cfcbdd523d9f4bcd7682ee8b7f5578	refs/tags/n2.8.9^{}
758a515,520
> 2cbf356f1208e0d1622f18fa6377d5c97d6c86c6	refs/tags/n3.0.10
> 2bc6b9b2a9c9f22b26ce2207f73f6e7a5aa7c0b9	refs/tags/n3.0.10^{}
> c84fbc3085b6270d485a8d5e76757da2837d05ed	refs/tags/n3.0.11
> b910b34926657531d84269bd7c61fb8c74e5d905	refs/tags/n3.0.11^{}
> 316824e0a7b56f2d52ff6f4681e4bb2aa17ee153	refs/tags/n3.0.12
> 527e64d32c345e2da17ae8afc0f852c3cca28345	refs/tags/n3.0.12^{}
760a523,536
> ceccf3e4465aae89bdde41f2167ba6d28275e77c	refs/tags/n3.0.3
> 3512ed3622e1200f03e0d508b5c1bcbf9f5d2c88	refs/tags/n3.0.3^{}
> 71c0f57d371ddcce22e75e7ff8019d1c2de22438	refs/tags/n3.0.4
> 5771a0c8237d6fb0fb65877126ec0f7842fd2a1e	refs/tags/n3.0.4^{}
> f32f7037c5829ba83fb459eed133091a97c2c125	refs/tags/n3.0.5
> b408dba231091cd7f465ddf8bd8babf5b7efe63a	refs/tags/n3.0.5^{}
> 458ec45ee58bbf247a98027fec204fac4fd1aa82	refs/tags/n3.0.6
> e8b94e5ce48f0dd68287e8b1c2ef4125fabff1d7	refs/tags/n3.0.6^{}
> 364269d7761e5e0de638b635dd899137d30e0cdd	refs/tags/n3.0.7
> c63e58756699d07b5bc69799db388600d3e634bf	refs/tags/n3.0.7^{}
> 32fb3da94a29edd2194381400aaf0890c3580e27	refs/tags/n3.0.8
> b33d01d8a253028083df250b5d4a2e43e5560c64	refs/tags/n3.0.8^{}
> 849fb7e635c23a62d0faf4b0cf02184adee668c4	refs/tags/n3.0.9
> 0df61711cfb974601fbb8ac3d168d1c52c699ac8	refs/tags/n3.0.9^{}
766a543,562
> 94970575ba53043f8b43a6e320c5fe07695da660	refs/tags/n3.1.10
> afa34cb36edca0ff809b7e58474bbce12271ecba	refs/tags/n3.1.10^{}
> 32a434c6d1ddcc69f908cb4ec6ae0b09cff68f26	refs/tags/n3.1.11
> 38c1df15c6a3358a22aaf753320988a95c977ce7	refs/tags/n3.1.11^{}
> 0fd8ce5d6c2514e78dcc756a215d881e004dfb9c	refs/tags/n3.1.2
> 4275b27a230008c41c63397871f173952723e2b2	refs/tags/n3.1.2^{}
> cea4771d742527764f29457c2ad832570d6d122d	refs/tags/n3.1.3
> c46d22a4a58467bdc7885685b06a2114dd181c43	refs/tags/n3.1.3^{}
> edbfba08c07278d1b85390e2120e5bd22826c617	refs/tags/n3.1.4
> c2ea70628215ccede53240843b4514a6c339ab27	refs/tags/n3.1.4^{}
> b1bec5bc55a0243d8b53d15439388e75d930018e	refs/tags/n3.1.5
> 2a5c41e3e4a7e763503af59de903d5649dcc071a	refs/tags/n3.1.5^{}
> 8eed99c64750b367fa8ac041dadfde40b322ab7e	refs/tags/n3.1.6
> e08b1cf2df8cfdb3394aa5ab0320739f8b5a1c4f	refs/tags/n3.1.6^{}
> 80f47f4c1740ec1d6cd39840f1121ef10707dfdd	refs/tags/n3.1.7
> 384d90f26800521440a1d64d7c6967e9b552a690	refs/tags/n3.1.7^{}
> 2df89ab0a0740b0afb21d231649b68da1be8bb48	refs/tags/n3.1.8
> 9b9a620ce6983ea56a0b94501e4661d2ccf916d8	refs/tags/n3.1.8^{}
> 71cd66c2d924e4ba5f8719d00df40819f8fa4ae0	refs/tags/n3.1.9
> a2d9595a4b4e0e6fe85683ff79774fd618b282cc	refs/tags/n3.1.9^{}
770a567,596
> cfff8a663c2746f6aae3e102e562dcb46280381d	refs/tags/n3.2.1
> c269c43a83166003ab6649263bc60634a6b7866f	refs/tags/n3.2.1^{}
> 6a368b7f72289118c1d79665f0f8f7f6b2c399a4	refs/tags/n3.2.10
> 028a032a315a0d8b6f9344f461dade47d5536e89	refs/tags/n3.2.10^{}
> 8fb3702a3747a3c2a45813847c5e067cd03e0c42	refs/tags/n3.2.11
> 97321ae36056e2360e1c5a43cbdeef164fe34922	refs/tags/n3.2.11^{}
> 23aa3e29d192d87313692bf6222cf9c6cb9eaa0f	refs/tags/n3.2.12
> a911f234e26e488198dff8aec8a5ff3c2e052cc4	refs/tags/n3.2.12^{}
> c4f4c13a4fc87b19c323271a88c87c15c13e84af	refs/tags/n3.2.13
> a97ea53ad96e9c39f7e698c314610ced6e2361e9	refs/tags/n3.2.13^{}
> e0d996e733bcc3dff7a4aaae9a3c9b8969ce8bd6	refs/tags/n3.2.14
> ba11e4028cfc5d40f49f26a44473a4f70d67c85d	refs/tags/n3.2.14^{}
> 591e4c8c43639b4830498332f7d6c47b33e2bd27	refs/tags/n3.2.15
> 37a8ad9a3167923d500910031a8086489c004d83	refs/tags/n3.2.15^{}
> 7facc70ee9483ca49d0dd114f387716cd46cefd5	refs/tags/n3.2.2
> 148c4fb8d203fdef8589ccef56a995724938918b	refs/tags/n3.2.2^{}
> b4c2500cd2c92e9c1cf2fac293723bf11c696e0d	refs/tags/n3.2.3
> 68ed682710f1cb1f4fdd1fd0447f402d6feabd01	refs/tags/n3.2.3^{}
> d8d7ad6587bd9133fceb00ed2ce080e4d7beb9d7	refs/tags/n3.2.4
> d4b731e271ba944ade8f6a128271479529507de9	refs/tags/n3.2.4^{}
> 96ba08becca2a1d88b61e2de87722ab0c75f4dd6	refs/tags/n3.2.5
> 5d737a3d0ca2bf0f0c6170096d9d1ca230cf9ee0	refs/tags/n3.2.5^{}
> 52e413e272a0a3e35d361448b60bc00438ac0758	refs/tags/n3.2.6
> 431ccd3f55eae8732fe901622660c52fc712cc25	refs/tags/n3.2.6^{}
> 1d0faec761fa71da2b8a6f922588638d01a3f2b1	refs/tags/n3.2.7
> 66395ac32bfbc6e22da7176700479ef5543e493f	refs/tags/n3.2.7^{}
> fd28307ed1b3d1b8eb51ba70a8da68759df91b4a	refs/tags/n3.2.8
> 98f8f5b12f2a6e0b9e27b8e0a04f5be694aa5367	refs/tags/n3.2.8^{}
> 3edbffaf1b55e10dfd3de7d7983e57669c6c0a82	refs/tags/n3.2.9
> 4b1e87dc32b7d20a61b3faac38cd18bc40029096	refs/tags/n3.2.9^{}
773,794c599,696
< 9bd5dec378f33dd371d1bd434df7f806a1020714	refs/tags/private-ff3.3-2017-0517-001
< 631a266393d5df25417cb3598a4ba4dae2f48c0f	refs/tags/private-ff3.3-2017-0517-001^{}
< f022a288bd3f5a6b528f660a71821c813da16c5f	refs/tags/private-ff3.3-2017-0629-test-fps
< 616f3576aa6c9d390c32cf788e82b09123726607	refs/tags/private-ff3.3-2017-0629-test-fps^{}
< 3ccb6ead75c8a1c0b8c867c0337fe43bc1f258c0	refs/tags/quic-rb0
< f0e438acbbe57cb3b673eb632460deffa88f2d0b	refs/tags/quic-rb0^{}
< 1b423f19b809fec7b0cecb051a4543f8fb7f42f8	refs/tags/quic-rb1
< b1de9f78af85071af514f002852d7fb5b8a8eecb	refs/tags/quic-rb1^{}
< 68f55dcae362b28c38acdab4ccc34b50eedda278	refs/tags/quic-rb2
< b24482c759da91b2dc2a5e2ec7be17dc1e3baac5	refs/tags/quic-rb2^{}
< 26acb270f00583eac8b99545987b6cc0779e2de1	refs/tags/quick-mp4-rb0
< 94e50a1bee2efa905bcf0186e54bdbd3a9ec6f7a	refs/tags/quick-mp4-rb0^{}
< 8b393bf99c95b290705847d2797aac0f75d6d8f4	refs/tags/quick-mp4-rb1
< 2c261387f18a70e5211afe7e6fff47f53d041693	refs/tags/quick-mp4-rb1^{}
< 0301952094e9fc560ba5ae2c5277ab58eb878e7a	refs/tags/quick-mp4-rb2
< f247c49ac4c443350f8e5238a3e4765362fcea9d	refs/tags/quick-mp4-rb2^{}
< 3ceeb6455e7cdd3da83d2bcc09df1df96adafad1	refs/tags/quick-mp4-rb3
< 47325fec2bcc05c5731a72a9a34fb7a15d71162e	refs/tags/quick-mp4-rb3^{}
< a0767e97dbd5f745ee36b57b43ddac2b7b877d76	refs/tags/quick-mp4-rb4
< ac11ae569f61e769b693ea6879faaf12f17c7283	refs/tags/quick-mp4-rb4^{}
< 96e4eeff53f50e662b2b79ce35279bc74a752f7f	refs/tags/skip-frame-dev0
< 89dbef2b0b485c728cd17fa4312a1ef4ca52b504	refs/tags/skip-frame-dev0^{}
---
> 77b292a4a080250d1a94b9b7be46af488642eb96	refs/tags/n3.3-dev
> efa89a841941bf61d1a3eb5c2900f98e3e7db85b	refs/tags/n3.3-dev^{}
> 13b6312f19ba78ec07c6d85e7ff63602e7cca0b1	refs/tags/n3.3.1
> c1c50650df6cef69c392ad0d544c30e571e24214	refs/tags/n3.3.1^{}
> 5a153f0df6b10f8b6cd35d89059334b17c1c08bb	refs/tags/n3.3.2
> 6d7192bcb7bbab17dc194e8dbb56c208bced0a92	refs/tags/n3.3.2^{}
> 771274876a5726f11bac5ae55de94d041cadf4c9	refs/tags/n3.3.3
> 9079c70d2095643af6954001d0627445650b85a6	refs/tags/n3.3.3^{}
> 3405500541cbca2a2f16031f483c875f61856344	refs/tags/n3.3.4
> e3a1c0491fa2beb6562f9960e9cb3af673f3bf94	refs/tags/n3.3.4^{}
> 8d8aa2563ce778c04ae963854d4b1b0416cda2d6	refs/tags/n3.3.5
> 670d3189e9ef674e4167cec3145ea4c4c172d581	refs/tags/n3.3.5^{}
> e27f87ecb5d996351c1275f59743cdba498225df	refs/tags/n3.3.6
> 03292829aa2e7a7db36de490c6cc19a4792ab3cc	refs/tags/n3.3.6^{}
> 1b9d66881599f203e2cff5e03a9cd77e5a14240a	refs/tags/n3.3.7
> 93e2cb4511417d265f3644c122167678fe4d3161	refs/tags/n3.3.7^{}
> 8d4bd95f939061335f2ee7fd4f5e0cdb872b6126	refs/tags/n3.3.8
> 18c9d5d3e80dc0b47e0a260b51f5230bdd499e8b	refs/tags/n3.3.8^{}
> cc75da0e05c3981062b2e90a9ea9c609651df39b	refs/tags/n3.3.9
> 9cba90e5ef03f741074d45e3e68741d26c6c1741	refs/tags/n3.3.9^{}
> 3a44fe99b874b0d2f1c6b6def88efd02acbb80e2	refs/tags/n3.4
> 01e291a592452f27b3a4e811536aaaf94096e244	refs/tags/n3.4^{}
> e91193625abccb62cc13c7712fddef50bed84a38	refs/tags/n3.4-dev
> 22b0daa1b3f0ac5d91cc1a057d230995590847cd	refs/tags/n3.4-dev^{}
> 15b0c14e114cf95e7217517414b49f81256578e4	refs/tags/n3.4.1
> bc839fb39dc376d462856863de2933f0b6b0351a	refs/tags/n3.4.1^{}
> 72cc23520e308c66cffe869b138c0e3ce90664fc	refs/tags/n3.4.2
> 6a97ba521558ce131fe839eed2d51ff745280e1d	refs/tags/n3.4.2^{}
> fc5ed4a2023d99d7351818f110a4b1316128baba	refs/tags/n3.4.3
> 89355585366b16238244decae40fbe0cc7ae3e40	refs/tags/n3.4.3^{}
> 9f23f2ff3b40a5b7b7e176f3f586e72b89b4b60f	refs/tags/n3.4.4
> 8df2c7dde6af3e748447ac313947388e6887178a	refs/tags/n3.4.4^{}
> d58b709fe92daf594b912776aabdf9390f405609	refs/tags/n3.4.5
> cb74b3ff27d510c62b6a78fef5a416674bbb4e51	refs/tags/n3.4.5^{}
> 5ee0b839747dbe2a869a7724e268a4ba00f04da5	refs/tags/n3.4.6
> 0ac9001ab9f2bdd7c4306afd1a91d6c78b294d9f	refs/tags/n3.4.6^{}
> 88d338e325fa50e274d6cb9131e2cc97c15e65dc	refs/tags/n3.4.7
> 289a79d545e83a97f5cdd00b28ce70638dae53e8	refs/tags/n3.4.7^{}
> 7acacc49dee9c2a0a16f978204b2e4a5a43eba86	refs/tags/n3.4.8
> 567c20f78109588620c57696ab39ff314fe12d6c	refs/tags/n3.4.8^{}
> 576bcde90928e5d05b3dd24e35e66e65d61f7a6f	refs/tags/n3.5-dev
> 80154b1b3a0a9e83a9cbaff8b922440f60998128	refs/tags/n3.5-dev^{}
> 65470fb9bde98a5e7674d1b9751c8c1bef190595	refs/tags/n4.0
> ace829cb45cff530b8a0aed6adf18f329d7a98f6	refs/tags/n4.0^{}
> 67acfdb363a4bfce9146dfcde85dcdae3bd35213	refs/tags/n4.0.1
> e049f7c24fc6aa5fc925f860e2ad940a75cfd84f	refs/tags/n4.0.1^{}
> fb012fd6a887085be657782b5c000769eebb5c69	refs/tags/n4.0.2
> 0a155c57bd8eb92ccaf7f5857dc6ab276d235846	refs/tags/n4.0.2^{}
> fb28a711f9d5091ce79971f505ad2979f9e0ce02	refs/tags/n4.0.3
> fcbd117df3077bad495e99e20f01cf93737bce76	refs/tags/n4.0.3^{}
> aedb6250eafa141cd4823788f7381f33b2ff4da7	refs/tags/n4.0.4
> ee66e04bc9dbbcf95114a103f174ed54b2260758	refs/tags/n4.0.4^{}
> 90c221eb7328bc3e588352b754ddd270ab1ae4ad	refs/tags/n4.0.5
> 26e1d0d015bb11ab0383729c52cfca4fd9cf4e79	refs/tags/n4.0.5^{}
> a2e996c6aecefdb741649de265d0178e4ae6b90f	refs/tags/n4.0.6
> fd5ae2ab7a2c8c74e2f40d20a21ee2b49d42c330	refs/tags/n4.0.6^{}
> 085d7707e7dd817e3a859adb5457db757669597a	refs/tags/n4.1
> 10506de9ad1fb050737ef79cf4853742b793c37d	refs/tags/n4.1^{}
> 30dc841c864b7521b85323d44f79784e9af5b239	refs/tags/n4.1-dev
> 3c1ecb057d7621e57968624aa15ad3e9efc819f7	refs/tags/n4.1-dev^{}
> e12a576c7059b9adf1f564b77bc44df64852fc05	refs/tags/n4.1.1
> 74700e50bf7444930bfc12935bd3e17cd5f766c1	refs/tags/n4.1.1^{}
> 7a0c0740f8fa1fbc25d058e338fc879261b36f7e	refs/tags/n4.1.2
> a7cb7a2e4314956e06a351333ff8096fab9afa7f	refs/tags/n4.1.2^{}
> 460cfebb0760b978df9a6bc02b7b0c6842799f9b	refs/tags/n4.1.3
> 4154f8967820ca734a77ce91bb590cd77649dee8	refs/tags/n4.1.3^{}
> 8eece4338540f09698b5f99b97f7818e68753e07	refs/tags/n4.1.4
> 9d06c1f95ebe4f9c2cc05d041dbfd3de52d2518a	refs/tags/n4.1.4^{}
> e0027ff1ce3c87b97875d2e142946db34d5cc2ab	refs/tags/n4.1.5
> 4521700f295f35da4768f88b570e0836a858ce7b	refs/tags/n4.1.5^{}
> d95ff17343f6cd7a0b1f9a0f46fe37e7a2661309	refs/tags/n4.1.6
> 918a41d40e8459aee8c415d2f8692bb8a54dfef0	refs/tags/n4.1.6^{}
> 7a1d6630586096e28341277e3c91641c56852a74	refs/tags/n4.2
> 75384bc464411fb2291105dca84b8bc411188350	refs/tags/n4.2^{}
> 562ae4d1d500bb9baa7db82f74e87cedb3594dcc	refs/tags/n4.2-dev
> 517573a67088b5c7a25c18373434e3448892ee93	refs/tags/n4.2-dev^{}
> cbb3c9497549f8856d8cd37ac63af1406a784e58	refs/tags/n4.2.1
> 1529dfb73a5157dcb8762051ec4c8d8341762478	refs/tags/n4.2.1^{}
> b53940e13dde81d721621b4d5296eede5795aadd	refs/tags/n4.2.2
> 192d1d34eb3668fa27f433e96036340e1e5077a0	refs/tags/n4.2.2^{}
> fbb22323bb550cbe1701e5d30efa045d954efc86	refs/tags/n4.2.3
> d3b963cc41824a3c5b2758ac896fb23e20a87875	refs/tags/n4.2.3^{}
> 7e04a97fdb8cc511cfa11e6215200097a78328bf	refs/tags/n4.2.4
> f9f95ceebfbd7b7f43c1b7ad34e25d366e6e2d2b	refs/tags/n4.2.4^{}
> 7ab7d42cc98bcf0c5cda3f99eb35e20be1890646	refs/tags/n4.3
> 8e12af29d1a3f95c9e952d78354e3c8b1c0431a8	refs/tags/n4.3^{}
> 921ce97010cd286a2ddbe97f01298090a9daa167	refs/tags/n4.3-dev
> 80bb65fafab1d2f5f58a8453c6334c784ee27c08	refs/tags/n4.3-dev^{}
> a3a26a98652fbdaa474e95cfbc12f68b64ca1e6f	refs/tags/n4.3.1
> 6b6b9e593dd4d3aaf75f48d40a13ef03bdef9fdb	refs/tags/n4.3.1^{}
> c872040562ef2988b107a01921dcc20c18b2deef	refs/tags/n4.3.2
> f719f869907764e6412a6af6e178c46e5f915d25	refs/tags/n4.3.2^{}
> 09c358362008e2d04cec8239526c6827543da4cf	refs/tags/n4.4
> dc91b913b6260e85e1304c74ff7bb3c22a8c9fb1	refs/tags/n4.4^{}
> 3199f588025134303a296b7e358785cec36e60f2	refs/tags/n4.4-dev
> c5079bf3bccd24bf8ed45ff47ff4071fd09e9fd8	refs/tags/n4.4-dev^{}
> 3187c3628c0c05e2e02968c2ac1449e15f0fad3e	refs/tags/n4.5-dev
> c361fa9e215cf21fb0e5b3395d675aec3d216719	refs/tags/n4.5-dev^{}
799,800d700
< cc6e11fdb3ba971dee8085cc76f7fff7098849eb	refs/tags/v0.5.10
< deb650c692317ccc3e5359f5b100c98dc88c514f	refs/tags/v0.5.10^{}
805,815d704
< 52ee20f2aa2936e0fb0a90e81c39135a8f2394e9	refs/tags/v0.5.4
< 8c147e21b660c17a38c340989818e232a6a40457	refs/tags/v0.5.5
< d6bf79993fe67021584263f87b8a41f9edcec579	refs/tags/v0.5.5^{}
< d4ea4fa9638da1b39e59d0d5d1f0bc6696b3810a	refs/tags/v0.5.6
< d0688fdd3101d900a3e3aac4e36bf7ef1eae01ad	refs/tags/v0.5.6^{}
< 1f0adc05a69e375107583278ba3dd3c9e496901c	refs/tags/v0.5.7
< 15df4428d264287ec1577f92296b178f86cbe14d	refs/tags/v0.5.7^{}
< 3884f82b141bc0804d56a73dd7a5c1e1ca729050	refs/tags/v0.5.8
< 4b2e02a4c4a618ac6d03fd38eb7ab0bc09596667	refs/tags/v0.5.8^{}
< 1da91b5a176f693b04e2e95fc8de3885cbe99fac	refs/tags/v0.5.9
< 6ec1d3b3bafa59363763631a8e090b2e12f6ef33	refs/tags/v0.5.9^{}
820,969d708
< b0f8fdc411c6380ca9279c8660915f35f5df1a3c	refs/tags/v0.6.2
< c9e03639bf8aaafdfb7a58bc7dba8c461d28fd5f	refs/tags/v0.6.3
< 973d752dfbfb3286c6494f99744f386b98fda4d7	refs/tags/v0.6.3^{}
< 60080570a617722be950bddc39bc02799ecbc85d	refs/tags/v0.6.4
< 6b156c45638ceb2e076586b7efeb4cf9e04e0a84	refs/tags/v0.6.4^{}
< f82ba40a5e252b06a183208a4b176c120b35f334	refs/tags/v0.6.5
< 62c473934822afd317dfef27754a0ff71f58ce2a	refs/tags/v0.6.5^{}
< 0ce5d1593ac4af5414b68ffe98627f2d63654e3c	refs/tags/v0.6.6
< 64eb6892ec839fb11f5b62db38810efb638ba806	refs/tags/v0.6.6^{}
< ee2ed99deb38a16e3053a995576c217617cfe745	refs/tags/v0.7
< dea22a1a912d5e6214db5c6a4addbc7b26881817	refs/tags/v0.7^{}
< 42d6399ef3bbb450e84840689ff9832a1c655cdc	refs/tags/v0.7.1
< c02b02d725153e4f5b612d2af256024cf1bb9bd9	refs/tags/v0.7.1^{}
< 00ed7694444697b33e35d5e55ba85b339cce2438	refs/tags/v0.7.2
< 58decdb639e8582063807b5ddfb86dada6731f74	refs/tags/v0.7.2^{}
< d5f37c0e7818989120e0ef1798507dddf22f501b	refs/tags/v0.7.3
< d61b38b9db9bdc5e98f529c043767f8fd5369859	refs/tags/v0.7.3^{}
< 1593e23479c5f424d53d0e28e2f3b65c0611f8b1	refs/tags/v0.7.4
< d4653e882fee5a2876c3878bc23d26799e3380ad	refs/tags/v0.7.4^{}
< fbbd9c7b51f41747646e73293ddf61b56818c78e	refs/tags/v0.7.5
< 808686375d1c80b0eb1b12a78838a3ba010fce69	refs/tags/v0.7.5^{}
< 956c29752704faf61ecb35aaef66ee6746fd24d2	refs/tags/v0.7.6
< b61e311b0eeabaab8eb05f4e5e5c6c8c9d84f3cf	refs/tags/v0.7.6^{}
< dfd1b8f1030ecfb09c1c2a8851b573d9ff66381f	refs/tags/v0.7.7
< db5b454c3d20f0e2e7fff8f0091e776ae9757725	refs/tags/v0.7.7^{}
< d11818eff42681eec9b8106e317a95766506821a	refs/tags/v0.7b1
< 5e8361ec5036c758421c5012a0cff10444ee02a7	refs/tags/v0.7b2
< ced9556b6189de67dd740f5231c6f1807f3e3704	refs/tags/v0.7b2^{}
< 92688e3e73cecc7e1759c12b323ea192cf8b1537	refs/tags/v0.7rc1
< 0af8a71d66305874bd6f0ebc84ebf99339b6a5d3	refs/tags/v0.7rc1^{}
< c2ffd5881a9d1d3225a733f4db13251ea9779b37	refs/tags/v0.8
< 4b63cc18bc44517f0f9e04b39ab873cbc3c6aee5	refs/tags/v0.8^{}
< 06539019c85c7acfa1387be52424a75ba74a719d	refs/tags/v0.8.1
< 5effcfa76792470677a1f6bc9aa73347a87ef720	refs/tags/v0.8.1^{}
< f071753f86ac5e886f514fea00b1854d60ee0ce8	refs/tags/v0.8.10
< 5522c564d48e1bb07d8cb722e8f94575a2683e29	refs/tags/v0.8.10^{}
< 6627cabfc93c7806b2fd5a1cf223567b5390c8ed	refs/tags/v0.8.11
< aedf1a2996e70d322220d2704d5a615c4f7b1b23	refs/tags/v0.8.11^{}
< c2d403f08f960f733ce6b3723df50c96466213a1	refs/tags/v0.8.12
< 9552b37e2604552d5ff210175d6baf28ccc2bb80	refs/tags/v0.8.12^{}
< 31b5a0c889ccff2f1c2385b3b6cda0079b4fed0e	refs/tags/v0.8.13
< e122fb594a5feb6729cce86a70aafd93d10202d8	refs/tags/v0.8.13^{}
< ff60b617bfa2a8d3e89e5e98267c5280b1f77ee6	refs/tags/v0.8.14
< 042c25f54bd25b52d2936b822be026450971a82d	refs/tags/v0.8.14^{}
< 0943a3caf2f0490421b31537e96daacf76c4b811	refs/tags/v0.8.15
< 5a2d1913a96bb0e029b424a4dd5b414cfb91c708	refs/tags/v0.8.15^{}
< 9785411413e45aba47fa451250abd287441a3f0e	refs/tags/v0.8.16
< c6af9e944ebeb336f6520f59afaebb62392fb026	refs/tags/v0.8.16^{}
< 6902d0e99617c9b9652529886c39ff875bb69e72	refs/tags/v0.8.2
< 43e5fda45cf540a052d6f78248a3bf99f87095a8	refs/tags/v0.8.2^{}
< c0163b1129032c20f51734f557a4f201e1cc7514	refs/tags/v0.8.3
< ce39a84a7d760965972781df61a88e5f432b978a	refs/tags/v0.8.3^{}
< 891116d68418552bb95afe3856b42f21c2da68d7	refs/tags/v0.8.4
< 2c8ce46250ff78191fe6565876ddc4bc03fdf519	refs/tags/v0.8.4^{}
< a49fada5020601a16008141afdf0cb45fda24ad8	refs/tags/v0.8.5
< cf2cab5b2ab80fa2914692e02fa3488aaab7697e	refs/tags/v0.8.5^{}
< da7ebb065524929ae1c2e74fdf0f4fa99124d9df	refs/tags/v0.8.6
< b385a772180963813a23baf9a80713a12c86cb7c	refs/tags/v0.8.6^{}
< 9fca65a8ffc21e102c49ebd88ce3f1ac1dae82fe	refs/tags/v0.8.7
< e6617580e3f2abb9171e2103b452da7a3971d74a	refs/tags/v0.8.7^{}
< 9fba5746ba243d9680a6a463b923f7e141e3b30d	refs/tags/v0.8.8
< 8c62082b5127011db0c251f6a48b2872af8c3bc6	refs/tags/v0.8.8^{}
< fac1b305b8d23c67514f925fbf4f6011c48daf05	refs/tags/v0.8.9
< ae9652605a9a3328d3f992925a37bde037dff2ee	refs/tags/v0.8.9^{}
< 715c5b3a46109fd9ae656f63ba29db33ec1e0d20	refs/tags/v0.8b1
< f486fb338e36e674c2b72fc7c859967538cf1b47	refs/tags/v0.8b1^{}
< 03d0e62df1e52d27674539fa6364e2e06b9a09ac	refs/tags/v0.8b2
< cf53a2127b4e5a34d1f839cea22bb0b3f0c55704	refs/tags/v0.8b2^{}
< 4a3159cb88de53f16c396d73d5c191f044c68c01	refs/tags/v10
< f25e6e0c255a6d81971fe66f6c32d29be0706f3d	refs/tags/v10^{}
< 31bd3b3decd7ca73195fdd48912acf5f69f251f3	refs/tags/v10.1
< e780c3daafe0588e035e752c771ebfcd2201746a	refs/tags/v10.1^{}
< c542079956b4570875ab466e2bc80f6351d33839	refs/tags/v10.2
< 40dd29653ab85812d21fa64e9a665ceb316701ad	refs/tags/v10.2^{}
< e0cfeead1a3b0df898270944cd43daf1fd21bce5	refs/tags/v10.3
< 07015d9f913d63bdc4495e75f4603c586553796e	refs/tags/v10.3^{}
< b47f729192b0f2d578d01114f9a565b9023ddbcb	refs/tags/v10.4
< ee9e966296d74ca3836be5b5adc839cfc73d8c98	refs/tags/v10.4^{}
< b91386d844087708e1a43873282a46550e85fcdd	refs/tags/v10.5
< d0af7d5745f3e228293633faa9e57994f3308c31	refs/tags/v10.5^{}
< 1ae05d8a0bba7fe2e833a279e60c9c4117b1858a	refs/tags/v10_alpha1
< fe533ffdcffadb3e55f07d0caf316bc6bfe82049	refs/tags/v10_alpha1^{}
< 7bae6f5b4d5023ecde030d759038fa25bd8c4059	refs/tags/v10_alpha2
< 210881110d3e22cca36edeaca118b5e22c998266	refs/tags/v10_alpha2^{}
< cda15090ffbb390e281fb0f016fd199d08530565	refs/tags/v10_beta1
< 614b9e4db8f3d7c23fc0410fc04745a727a82f4e	refs/tags/v10_beta1^{}
< d20fb9d1aa10295fd9ce7b97669b42fe2609dc9d	refs/tags/v10_beta2
< 2b9ee7d5b901e0d7ba617511e4ed31d3043894d3	refs/tags/v10_beta2^{}
< 68810a51c767d36723720ac3820ab71b6a98aab2	refs/tags/v11
< f851477889ae48e2f17073cf7486e1d5561b7ae4	refs/tags/v11^{}
< cd976837b41823302293cd134802e137ea5f531f	refs/tags/v11.1
< 1cc6fef0671c5522c952671ee06bf973135a22c4	refs/tags/v11.1^{}
< dffb1113486356d304b5cfaf374e27844bc9a7c8	refs/tags/v11_alpha1
< fb1ddcdc8f51b9d261ae8e9c26b91e81f7b6bf45	refs/tags/v11_alpha1^{}
< cf59fccb3480bbc7a618adb3d8060e76b3b3a555	refs/tags/v11_alpha2
< e8049af1325dd59a51546c15b2e71a0f578e9d27	refs/tags/v11_alpha2^{}
< 4f5e06989fce758cd1e3104060da0d6e8d8e7d31	refs/tags/v11_beta1
< 369380e1c4c6fc9b0d9ff04ec23d46b252ba7110	refs/tags/v11_beta1^{}
< 41014378061807c0d09f7e91b9491112921fc352	refs/tags/v11_dev0
< 4d7ab5cfebef91820af2933ef2f622ea598e6b53	refs/tags/v11_dev0^{}
< 54303997082460d085803b46db7e0ba7e5b2048b	refs/tags/v12_dev0
< 11cd727fbd603197cb1e49654fce3352d56f8fd8	refs/tags/v12_dev0^{}
< 5b4b6a731f8d6183b70c70553f7f6f17a00e92cc	refs/tags/v9
< f73f76fd202b310e8e1d0215b2e0cf038cd18c4a	refs/tags/v9^{}
< 2982dcff5424c15e9c2ac43371ca9c10b88373d3	refs/tags/v9.1
< 0135dd73bb23060b896b06f2ecbb05435224f492	refs/tags/v9.1^{}
< 3c464e6fd24201b61746f25b153f7272f8dcbcb8	refs/tags/v9.10
< bb81b2b2e06abbf713094f8b77b4cbd550c02503	refs/tags/v9.10^{}
< ab327ee8dd147612fe46b5c40494be43ba0e540e	refs/tags/v9.11
< 27f60e2b0b419066619c738b3c9b9376a83ed4b1	refs/tags/v9.11^{}
< a3196bc1f5d688698f5ad76b05e52c6fc5ea7869	refs/tags/v9.12
< f1a2364cebe472a98a5ea157071f4eee4429ce9f	refs/tags/v9.12^{}
< 693a9a9629b81fc170676dbe027836e7b478a848	refs/tags/v9.13
< 2340ce6954db2c0a79c57fcba7f45e2fcc20cdc9	refs/tags/v9.13^{}
< 8c4c4051baef34032afe2a1959c59d4811e02026	refs/tags/v9.14
< 3ecbd911ff9177097820e5d00401c9bf29e5d167	refs/tags/v9.14^{}
< 6dd2d7fcf3ed680ce0d5f14f6500f5b0d29d323c	refs/tags/v9.15
< 8da037af332790c704de6127406d5f6b3734acf0	refs/tags/v9.15^{}
< 4f9adf54ccb2b58ce153ca740645d44bdc00db26	refs/tags/v9.15.1
< e86074e6ef23f14273cbf4af84c8d2491f744a79	refs/tags/v9.15.1^{}
< f49cf94cd1a65397efe5f3868f860efdfe7230a3	refs/tags/v9.16
< bd41211395fd1f968e9f3a4746daffebea60f41e	refs/tags/v9.16^{}
< 19a6b4fe540898965507c79a04b9b1398e7b4043	refs/tags/v9.17
< 606bbd50b1ebaa3c040fc7cab84f1d8bb5d3d248	refs/tags/v9.17^{}
< 49c2b278efc1d76623fb09cae9ab28393e27efaa	refs/tags/v9.2
< a991c0673f71199df363df05d2c8c83e17e80dfd	refs/tags/v9.2^{}
< 52d43a48b2482e000b92bda8889e8eb5bc6c87a4	refs/tags/v9.3
< a3b3096772c65899d7ca43a913051420d706c88a	refs/tags/v9.3^{}
< 879e5c04482e1e6ac2983e35f1c26b6133fdf96e	refs/tags/v9.4
< 2dfe3a7b4dda1ff94b31aaf1dd50f208b63dc301	refs/tags/v9.4^{}
< 959291e84381ad59f4cb775fce39404b53e2a6fc	refs/tags/v9.5
< 6cad940989d321034e5dcabc5bd9a27f46bb0725	refs/tags/v9.5^{}
< 2a64f034c4196a311febc272b3f562b7b2f84bb8	refs/tags/v9.6
< 82c3792a308469351f0a3df20b539a9b7e6641a3	refs/tags/v9.6^{}
< f7d99f0a224d49f17c7e548cca4db6eddae02c3d	refs/tags/v9.7
< 5d2e4c918f35b247fb5a19b74d84de52cbc34e2c	refs/tags/v9.7^{}
< bf47a91fe3911a7573ccbb70edd8ce5d80984841	refs/tags/v9.8
< 9aaca159bd220582c698f13d081a455f398c9975	refs/tags/v9.8^{}
< e852bc1f429247da724f45e6aebe314b7506092e	refs/tags/v9.9
< 4d073ddac95d789f23c3ee6f7b5348599b39f047	refs/tags/v9.9^{}
< 2a90a5ad49ac52da9163a56a580f066a946102a6	refs/tags/v9_beta1
< e578f8f4680f7ad290de64270dc152fb1adb6e6a	refs/tags/v9_beta1^{}
< e788ec5d59c91eeadd5637023aefd065d6309322	refs/tags/v9_beta2
< a9f0dce283f8ab2e70814244175253620a57eb56	refs/tags/v9_beta2^{}
< 3ca9e82ec5d1f6f3b261187353dbec7e66e9fe31	refs/tags/v9_beta3
< 9378be9f3252bfa6970405c235c776df3f75533a	refs/tags/v9_beta3^{}
< ecac19afb22cafa6044b8f624d93364a77b09b61	refs/tags/wk-v2.2
< e6021ac00ede78a06c532e6a19b15450fd505558	refs/tags/wk-v2.2^{}
< 2ad99f1cd7e0e012040b98f85e47708772a5998c	refs/tags/wk-v2.2a
< 5c0c95fefc7f0434c0153da531fb81bd8e8c5f2d	refs/tags/wk-v2.2a^{}
diff -r android/contrib/ffmpeg-x86/.git/logs/HEAD /tmp/ffmpeg-x86/.git/logs/HEAD
1,2c1,2
< 0000000000000000000000000000000000000000 d100dc6c9955af8b7a7a60a37a362a51c819222e zhou.weiguo <zhouwg2000@gmail.com> 1621492991 +0800	clone: from git@gitee.com:zhouweiguo2020/bilibili_ffmpeg.git
< d100dc6c9955af8b7a7a60a37a362a51c819222e 2902e33f6e59ed77ddc1b372586c1ab8db1fb096 zhou.weiguo <zhouwg2000@gmail.com> 1621492999 +0800	checkout: moving from master to ijkplayer
---
> 0000000000000000000000000000000000000000 ab658db4d06fa5a3ef5b218e0b86970738e33016 zhou.weiguo <zhouwg2000@gmail.com> 1621491265 +0800	clone: from git@gitee.com:zhouweiguo2020/FFmpeg.git
> ab658db4d06fa5a3ef5b218e0b86970738e33016 8f5e16b5f129f6d62b5135bd095c41e64998d2ed zhou.weiguo <zhouwg2000@gmail.com> 1621491275 +0800	checkout: moving from master to release/3.4
Only in android/contrib/ffmpeg-x86/.git/logs/refs/heads: ijkplayer
diff -r android/contrib/ffmpeg-x86/.git/logs/refs/heads/master /tmp/ffmpeg-x86/.git/logs/refs/heads/master
1c1
< 0000000000000000000000000000000000000000 d100dc6c9955af8b7a7a60a37a362a51c819222e zhou.weiguo <zhouwg2000@gmail.com> 1621492991 +0800	clone: from git@gitee.com:zhouweiguo2020/bilibili_ffmpeg.git
---
> 0000000000000000000000000000000000000000 ab658db4d06fa5a3ef5b218e0b86970738e33016 zhou.weiguo <zhouwg2000@gmail.com> 1621491265 +0800	clone: from git@gitee.com:zhouweiguo2020/FFmpeg.git
Only in /tmp/ffmpeg-x86/.git/logs/refs/heads: release
diff -r android/contrib/ffmpeg-x86/.git/logs/refs/remotes/origin/HEAD /tmp/ffmpeg-x86/.git/logs/refs/remotes/origin/HEAD
1c1
< 0000000000000000000000000000000000000000 d100dc6c9955af8b7a7a60a37a362a51c819222e zhou.weiguo <zhouwg2000@gmail.com> 1621492991 +0800	clone: from git@gitee.com:zhouweiguo2020/bilibili_ffmpeg.git
---
> 0000000000000000000000000000000000000000 ab658db4d06fa5a3ef5b218e0b86970738e33016 zhou.weiguo <zhouwg2000@gmail.com> 1621491265 +0800	clone: from git@gitee.com:zhouweiguo2020/FFmpeg.git
diff -r android/contrib/ffmpeg-x86/.git/objects/info/packs /tmp/ffmpeg-x86/.git/objects/info/packs
1c1,2
< P pack-ce256d1928c8b3eca9a017ae9b90b687340926ca.pack
---
> P pack-ec1e12957cb0d7c29a488075c31c3cf96523a167.pack
> P pack-539ab8df98232ee69db50ebf23ca7a8ea062c254.pack
Only in /tmp/ffmpeg-x86/.git/objects/pack: pack-539ab8df98232ee69db50ebf23ca7a8ea062c254.idx
Only in /tmp/ffmpeg-x86/.git/objects/pack: pack-539ab8df98232ee69db50ebf23ca7a8ea062c254.pack
Only in android/contrib/ffmpeg-x86/.git/objects/pack: pack-ce256d1928c8b3eca9a017ae9b90b687340926ca.idx
Only in android/contrib/ffmpeg-x86/.git/objects/pack: pack-ce256d1928c8b3eca9a017ae9b90b687340926ca.pack
Only in /tmp/ffmpeg-x86/.git/objects/pack: pack-ec1e12957cb0d7c29a488075c31c3cf96523a167.idx
Only in /tmp/ffmpeg-x86/.git/objects/pack: pack-ec1e12957cb0d7c29a488075c31c3cf96523a167.pack
diff -r android/contrib/ffmpeg-x86/.git/packed-refs /tmp/ffmpeg-x86/.git/packed-refs
2,29c2,32
< d31ba044b321f927882d8f0c1420e2fe512a5724 refs/remotes/origin/chromium
< ea1df44dc7049c6a0f47ce6888daed44f755f02e refs/remotes/origin/develop
< a49ed9e32d5f6aa57f61b804d3c466e5dc29453a refs/remotes/origin/ff3.0--ijk0.5.0--dev0.4.5--rc11
< 26d81b5703ea3b100d5138c0a6359076de2a1e0d refs/remotes/origin/ffmpeg
< aeb421d49d365dcb46a02800af99e60ed03cca53 refs/remotes/origin/ijk-r0.0.1-dev
< 4332cff2c6cc49918e1195d0b855f244254e9008 refs/remotes/origin/ijk-r0.0.2-dev
< 1d2255757b12ffcc7e0ef3d8e50a3818b7db1694 refs/remotes/origin/ijk-r0.0.3-dev
< 2ffd408e9291fdfc340b4b89ab51b7ab3b0b5823 refs/remotes/origin/ijk-r0.0.4-dev
< 7bbff483aae11351762696d141d8b54c9ec59850 refs/remotes/origin/ijk-r0.0.5-dev
< 0806753650242623ec95f0e602a466e6054428a7 refs/remotes/origin/ijk-r0.0.6-dev
< 19867946a113b5c541e0b7a51b3db5df66305915 refs/remotes/origin/ijk-r0.1.0-dev
< 8da49c130fc8050cf931c651522511a15b24408e refs/remotes/origin/ijk-r0.1.2-dev
< 66696b66c09de97955301ea0ad896bcd80957341 refs/remotes/origin/ijk-r0.1.3-dev
< 4d8bd9a9528acba8d4c20848d832ddbb13705b90 refs/remotes/origin/ijk-r0.2.0-dev
< be1311f24c686fef4ebba27b362d5a75a27caa9f refs/remotes/origin/ijk-r0.2.1-dev
< 65c3ab457f0bee64466a7560a7d5d26850ed0f29 refs/remotes/origin/ijk-r0.2.2-dev
< efc9856eb94458644b3407eef3a548da6358bd43 refs/remotes/origin/ijk-r0.2.3-dev
< 250af29be195be3239b4a92a22c0e8e106797da8 refs/remotes/origin/ijk-r0.2.4-dev
< d8f1ec9f4e339f8f473220480b664ffaf3e3f2e1 refs/remotes/origin/ijk-r0.2.4-dev-async-rebase5
< ea2b3498b3a0e639a00091a5b38642c3720e34d6 refs/remotes/origin/ijk-r0.3.3-dev
< b6ec5b1b1c29874cb0e5a558491fae320e10c557 refs/remotes/origin/ijk-r0.4.5-ff3.0-dev
< 30d5036dfbaa7c8df187aa16c2ce59882aeb8b21 refs/remotes/origin/ijk-r0.4.5-ff3.0-dev-getaddrinfo-timeout-rb2
< 17871003bc7c36c16ec9e502e70c4eacebcb26f6 refs/remotes/origin/ijk-r0.6.0-ff3.1-dev
< 9c09fbd8053292267cdc4b542913ceced43ea3a9 refs/remotes/origin/libav
< d100dc6c9955af8b7a7a60a37a362a51c819222e refs/remotes/origin/master
< c02b64868a6f01f8e54268d6081789928e0d5155 refs/remotes/origin/master-allocated-filename2
< d6dcce358174d2c3c8b62ca34d948e5068b4dd17 refs/tags/Mp4.alpha
< ^913e4738d4e593e271df91c227c66d29ae029c02
---
> ab658db4d06fa5a3ef5b218e0b86970738e33016 refs/remotes/origin/master
> ea4e8e642acc8c192a129470cb58c45beb62940b refs/remotes/origin/oldabi
> 79bc4798b7bb31d213c0d97ab1c858c6be35113e refs/remotes/origin/release/0.10
> d3a1bf3579bc270a8a4ecfa8f834d14338a70f3d refs/remotes/origin/release/0.11
> b256bd3be348fd37108583fdac7db6337994c26d refs/remotes/origin/release/0.5
> 0a849fe1f2d7b7b5186f8eade6cd000e20d0df4b refs/remotes/origin/release/0.6
> 9526ad4f25f6f379f520e847f15c1be79a149d2f refs/remotes/origin/release/0.7
> a064b4eb1297a9bfaff63a35a398d417008a88bf refs/remotes/origin/release/0.8
> 36a3063aae33988493a6826225b6830600beaacc refs/remotes/origin/release/0.9
> e8bf189db28300e592ab104bd8c761139aa01f0a refs/remotes/origin/release/1.0
> 7608871734c8d951f6f1fd80bef54d77714b65a4 refs/remotes/origin/release/1.1
> 17788711ac4390f490d958590e218f45199950c4 refs/remotes/origin/release/1.2
> 72006016ae70ab21dfc39d5e90d55f94182cbb1c refs/remotes/origin/release/2.0
> a9a5f5b388aaa2f9882a44fddb6f26f2873985e9 refs/remotes/origin/release/2.1
> c7fe604cf1896f7599c23b5707fc577a93c66229 refs/remotes/origin/release/2.2
> 49fb1f66f15ff00c45bb20dfa94c3555503a2605 refs/remotes/origin/release/2.3
> 1cae2f002d4e76a389f41c207b05e9eb9f8b04d3 refs/remotes/origin/release/2.4
> 52a9f668eed6aec35804e362671ba4352a441c3c refs/remotes/origin/release/2.5
> a3fd8126445ae4de8fbe25aca6530c1487bafe8e refs/remotes/origin/release/2.6
> 2b6bc8e340ac214971aace12483f4ed460afd36c refs/remotes/origin/release/2.7
> d5b9ecc2d1ed345282064e41a2d6fbe4fa03bb4e refs/remotes/origin/release/2.8
> df000208eaa413bd27a0645aa71e3772d018ceba refs/remotes/origin/release/3.0
> 29584733e6de3e1f901761b19dccddb533461ccb refs/remotes/origin/release/3.1
> cb456b8fb00e04bedf117cb4b72c87a9c3db5145 refs/remotes/origin/release/3.2
> af8d5aab74c1fac2280e1a0b1e52c09b7e92e8b1 refs/remotes/origin/release/3.3
> 8f5e16b5f129f6d62b5135bd095c41e64998d2ed refs/remotes/origin/release/3.4
> 0c7dc6105224cd199b8e966bc76aafaeaacb2061 refs/remotes/origin/release/4.0
> d44da66fac3127b655b316711b8f1e57b7ed1acf refs/remotes/origin/release/4.1
> c9f3835b2b4d2f50a20113caa0a2d23107fe3f89 refs/remotes/origin/release/4.2
> 85713d85a70a534e8906a574c68af37a1f7053d9 refs/remotes/origin/release/4.3
> 49e3dd7709da920ac224aa2f9d48da3ea8897982 refs/remotes/origin/release/4.4
31,271d33
< 41a57affa9f905f65a7fb9093d87424dccbbe7b6 refs/tags/cronet-dev-rb0
< ^4d0461e5e94da703dc02dfd8d49a8face7337a45
< c5b84bd1456386351dd362219d1a0f263f4b5c44 refs/tags/cronet-dev-rb1
< ^c79e3f8ab972ba14081dc91d5eb94c6dc65649da
< b4b7831ced9cd0951316364f0d62ab6cd5339f4b refs/tags/cronet-dev-rb2
< ^92871e4291697e107f814a998ebf70ce3426e5d7
< 178a1f3936ea5c0a5a76c1b7c3be1a0cc6a8b225 refs/tags/cronet-dev-rb3
< ^273f74053bd4a46ca8d211d55063c76ae3f6fe31
< 2a77c01bf9f5ac9ec2629d8ad93443fe4ae05f28 refs/tags/ff2.8--ijk0.3.3--dev0.3.3--rc1
< ^a5d86a90526c449bdeb92d4b84f93649d00d863a
< fa1cda4d646c4dbe00700c7a19f3e7abd25a3df5 refs/tags/ff2.8--ijk0.3.3--dev0.3.3--rc2
< ^888401a5a5812557f6e6eac63383930f61bc550b
< ab322f2f9012d04f271d77095934eed25d172b27 refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc1
< ^25cd5a8965a0ca0fd043e163488c7927b63f4767
< a2e2b32a48bb8bbb998a52ba7503b07660aacd27 refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc2
< ^f6312a2f803435c1ee54fedb0f8a7a7d613c2646
< f152c353a77bea663b179bac7cad870ee12de9ea refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc3
< ^4c6aab39d7acfdda42b66d9d7839dbdf798b791a
< bceda9b0c78ee783a2c7b6396796cb4faa5fbd12 refs/tags/ff2.8--ijk0.4.1.1--dev0.3.3--rc4
< ^09bf393f9f1106efb67361de2fb3bfa9494dfe47
< 4ec9daf7182e0f0ba3cd2bd8ca204e02afa839e3 refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc5
< ^fe795db8b88948fb318696091f10c71b586c5571
< c20a45f508a67dc6fa9f1fa3ddab12383d148197 refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc6
< ^e3f2528c0eeca687252b4898a574cdfeb1c46b3b
< 39b4a2ba4edc66814e722284ffea8cef661b17af refs/tags/ff2.8--ijk0.4.4.1--dev0.3.3--rc7
< ^70fae437f7e3e58d7f7a9dc1906da96cdd3eeca8
< 4087158db5e513d68c8a5ea66effd6a27035ca2a refs/tags/ff2.8--ijk0.4.5.1--dev0.3.3--rc8
< ^b51fa00670f8f4c07b2c2bcf8f490ae869f2c2e8
< 01d2fdb8a2e95f495e252c1e441a2746d6938e87 refs/tags/ff2.8--ijk0.4.5.1--dev0.3.3--rc9
< ^ea2b3498b3a0e639a00091a5b38642c3720e34d6
< d5be9e1785663897ccabfeda746f0e25ff884874 refs/tags/ff3.0--ijk0.4.5.1--dev0.4.5--rc10
< 1d6ab4265036841a346cafbb46d416f3bd21e0be refs/tags/ff3.0--ijk0.5.0--dev0.4.5--rc11
< ^b6ec5b1b1c29874cb0e5a558491fae320e10c557
< 957b417940edd7af1938426f8f0e50ce51849842 refs/tags/ff3.1--ijk0.6.0--20160627--001
< ^29f8f2dbf4e5eb64c50175a7b86b12cfec5ae339
< 5c4b2a9fb101e24cb81c857ab161ba3cc6137f27 refs/tags/ff3.1--ijk0.6.0--20160715--001
< ^25110b4e9b2e8bd190ba2b3068db9bb8e80c44ce
< 17871003bc7c36c16ec9e502e70c4eacebcb26f6 refs/tags/ff3.1--ijk0.6.0--20160718--001
< 20f5740c431e856fc47775cbae6845f7b923758c refs/tags/ff3.1--ijk0.6.0--20160811--001
< ^e0a6ae63fa3d6f31986d0d8d5ec197ad75178cfc
< 8be446701a6d119b56b5610499fda55ab3a79d5a refs/tags/ff3.1--ijk0.6.1--20160811--002
< ^45fbf75a92b763720636bdbc357d08729d6e19d6
< 98248d1dd6d1f0ac3cce0883b667b92bf280ba80 refs/tags/ff3.1--ijk0.6.1--20160824--001
< dd851ed5932f8a1ca28075f1d2dc2591f0b1a055 refs/tags/ff3.1--ijk0.6.2--20160926--001
< 622e4e460380e20de590bbf6cae03fd2c19ffd8c refs/tags/ff3.1--zaku0.0.0--20160701--001
< ^29f8f2dbf4e5eb64c50175a7b86b12cfec5ae339
< 5b97f9a8a5a673be3a15960a1f8655950f9520f1 refs/tags/ff3.2--ijk0.7.0--20161102--001
< 7d5f3fada66bd2b77ff12b80b2acf56951bb4922 refs/tags/ff3.2--ijk0.7.2-20161107--001
< 7d5f3fada66bd2b77ff12b80b2acf56951bb4922 refs/tags/ff3.2--ijk0.7.4--20161116--001
< d1fab012e14a93366592e0971a4ae49916d354c3 refs/tags/ff3.2--ijk0.7.5--20161205--001
< bfe5b3eafc2065e96c0c3a001f4bbe0cb8205aa2 refs/tags/ff3.2--ijk0.7.6--20170203--001
< 681b854a5bebda9557845116fde9ffa3e2d7fd50 refs/tags/ff3.2--ijk0.7.6--20170301--001
< ^0854d8e8b929bb19d5d7a84a7c5085139018c326
< 283a1af5a6b9115cdf986189c5ed0bb04a8309dc refs/tags/ff3.2--ijk0.7.6--20170324--001
< ^ce854514294c4206d0aeac291dc19f6b81840839
< fee3fd9a9eaa29e6b0f235802fcb9ca1f384aa16 refs/tags/ff3.2--private-fix-pipe-seek
< ^3e30ea77e138ac43e3eed732ea2ddf64c69f3e4a
< 2cabdec12b1334cdc31b3d6e340553a3c387e332 refs/tags/ff3.3--ijk0.8.0--20170420--001
< ^002e2b0f4bee8900f7dc66084ed623293c332c30
< 6898b0f52d2b825bc1523fd8822f89d0ec0ac349 refs/tags/ff3.3--ijk0.8.0--20170426--001
< ^0f75c5593f0b97f8b84a9aafd2fc1e4a6d07621d
< 011eb85c4a9b92b6d1eabb276916dec4d5975f90 refs/tags/ff3.3--ijk0.8.0--20170427--001
< ^7df54dc17684948e1a517bbb2777595ebe22e544
< 91c58500b15d31498fab8725f8d9f8a58114a43b refs/tags/ff3.3--ijk0.8.0--20170512--001
< ^7fc360cb42587faebb68d48180782e246ed24265
< c84c3ecb42cb6f1d05b5de527fc32d8f27768812 refs/tags/ff3.3--ijk0.8.0--20170518--001
< ^3fbc116a1caf9030200d92bd9475672bdcfc4255
< b317f9274f270684c70cfe4d418e3d8e59cdedbf refs/tags/ff3.3--ijk0.8.0--20170607--001
< ^e18d0f20a75be0973df9a379d746a858ccaa2a98
< b5349267c75921ccfb30a0c50e87819701a1b4e8 refs/tags/ff3.3--ijk0.8.0--20170615--001
< ^bf7f19e467ded23b5429a0c6df3133cf3168d552
< a6af0452b143ef280ef9729c204a7f0fb0a68999 refs/tags/ff3.3--ijk0.8.0--20170623--001
< ^cd655d0df2f7ad3ef76cc2c8c55297af169cb254
< 9a981d481642bbb495b8ad809b3a7a7c0a878404 refs/tags/ff3.3--ijk0.8.0--20170626--001
< ^a05e4af54922e9438e6e9c0c77cf81717771247f
< bd09a15c83e05e35a0e3d5b413bc41e8a5714715 refs/tags/ff3.3--ijk0.8.0--20170704--001
< ^fd852a913f04a8b9c2338dcf7451a4114db855a5
< 7a11a02db7e69b9324015b557ace747920d01b38 refs/tags/ff3.3--ijk0.8.0--20170707--001
< ^5bdecd52b31df9c20e71181faf2e2e56f8a861b3
< a01121273d9a8e4cd9bc41ca18d6f46dddc6972d refs/tags/ff3.3--ijk0.8.0--20170710--001
< ^7aafcda44d91234ce35f66cfc49cb8961e59d6e5
< 1ad98fe1599d4fcc0785ce0da5268dbd0737d557 refs/tags/ff3.3--ijk0.8.0--20170811--001
< ^bfbf4cbc72d2b84b5a2c2f7120f100c84ce41b9f
< 9d251bd91e74fa8469b42210fe21fde802a79cec refs/tags/ff3.3--ijk0.8.0--20170829--001
< ^3e7320e81a2ed1e9dd9a16e2d0b76461148289b9
< 9eaf12871b3418db2a52a82f640ac31d98c5e2f9 refs/tags/ff3.3--ijk0.8.0--20171219--001
< ^5b5c1092116c7f2c5be669a3355033080b0fe9d6
< e4b083aa51735c3835f1382c09b3671116c14b4d refs/tags/ff3.3--ijk0.8.0--20171222--001
< ^ecc6a5c2d119441f94e39024329c97fa588368ec
< ed5af17561e5ec73f612f214a9d2d7610ab913d5 refs/tags/ff3.4--git--ijk0.8.7--20200911--001
< 50aabff7e59fe8dfb7fe2420767606475775879b refs/tags/ff3.4--ijk0.8.7--20171211--001
< ^231ccbcf2c05812b20805c3a1bdb1cfae6ce4ffe
< d05c7566c2250b6b4574cd087d64efef366d4393 refs/tags/ff3.4--ijk0.8.7--20180102--001
< ^78e652ed171bd25f2004cc2e994412fe26ce28bd
< b26eaa6d8cd0493f3bec47e3bcd40712397afbc8 refs/tags/ff3.4--ijk0.8.7--20180103--001
< ^2902e33f6e59ed77ddc1b372586c1ab8db1fb096
< f0dcee53be3e48e72f59128f2a8b7489f64220f9 refs/tags/ff3.4--ijk0.8.7--20180301--001
< ^bdc143ee30270ca604f43b8a1f8119b4e5bdaa62
< 210475d947133b8ff21006d0bf3b5a8c584f1a99 refs/tags/ff3.4--ijk0.8.7--20180305--001
< ^8a960c6fa57db8c20346e76596c715d0c9dde699
< c6c7d02232538af90420f4c75a6563f0b098a5f2 refs/tags/ff3.4--ijk0.8.7--20180320--001
< ^1bd4ca3ecf343edbeaf017d4a07bad0eaf8d00da
< 65cf7923bebd26cf2020523bf3f12ba138360f71 refs/tags/ff3.4--ijk0.8.7--20180322--001
< ^2258bda902701b26a9df0aee199344f560519666
< f875c66eed78063d9c4c6da3403e54c66ad9d48f refs/tags/ff3.4--ijk0.8.7--20180404--001
< ^33faea2fe84b8cf6077afed3b0e85d6f7ac71ed1
< 27cfc0f0a1afa096b0bf41630f42265fcdadd9dc refs/tags/ff3.4--ijk0.8.7--20180428--001
< ^0016bf68fca3efc426655a54cc965639685c8432
< 12ee124bf7a3a170ca77b2c65ecccf3a14bdcf34 refs/tags/ff3.4--ijk0.8.7--20180607--001
< ^11071ca02457a692a4dfc237d8f77420c7cf3141
< 551df4e07f75580919c859e5fb47c1d6bb3aba17 refs/tags/ff3.4--ijk0.8.7--20180612--001
< ^24d6572af9acac230e1deff527fa295729ef5fd2
< f886615aaba147aeaeb69bc199766cf52f980713 refs/tags/ff4.0--git--ijk0.8.8--20210205--001
< 13e3c15a9d80c5d1759fd2788d174d68dcf491d8 refs/tags/ff4.0--ijk0.8.20--20180626--001
< ^5fe6d47527c870d40a433a47615380f697491af2
< 8e14249d32bc0c5b90e18d9c1490d397b201179d refs/tags/ff4.0--ijk0.8.20--20180704--001
< ^f8cc8cc78e584b154beaded7fd6c82b466c0245c
< cb04da468429307a6e7be77f1341c4eda9f4fcdc refs/tags/ff4.0--ijk0.8.23--20180712--001
< ^473754ba2a69c59bd150d12b92318d5b5d7a704a
< f59ce1918e2673591b27ee7af2d06e9a01b98e33 refs/tags/ff4.0--ijk0.8.23--20180720--001
< ^d1f095c2e43c19a4caa7bb68f62d271c90190637
< 5879e9daf99ce54dd7432a12bae3ef11fcb195b8 refs/tags/ff4.0--ijk0.8.25--20180127--001
< ^152d7bfef087cf0f5fca1fd45e773a7263abc31e
< 512724f6778dba3634f809e520d3727f8f6d96b5 refs/tags/ff4.0--ijk0.8.25--20180128--001
< ^e810539da5742d627d7c1e09d171a2c137f708f1
< d7fbf1475daaad0f0b65d403c355c353aa687913 refs/tags/ff4.0--ijk0.8.25--20180129--001
< ^f7eec6aa1a12426dc4e28794a53f06964da9413c
< f729b8c3df5ece485a18f48ac57a51bc165a3f6b refs/tags/ff4.0--ijk0.8.25--20180130--001
< ^029d275eecb911fcf3ecc3ca2ea32793d57c82d2
< dd7504cfa63817403b0bb6aeee1ef3f21c44d64b refs/tags/ff4.0--ijk0.8.25--20180721--001
< ^2441c00f6504eab5442350479bfef2f27134539f
< 84d88b050bfdffee22ba33fab8173fb06faab262 refs/tags/ff4.0--ijk0.8.25--20180722--001
< ^802637211158b7072770c6944835676bac983f03
< 87944e2bd994f1ca2e78832c2160365f312088ed refs/tags/ff4.0--ijk0.8.25--20180724--001
< ^e18bb7824e7f2b478e9535624d976abf97ec5871
< 62118a18d5f3170913a45153b2dbdde9d16360de refs/tags/ff4.0--ijk0.8.25--20180801--001
< ^1d3074233d33ae56920d2662bad38af655307eef
< 996a668ca8bd206e7cd2a334ac4fdbf971e0663a refs/tags/ff4.0--ijk0.8.25--20180807--001
< ^520553d5613b728be271444703387fe7f9e84254
< 032c1ec8f8ada23ceb93c7d754041c588f7684e9 refs/tags/ff4.0--ijk0.8.25--20180816-001
< 10a66bb39d538c1029a6e96bb0b63273337b0993 refs/tags/ff4.0--ijk0.8.25--20180817--001
< ^ecaa972322ce7953df5c42cc8c07bd6880c69420
< 9d3b74a6a32708d2f8721e5761bd957bb77c59e9 refs/tags/ff4.0--ijk0.8.25--20180817-001
< ^ecaa972322ce7953df5c42cc8c07bd6880c69420
< 7ca41c2cea85feeb6beccda63198bfabf265413b refs/tags/ff4.0--ijk0.8.25--20180819--001
< ^66d12622dfb76129093094f5d9c182035d0d568b
< 23274d4d78d7d21182354e917cbea6539ff20e3d refs/tags/ff4.0--ijk0.8.25--20180820--001
< ^3b6df976364377916107664642e179ded8420f15
< bd902eb2473e06c41e8d7c5f2a1f525bd9f304cc refs/tags/ff4.0--ijk0.8.25--20180821--001
< ^5814639bc0b0193cf7db3209a597a13843816db7
< 4f24dea9666bca6f64150e4b58313900ba865544 refs/tags/ff4.0--ijk0.8.25--20180823--001
< ^b72f8e49f73ed11e4c4ee7e0a9515e8ceee51e92
< 0a1887937b0bdcf5f04d4d3e9d3a737b20c05bcd refs/tags/ff4.0--ijk0.8.25--20180824--001
< ^13f501febf22cac5170b7479a806734ab2cd7899
< 8605dc00e623d49afc5ba3e3f43fd1a0a7d7e3a2 refs/tags/ff4.0--ijk0.8.25--20180904--001
< ^3b4512c183df34263a91c60dc9ea34ad735a0e02
< f1335ad321ba1c4c3ecf0a74f83b13362c72f48b refs/tags/ff4.0--ijk0.8.25--20180907--001
< ^19a91e0109a7bc0d178436f9316e230f4de58b0a
< 05a3ffd40a8d18a1bdfd637fc3029d651ce7e645 refs/tags/ff4.0--ijk0.8.25--20180911--001
< ^8e0547f681d3603cf3c010a3500d8d3773958d7c
< 442f01f839dcd040b2af921957707cffedaa9e5e refs/tags/ff4.0--ijk0.8.25--20180920--001
< 5a7fa8076d113c9ebc890a22b7954ded464807d0 refs/tags/ff4.0--ijk0.8.25--20180926--001
< ^5227926549bd4aa8bc9c68780ae1093fe97a5838
< 2cf79106af0d459b3fc2a000f0beab53cd04ce55 refs/tags/ff4.0--ijk0.8.25--20181030--001
< a694df4430b9da0b8fd7538b752eba8543048a14 refs/tags/ff4.0--ijk0.8.25--20181101--001
< ecbc6ae0029f186e84b21187c05e3c5e3c8c8bac refs/tags/ff4.0--ijk0.8.25--20181114--001
< ^9df167e4184e76adb05021510b422e138c24b96e
< 0876ba5f8eea77c9dc6f79b5665c98a22307930f refs/tags/ff4.0--ijk0.8.25--20181123--001
< ^8fefddd64448777c619c0cf363c5786cbf30fba7
< 9d495b792b5b734436d19b61b3f949439f05ad45 refs/tags/ff4.0--ijk0.8.25--20190104--001
< 51f32183b65938254d005d6110b26dff3bd400ee refs/tags/ff4.0--ijk0.8.25--20190129--001
< ^029d275eecb911fcf3ecc3ca2ea32793d57c82d2
< a2ef70fb6c224d2bfce94048dce21cf8e010e2c7 refs/tags/ff4.0--ijk0.8.25--20190130--001
< ^fc3ff9c6beb9005dd89db16f854f1c0dda814244
< 797f76c42b9d15dff7a517c9c8c392557bb05ecd refs/tags/ff4.0--ijk0.8.25--20190305--001
< ^dffa7925706dba2bc3be95f3f071e0cbd85e2e50
< 13a43aab866c792e51ae9bb2403157aa8a1de6c7 refs/tags/ff4.0--ijk0.8.25--20190325--001
< ^22977c0a60b7dad97802f1a5a481b77b50446afa
< 9755afe1ab7bf0f67ec6a7a99d7b6cad8faefa4b refs/tags/ff4.0--ijk0.8.25--20190410--001
< 2f9a0940b5f2db2cbf188d4c25cdae44fa5ea7ec refs/tags/ff4.0--ijk0.8.25--20190429--001
< 41ebd6f935ad46496f01b61277431d92c5ed273d refs/tags/ff4.0--ijk0.8.25--20190528--001
< ^f75929d56bdc7fd289eac635d8db4f8a2dfb1dcd
< d02ecb94208963d025b7f64d1dacd9eda667a6e7 refs/tags/ff4.0--ijk0.8.25--20190529--001
< ^f602b20be4f05fe02cd693e6bf053a4f8f3166ff
< aaa25991c4b5412580289e4a88d81bd27bda26d3 refs/tags/ff4.0--ijk0.8.25--20190531--001
< ^9ada4e0d90c9334b165a64c327ce4d58deb13a6f
< eb55ede1689be59b7917c738797e60ebf71172c3 refs/tags/ff4.0--ijk0.8.25--20190610--001
< ^f8661ec7440aada7ec14c0cc7fca8051d52d11db
< 2bc01fbee8ecb21f72e34bbe21752c6a0b01b48a refs/tags/ff4.0--ijk0.8.25--20190614--001
< ^93f83adee73fda5336fde1be528b63260651e7c8
< 942a2890a9c86ce69e69f84a6346b8b8b2d19ec5 refs/tags/ff4.0--ijk0.8.25--20190615--001
< ^82b98c937396d34f6dc947f3209d1f91f098ff5d
< 89779933a761116a595be67ae55e24a666ccc25d refs/tags/ff4.0--ijk0.8.25--20190618--001
< ^c7dfeb38f26601a859afa80ae0c2428c3dda0d14
< 980912bcba42b36ed892f283f509df9f962dce40 refs/tags/ff4.0--ijk0.8.25--20190703--001
< ^1bf6d7d679163988b9eb09263046b3df73c4af14
< 6617864ed4a3440c45578b3b25bedf19f70a96d9 refs/tags/ff4.0--ijk0.8.25--20190704--001
< ^b6b511edae84b446f6c3d46da34b0b5477746e9d
< 48559541223b48ff94b0932558050888b54f2118 refs/tags/ff4.0--ijk0.8.25--20190705--001
< a58177e537e72aa534be2e2d8f91fdc06a4c12c5 refs/tags/ff4.0--ijk0.8.25--20190711--001
< ^d75838992e1645b8cc2d9aa439b618d799693a35
< b06a9d2ada097183eb885491d67e0db0eca4ba7c refs/tags/ff4.0--ijk0.8.25--20190829--002
< ce0abc2959c1b762d9e6596ab78338470d5975c8 refs/tags/ff4.0--ijk0.8.25--20190906--001
< ^1199b95b51d19945f6093423b5b37034ff820d82
< 1199b95b51d19945f6093423b5b37034ff820d82 refs/tags/ff4.0--ijk0.8.25--20190906-001
< ad5e0bd8b7e7be32d470362efdab864902824ee4 refs/tags/ff4.0--ijk0.8.25--20190929--001
< ^db24275b267997549c7009a592161b5938577691
< 042246e5423429d55fde123b8d8809653d811a9a refs/tags/ff4.0--ijk0.8.25--20190929-001
< ^db24275b267997549c7009a592161b5938577691
< 0ba828a5ca3412e1f7db9a7a4278abb012b5fd69 refs/tags/ff4.0--ijk0.8.25--20191018--001
< ^0cec4ce92c1336d417678b9f7a69fa4de9039c3a
< c0272e0beec3f5cca63a5547dcf03e6430dce1cf refs/tags/ff4.0--ijk0.8.25--20191023--001
< ^4c5991c69b7b73a8c6cdca1b1123bb0f8781de7f
< 0e21146005037baa79798ebf3128ff8f062b2b1a refs/tags/ff4.0--ijk0.8.25--20191024--001
< 7274d77bd95e4dbcb3ff41d6c8a4ae0b72c0ce2f refs/tags/ff4.0--ijk0.8.25--20191031--001
< 5ae8dcce8e4e3163eea16a857a89c2af3793ab67 refs/tags/ff4.0--ijk0.8.25--20191125--001
< ^6ecb10c515f60e8dc0d85741611450562a1b061d
< 8d3fb77a2fa58be81fb8cb49a73947e41751aa4d refs/tags/ff4.0--ijk0.8.25--20191205--001
< ^8860107939b88983f420cdcf935c16557e0747cc
< 0a34b8820d74c5605b2d6a14a9121f0be94f1e98 refs/tags/ff4.0--ijk0.8.25--20191217--001
< ^7c7ec318af292749f20833a70fc6f799e3eb44a3
< c72b9240d3e1ac6f862c1bd358e539c17ae494b8 refs/tags/ff4.0--ijk0.8.25--20191218--001
< ^1cf38dd8eada14b16cc012d013f7e359b53cee85
< 6407c212f68d0f70a91e8ab9e8685b7c5b1c1f05 refs/tags/ff4.0--ijk0.8.25--20191225--001
< ^6ce84a965b07dc727472799708f0fe625b1b496c
< 474eaa2edd292d6640ffd3cf83268116b3c410d7 refs/tags/ff4.0--ijk0.8.25--20191228--001
< ^328e26e7024f52c2d0f76001cee24c3d99fad92d
< 3434cbfbb2390f26543f1dd8f8529061913f74c3 refs/tags/ff4.0--ijk0.8.25--20191229--001
< ^e88d564e458f35d4f79acae2c63c73c7119eefa9
< 41958296f0ca8c09989a701a8df9abb96d670df6 refs/tags/ff4.0--ijk0.8.25--20191230--001
< ^8e56bf0fbced9c4f2acfbeb64c5b8351d3c9e624
< 39a60a1a846d65bb142c5b55f8146be6c4c70131 refs/tags/ff4.0--ijk0.8.25--20191231--001
< ^cc116330834a592e544d20ea5a4472db7c32abb8
< 621c935cc4aa8234ffaa33aea6b833c965a03ced refs/tags/ff4.0--ijk0.8.25--20200217--001
< ^247c2994c5178983147b16e932e774916d00e8db
< 6f832e2ca430fb61d5ec0b693c8ff4f49e26d415 refs/tags/ff4.0--ijk0.8.25--20200221--001
< ab5142d62b168d4189d36b00f9ef8378968666b8 refs/tags/ff4.0--ijk0.8.8--20201130--001
< 9c891dd716e413a2fb451422a3e9e022d93f6031 refs/tags/ff4.0--ijk0.8.8--20210205--001
< ^f886615aaba147aeaeb69bc199766cf52f980713
< 6ccd5fa770b20547b5eb463fd98ca8560adfe696 refs/tags/ff4.0--ijk0.8.8--20210426--001
< ^e88b5afbf9ca543a098ede6dd6765ef0e629836d
274,301d35
< c8bc12cb9ba26160a78edc171b6ca646756a43c0 refs/tags/ijk-multi-io-rb0
< ^e457eeca391ba93f76f8ff616b772d428c689105
< f09cc054f8be9845d4ef53901c76f3babcb4d024 refs/tags/ijk-multi-io-rb1
< 2c42340bed9868cdfcdb8a8cdf641c2b67c78675 refs/tags/ijk-multi-io-rb2
< 77e32bbfba6c517850b1c27b9e91df86418248f8 refs/tags/ijk-multi-io-rb3
< ^47fc963f5981d8fd00ec51eea410a0fe098aa855
< cb06509f319d2df452b337a1ebf52d6beb1b2b94 refs/tags/ijk-multi-io-rb5
< 4f31b74ec5121cd55ccb4f02b255c4a0d5e4d77d refs/tags/ijk-multi-io-rb6
< ^2981cbfc5e528d46197ba4029cee74d89fb8bbcf
< 0855699862b25633432a6d5084b24cf05274a24b refs/tags/ijk-n0.0.1
< ^aeb421d49d365dcb46a02800af99e60ed03cca53
< 8f13fa0f46d2e2d102a3d3d3ba2af7fd19f169d2 refs/tags/ijk-n0.0.2
< ^4332cff2c6cc49918e1195d0b855f244254e9008
< 6a6c138ad707a619073b66bf6612aba7a0ad9035 refs/tags/ijk-n0.0.3
< ^1d2255757b12ffcc7e0ef3d8e50a3818b7db1694
< 0f5a649c0018680e06e9628359c02f990f5c3012 refs/tags/ijk-n0.0.4
< ^2ffd408e9291fdfc340b4b89ab51b7ab3b0b5823
< 8aceba76417cf8e4647e56e3f182815e3639d5f8 refs/tags/ijk-n0.0.6
< ^48173fa1330e49e7c97f8f82479181bc8bd568d8
< b749e2313a1425fcfb837339fa8a9b5bdd295ed2 refs/tags/live-test-rb0
< ^e93c0c93fc2980777dfdc8df72ae823bb60d292b
< d42f6de5cb39c2d1fa2d86aaaf3bdd5fab6d35d7 refs/tags/multi-io-vod-rb0
< ^6b9c50eea336527ab8f485822db53f16247cac23
< 49e31a145abe5523afe2078cf5404621e873be28 refs/tags/multi-io-vod-rb1
< ^99323d8672cf21177c564e6b218f8a9862ca3485
< 23b7be744c46f13af8385c0b36dd9dc04de679d8 refs/tags/multi-io-vod-rb2
< a536603087968094a6f63ced54a2e0187dd90ea7 refs/tags/multi-io-vod-rb2.1
< ^23fdc4d4124c45e3a7878b50ea816c06cf11ffa4
651a386,387
> 4d62c6ee36f8411cde663df6ead27818b3f85bac refs/tags/n2.4.14
> ^935c93c069d3330ebba46ea05785eef3906b1c7c
739a476,491
> d11c1564e641721cd0d9e3cb4b577de5c1f97313 refs/tags/n2.8.10
> ^16c0d8aa46b6a206d14f1d1010b7487809d54e5f
> 623e339a2b64267360ad033e1e096dee2167b883 refs/tags/n2.8.11
> ^523da8eac176c241881a9177237f8bf60e8d7b75
> 75d251eb515beac6a7bfbffacbeb3316b8a0a88a refs/tags/n2.8.12
> ^ffab459e4e491384756cf8bae0f3922c5e4f6271
> 305ac17d1b8c0da2bde43b40c5340e4ee7c925bd refs/tags/n2.8.13
> ^7f0359f05e32d435435f36a986885b57a2af11f0
> 69083be98a03d9620db84aeb29c496d3a4f9510a refs/tags/n2.8.14
> ^3f8a0d5ad1a9ee2d15083f954a75f2aabe987b07
> 7158ecf7abf6880ad3711e72a635c608461e3ef2 refs/tags/n2.8.15
> ^48e104a8240d773f66a62969680a93d3c952e45b
> a3e7f723500cd9a033a7fd6f13dbde4debe4f20c refs/tags/n2.8.16
> ^f93e026b642431e796775345df2483ae283283f2
> 62afc82a6e0d068e161f4f600eca37cb917137be refs/tags/n2.8.17
> ^d5b9ecc2d1ed345282064e41a2d6fbe4fa03bb4e
751a504,507
> 94823ff628da0048e0294226a85ad3f5cfd099e2 refs/tags/n2.8.8
> ^d828aabf0343452a76547239832e27045be92549
> 7d336688c4ec9c9e43c62ad5470b551c450afcc3 refs/tags/n2.8.9
> ^fb93771072cfcbdd523d9f4bcd7682ee8b7f5578
757a514,519
> 2cbf356f1208e0d1622f18fa6377d5c97d6c86c6 refs/tags/n3.0.10
> ^2bc6b9b2a9c9f22b26ce2207f73f6e7a5aa7c0b9
> c84fbc3085b6270d485a8d5e76757da2837d05ed refs/tags/n3.0.11
> ^b910b34926657531d84269bd7c61fb8c74e5d905
> 316824e0a7b56f2d52ff6f4681e4bb2aa17ee153 refs/tags/n3.0.12
> ^527e64d32c345e2da17ae8afc0f852c3cca28345
759a522,535
> ceccf3e4465aae89bdde41f2167ba6d28275e77c refs/tags/n3.0.3
> ^3512ed3622e1200f03e0d508b5c1bcbf9f5d2c88
> 71c0f57d371ddcce22e75e7ff8019d1c2de22438 refs/tags/n3.0.4
> ^5771a0c8237d6fb0fb65877126ec0f7842fd2a1e
> f32f7037c5829ba83fb459eed133091a97c2c125 refs/tags/n3.0.5
> ^b408dba231091cd7f465ddf8bd8babf5b7efe63a
> 458ec45ee58bbf247a98027fec204fac4fd1aa82 refs/tags/n3.0.6
> ^e8b94e5ce48f0dd68287e8b1c2ef4125fabff1d7
> 364269d7761e5e0de638b635dd899137d30e0cdd refs/tags/n3.0.7
> ^c63e58756699d07b5bc69799db388600d3e634bf
> 32fb3da94a29edd2194381400aaf0890c3580e27 refs/tags/n3.0.8
> ^b33d01d8a253028083df250b5d4a2e43e5560c64
> 849fb7e635c23a62d0faf4b0cf02184adee668c4 refs/tags/n3.0.9
> ^0df61711cfb974601fbb8ac3d168d1c52c699ac8
765a542,561
> 94970575ba53043f8b43a6e320c5fe07695da660 refs/tags/n3.1.10
> ^afa34cb36edca0ff809b7e58474bbce12271ecba
> 32a434c6d1ddcc69f908cb4ec6ae0b09cff68f26 refs/tags/n3.1.11
> ^38c1df15c6a3358a22aaf753320988a95c977ce7
> 0fd8ce5d6c2514e78dcc756a215d881e004dfb9c refs/tags/n3.1.2
> ^4275b27a230008c41c63397871f173952723e2b2
> cea4771d742527764f29457c2ad832570d6d122d refs/tags/n3.1.3
> ^c46d22a4a58467bdc7885685b06a2114dd181c43
> edbfba08c07278d1b85390e2120e5bd22826c617 refs/tags/n3.1.4
> ^c2ea70628215ccede53240843b4514a6c339ab27
> b1bec5bc55a0243d8b53d15439388e75d930018e refs/tags/n3.1.5
> ^2a5c41e3e4a7e763503af59de903d5649dcc071a
> 8eed99c64750b367fa8ac041dadfde40b322ab7e refs/tags/n3.1.6
> ^e08b1cf2df8cfdb3394aa5ab0320739f8b5a1c4f
> 80f47f4c1740ec1d6cd39840f1121ef10707dfdd refs/tags/n3.1.7
> ^384d90f26800521440a1d64d7c6967e9b552a690
> 2df89ab0a0740b0afb21d231649b68da1be8bb48 refs/tags/n3.1.8
> ^9b9a620ce6983ea56a0b94501e4661d2ccf916d8
> 71cd66c2d924e4ba5f8719d00df40819f8fa4ae0 refs/tags/n3.1.9
> ^a2d9595a4b4e0e6fe85683ff79774fd618b282cc
769a566,595
> cfff8a663c2746f6aae3e102e562dcb46280381d refs/tags/n3.2.1
> ^c269c43a83166003ab6649263bc60634a6b7866f
> 6a368b7f72289118c1d79665f0f8f7f6b2c399a4 refs/tags/n3.2.10
> ^028a032a315a0d8b6f9344f461dade47d5536e89
> 8fb3702a3747a3c2a45813847c5e067cd03e0c42 refs/tags/n3.2.11
> ^97321ae36056e2360e1c5a43cbdeef164fe34922
> 23aa3e29d192d87313692bf6222cf9c6cb9eaa0f refs/tags/n3.2.12
> ^a911f234e26e488198dff8aec8a5ff3c2e052cc4
> c4f4c13a4fc87b19c323271a88c87c15c13e84af refs/tags/n3.2.13
> ^a97ea53ad96e9c39f7e698c314610ced6e2361e9
> e0d996e733bcc3dff7a4aaae9a3c9b8969ce8bd6 refs/tags/n3.2.14
> ^ba11e4028cfc5d40f49f26a44473a4f70d67c85d
> 591e4c8c43639b4830498332f7d6c47b33e2bd27 refs/tags/n3.2.15
> ^37a8ad9a3167923d500910031a8086489c004d83
> 7facc70ee9483ca49d0dd114f387716cd46cefd5 refs/tags/n3.2.2
> ^148c4fb8d203fdef8589ccef56a995724938918b
> b4c2500cd2c92e9c1cf2fac293723bf11c696e0d refs/tags/n3.2.3
> ^68ed682710f1cb1f4fdd1fd0447f402d6feabd01
> d8d7ad6587bd9133fceb00ed2ce080e4d7beb9d7 refs/tags/n3.2.4
> ^d4b731e271ba944ade8f6a128271479529507de9
> 96ba08becca2a1d88b61e2de87722ab0c75f4dd6 refs/tags/n3.2.5
> ^5d737a3d0ca2bf0f0c6170096d9d1ca230cf9ee0
> 52e413e272a0a3e35d361448b60bc00438ac0758 refs/tags/n3.2.6
> ^431ccd3f55eae8732fe901622660c52fc712cc25
> 1d0faec761fa71da2b8a6f922588638d01a3f2b1 refs/tags/n3.2.7
> ^66395ac32bfbc6e22da7176700479ef5543e493f
> fd28307ed1b3d1b8eb51ba70a8da68759df91b4a refs/tags/n3.2.8
> ^98f8f5b12f2a6e0b9e27b8e0a04f5be694aa5367
> 3edbffaf1b55e10dfd3de7d7983e57669c6c0a82 refs/tags/n3.2.9
> ^4b1e87dc32b7d20a61b3faac38cd18bc40029096
772,793c598,695
< 9bd5dec378f33dd371d1bd434df7f806a1020714 refs/tags/private-ff3.3-2017-0517-001
< ^631a266393d5df25417cb3598a4ba4dae2f48c0f
< f022a288bd3f5a6b528f660a71821c813da16c5f refs/tags/private-ff3.3-2017-0629-test-fps
< ^616f3576aa6c9d390c32cf788e82b09123726607
< 3ccb6ead75c8a1c0b8c867c0337fe43bc1f258c0 refs/tags/quic-rb0
< ^f0e438acbbe57cb3b673eb632460deffa88f2d0b
< 1b423f19b809fec7b0cecb051a4543f8fb7f42f8 refs/tags/quic-rb1
< ^b1de9f78af85071af514f002852d7fb5b8a8eecb
< 68f55dcae362b28c38acdab4ccc34b50eedda278 refs/tags/quic-rb2
< ^b24482c759da91b2dc2a5e2ec7be17dc1e3baac5
< 26acb270f00583eac8b99545987b6cc0779e2de1 refs/tags/quick-mp4-rb0
< ^94e50a1bee2efa905bcf0186e54bdbd3a9ec6f7a
< 8b393bf99c95b290705847d2797aac0f75d6d8f4 refs/tags/quick-mp4-rb1
< ^2c261387f18a70e5211afe7e6fff47f53d041693
< 0301952094e9fc560ba5ae2c5277ab58eb878e7a refs/tags/quick-mp4-rb2
< ^f247c49ac4c443350f8e5238a3e4765362fcea9d
< 3ceeb6455e7cdd3da83d2bcc09df1df96adafad1 refs/tags/quick-mp4-rb3
< ^47325fec2bcc05c5731a72a9a34fb7a15d71162e
< a0767e97dbd5f745ee36b57b43ddac2b7b877d76 refs/tags/quick-mp4-rb4
< ^ac11ae569f61e769b693ea6879faaf12f17c7283
< 96e4eeff53f50e662b2b79ce35279bc74a752f7f refs/tags/skip-frame-dev0
< ^89dbef2b0b485c728cd17fa4312a1ef4ca52b504
---
> 77b292a4a080250d1a94b9b7be46af488642eb96 refs/tags/n3.3-dev
> ^efa89a841941bf61d1a3eb5c2900f98e3e7db85b
> 13b6312f19ba78ec07c6d85e7ff63602e7cca0b1 refs/tags/n3.3.1
> ^c1c50650df6cef69c392ad0d544c30e571e24214
> 5a153f0df6b10f8b6cd35d89059334b17c1c08bb refs/tags/n3.3.2
> ^6d7192bcb7bbab17dc194e8dbb56c208bced0a92
> 771274876a5726f11bac5ae55de94d041cadf4c9 refs/tags/n3.3.3
> ^9079c70d2095643af6954001d0627445650b85a6
> 3405500541cbca2a2f16031f483c875f61856344 refs/tags/n3.3.4
> ^e3a1c0491fa2beb6562f9960e9cb3af673f3bf94
> 8d8aa2563ce778c04ae963854d4b1b0416cda2d6 refs/tags/n3.3.5
> ^670d3189e9ef674e4167cec3145ea4c4c172d581
> e27f87ecb5d996351c1275f59743cdba498225df refs/tags/n3.3.6
> ^03292829aa2e7a7db36de490c6cc19a4792ab3cc
> 1b9d66881599f203e2cff5e03a9cd77e5a14240a refs/tags/n3.3.7
> ^93e2cb4511417d265f3644c122167678fe4d3161
> 8d4bd95f939061335f2ee7fd4f5e0cdb872b6126 refs/tags/n3.3.8
> ^18c9d5d3e80dc0b47e0a260b51f5230bdd499e8b
> cc75da0e05c3981062b2e90a9ea9c609651df39b refs/tags/n3.3.9
> ^9cba90e5ef03f741074d45e3e68741d26c6c1741
> 3a44fe99b874b0d2f1c6b6def88efd02acbb80e2 refs/tags/n3.4
> ^01e291a592452f27b3a4e811536aaaf94096e244
> e91193625abccb62cc13c7712fddef50bed84a38 refs/tags/n3.4-dev
> ^22b0daa1b3f0ac5d91cc1a057d230995590847cd
> 15b0c14e114cf95e7217517414b49f81256578e4 refs/tags/n3.4.1
> ^bc839fb39dc376d462856863de2933f0b6b0351a
> 72cc23520e308c66cffe869b138c0e3ce90664fc refs/tags/n3.4.2
> ^6a97ba521558ce131fe839eed2d51ff745280e1d
> fc5ed4a2023d99d7351818f110a4b1316128baba refs/tags/n3.4.3
> ^89355585366b16238244decae40fbe0cc7ae3e40
> 9f23f2ff3b40a5b7b7e176f3f586e72b89b4b60f refs/tags/n3.4.4
> ^8df2c7dde6af3e748447ac313947388e6887178a
> d58b709fe92daf594b912776aabdf9390f405609 refs/tags/n3.4.5
> ^cb74b3ff27d510c62b6a78fef5a416674bbb4e51
> 5ee0b839747dbe2a869a7724e268a4ba00f04da5 refs/tags/n3.4.6
> ^0ac9001ab9f2bdd7c4306afd1a91d6c78b294d9f
> 88d338e325fa50e274d6cb9131e2cc97c15e65dc refs/tags/n3.4.7
> ^289a79d545e83a97f5cdd00b28ce70638dae53e8
> 7acacc49dee9c2a0a16f978204b2e4a5a43eba86 refs/tags/n3.4.8
> ^567c20f78109588620c57696ab39ff314fe12d6c
> 576bcde90928e5d05b3dd24e35e66e65d61f7a6f refs/tags/n3.5-dev
> ^80154b1b3a0a9e83a9cbaff8b922440f60998128
> 65470fb9bde98a5e7674d1b9751c8c1bef190595 refs/tags/n4.0
> ^ace829cb45cff530b8a0aed6adf18f329d7a98f6
> 67acfdb363a4bfce9146dfcde85dcdae3bd35213 refs/tags/n4.0.1
> ^e049f7c24fc6aa5fc925f860e2ad940a75cfd84f
> fb012fd6a887085be657782b5c000769eebb5c69 refs/tags/n4.0.2
> ^0a155c57bd8eb92ccaf7f5857dc6ab276d235846
> fb28a711f9d5091ce79971f505ad2979f9e0ce02 refs/tags/n4.0.3
> ^fcbd117df3077bad495e99e20f01cf93737bce76
> aedb6250eafa141cd4823788f7381f33b2ff4da7 refs/tags/n4.0.4
> ^ee66e04bc9dbbcf95114a103f174ed54b2260758
> 90c221eb7328bc3e588352b754ddd270ab1ae4ad refs/tags/n4.0.5
> ^26e1d0d015bb11ab0383729c52cfca4fd9cf4e79
> a2e996c6aecefdb741649de265d0178e4ae6b90f refs/tags/n4.0.6
> ^fd5ae2ab7a2c8c74e2f40d20a21ee2b49d42c330
> 085d7707e7dd817e3a859adb5457db757669597a refs/tags/n4.1
> ^10506de9ad1fb050737ef79cf4853742b793c37d
> 30dc841c864b7521b85323d44f79784e9af5b239 refs/tags/n4.1-dev
> ^3c1ecb057d7621e57968624aa15ad3e9efc819f7
> e12a576c7059b9adf1f564b77bc44df64852fc05 refs/tags/n4.1.1
> ^74700e50bf7444930bfc12935bd3e17cd5f766c1
> 7a0c0740f8fa1fbc25d058e338fc879261b36f7e refs/tags/n4.1.2
> ^a7cb7a2e4314956e06a351333ff8096fab9afa7f
> 460cfebb0760b978df9a6bc02b7b0c6842799f9b refs/tags/n4.1.3
> ^4154f8967820ca734a77ce91bb590cd77649dee8
> 8eece4338540f09698b5f99b97f7818e68753e07 refs/tags/n4.1.4
> ^9d06c1f95ebe4f9c2cc05d041dbfd3de52d2518a
> e0027ff1ce3c87b97875d2e142946db34d5cc2ab refs/tags/n4.1.5
> ^4521700f295f35da4768f88b570e0836a858ce7b
> d95ff17343f6cd7a0b1f9a0f46fe37e7a2661309 refs/tags/n4.1.6
> ^918a41d40e8459aee8c415d2f8692bb8a54dfef0
> 7a1d6630586096e28341277e3c91641c56852a74 refs/tags/n4.2
> ^75384bc464411fb2291105dca84b8bc411188350
> 562ae4d1d500bb9baa7db82f74e87cedb3594dcc refs/tags/n4.2-dev
> ^517573a67088b5c7a25c18373434e3448892ee93
> cbb3c9497549f8856d8cd37ac63af1406a784e58 refs/tags/n4.2.1
> ^1529dfb73a5157dcb8762051ec4c8d8341762478
> b53940e13dde81d721621b4d5296eede5795aadd refs/tags/n4.2.2
> ^192d1d34eb3668fa27f433e96036340e1e5077a0
> fbb22323bb550cbe1701e5d30efa045d954efc86 refs/tags/n4.2.3
> ^d3b963cc41824a3c5b2758ac896fb23e20a87875
> 7e04a97fdb8cc511cfa11e6215200097a78328bf refs/tags/n4.2.4
> ^f9f95ceebfbd7b7f43c1b7ad34e25d366e6e2d2b
> 7ab7d42cc98bcf0c5cda3f99eb35e20be1890646 refs/tags/n4.3
> ^8e12af29d1a3f95c9e952d78354e3c8b1c0431a8
> 921ce97010cd286a2ddbe97f01298090a9daa167 refs/tags/n4.3-dev
> ^80bb65fafab1d2f5f58a8453c6334c784ee27c08
> a3a26a98652fbdaa474e95cfbc12f68b64ca1e6f refs/tags/n4.3.1
> ^6b6b9e593dd4d3aaf75f48d40a13ef03bdef9fdb
> c872040562ef2988b107a01921dcc20c18b2deef refs/tags/n4.3.2
> ^f719f869907764e6412a6af6e178c46e5f915d25
> 09c358362008e2d04cec8239526c6827543da4cf refs/tags/n4.4
> ^dc91b913b6260e85e1304c74ff7bb3c22a8c9fb1
> 3199f588025134303a296b7e358785cec36e60f2 refs/tags/n4.4-dev
> ^c5079bf3bccd24bf8ed45ff47ff4071fd09e9fd8
> 3187c3628c0c05e2e02968c2ac1449e15f0fad3e refs/tags/n4.5-dev
> ^c361fa9e215cf21fb0e5b3395d675aec3d216719
798,799d699
< cc6e11fdb3ba971dee8085cc76f7fff7098849eb refs/tags/v0.5.10
< ^deb650c692317ccc3e5359f5b100c98dc88c514f
804,814d703
< 52ee20f2aa2936e0fb0a90e81c39135a8f2394e9 refs/tags/v0.5.4
< 8c147e21b660c17a38c340989818e232a6a40457 refs/tags/v0.5.5
< ^d6bf79993fe67021584263f87b8a41f9edcec579
< d4ea4fa9638da1b39e59d0d5d1f0bc6696b3810a refs/tags/v0.5.6
< ^d0688fdd3101d900a3e3aac4e36bf7ef1eae01ad
< 1f0adc05a69e375107583278ba3dd3c9e496901c refs/tags/v0.5.7
< ^15df4428d264287ec1577f92296b178f86cbe14d
< 3884f82b141bc0804d56a73dd7a5c1e1ca729050 refs/tags/v0.5.8
< ^4b2e02a4c4a618ac6d03fd38eb7ab0bc09596667
< 1da91b5a176f693b04e2e95fc8de3885cbe99fac refs/tags/v0.5.9
< ^6ec1d3b3bafa59363763631a8e090b2e12f6ef33
819,968d707
< b0f8fdc411c6380ca9279c8660915f35f5df1a3c refs/tags/v0.6.2
< c9e03639bf8aaafdfb7a58bc7dba8c461d28fd5f refs/tags/v0.6.3
< ^973d752dfbfb3286c6494f99744f386b98fda4d7
< 60080570a617722be950bddc39bc02799ecbc85d refs/tags/v0.6.4
< ^6b156c45638ceb2e076586b7efeb4cf9e04e0a84
< f82ba40a5e252b06a183208a4b176c120b35f334 refs/tags/v0.6.5
< ^62c473934822afd317dfef27754a0ff71f58ce2a
< 0ce5d1593ac4af5414b68ffe98627f2d63654e3c refs/tags/v0.6.6
< ^64eb6892ec839fb11f5b62db38810efb638ba806
< ee2ed99deb38a16e3053a995576c217617cfe745 refs/tags/v0.7
< ^dea22a1a912d5e6214db5c6a4addbc7b26881817
< 42d6399ef3bbb450e84840689ff9832a1c655cdc refs/tags/v0.7.1
< ^c02b02d725153e4f5b612d2af256024cf1bb9bd9
< 00ed7694444697b33e35d5e55ba85b339cce2438 refs/tags/v0.7.2
< ^58decdb639e8582063807b5ddfb86dada6731f74
< d5f37c0e7818989120e0ef1798507dddf22f501b refs/tags/v0.7.3
< ^d61b38b9db9bdc5e98f529c043767f8fd5369859
< 1593e23479c5f424d53d0e28e2f3b65c0611f8b1 refs/tags/v0.7.4
< ^d4653e882fee5a2876c3878bc23d26799e3380ad
< fbbd9c7b51f41747646e73293ddf61b56818c78e refs/tags/v0.7.5
< ^808686375d1c80b0eb1b12a78838a3ba010fce69
< 956c29752704faf61ecb35aaef66ee6746fd24d2 refs/tags/v0.7.6
< ^b61e311b0eeabaab8eb05f4e5e5c6c8c9d84f3cf
< dfd1b8f1030ecfb09c1c2a8851b573d9ff66381f refs/tags/v0.7.7
< ^db5b454c3d20f0e2e7fff8f0091e776ae9757725
< d11818eff42681eec9b8106e317a95766506821a refs/tags/v0.7b1
< 5e8361ec5036c758421c5012a0cff10444ee02a7 refs/tags/v0.7b2
< ^ced9556b6189de67dd740f5231c6f1807f3e3704
< 92688e3e73cecc7e1759c12b323ea192cf8b1537 refs/tags/v0.7rc1
< ^0af8a71d66305874bd6f0ebc84ebf99339b6a5d3
< c2ffd5881a9d1d3225a733f4db13251ea9779b37 refs/tags/v0.8
< ^4b63cc18bc44517f0f9e04b39ab873cbc3c6aee5
< 06539019c85c7acfa1387be52424a75ba74a719d refs/tags/v0.8.1
< ^5effcfa76792470677a1f6bc9aa73347a87ef720
< f071753f86ac5e886f514fea00b1854d60ee0ce8 refs/tags/v0.8.10
< ^5522c564d48e1bb07d8cb722e8f94575a2683e29
< 6627cabfc93c7806b2fd5a1cf223567b5390c8ed refs/tags/v0.8.11
< ^aedf1a2996e70d322220d2704d5a615c4f7b1b23
< c2d403f08f960f733ce6b3723df50c96466213a1 refs/tags/v0.8.12
< ^9552b37e2604552d5ff210175d6baf28ccc2bb80
< 31b5a0c889ccff2f1c2385b3b6cda0079b4fed0e refs/tags/v0.8.13
< ^e122fb594a5feb6729cce86a70aafd93d10202d8
< ff60b617bfa2a8d3e89e5e98267c5280b1f77ee6 refs/tags/v0.8.14
< ^042c25f54bd25b52d2936b822be026450971a82d
< 0943a3caf2f0490421b31537e96daacf76c4b811 refs/tags/v0.8.15
< ^5a2d1913a96bb0e029b424a4dd5b414cfb91c708
< 9785411413e45aba47fa451250abd287441a3f0e refs/tags/v0.8.16
< ^c6af9e944ebeb336f6520f59afaebb62392fb026
< 6902d0e99617c9b9652529886c39ff875bb69e72 refs/tags/v0.8.2
< ^43e5fda45cf540a052d6f78248a3bf99f87095a8
< c0163b1129032c20f51734f557a4f201e1cc7514 refs/tags/v0.8.3
< ^ce39a84a7d760965972781df61a88e5f432b978a
< 891116d68418552bb95afe3856b42f21c2da68d7 refs/tags/v0.8.4
< ^2c8ce46250ff78191fe6565876ddc4bc03fdf519
< a49fada5020601a16008141afdf0cb45fda24ad8 refs/tags/v0.8.5
< ^cf2cab5b2ab80fa2914692e02fa3488aaab7697e
< da7ebb065524929ae1c2e74fdf0f4fa99124d9df refs/tags/v0.8.6
< ^b385a772180963813a23baf9a80713a12c86cb7c
< 9fca65a8ffc21e102c49ebd88ce3f1ac1dae82fe refs/tags/v0.8.7
< ^e6617580e3f2abb9171e2103b452da7a3971d74a
< 9fba5746ba243d9680a6a463b923f7e141e3b30d refs/tags/v0.8.8
< ^8c62082b5127011db0c251f6a48b2872af8c3bc6
< fac1b305b8d23c67514f925fbf4f6011c48daf05 refs/tags/v0.8.9
< ^ae9652605a9a3328d3f992925a37bde037dff2ee
< 715c5b3a46109fd9ae656f63ba29db33ec1e0d20 refs/tags/v0.8b1
< ^f486fb338e36e674c2b72fc7c859967538cf1b47
< 03d0e62df1e52d27674539fa6364e2e06b9a09ac refs/tags/v0.8b2
< ^cf53a2127b4e5a34d1f839cea22bb0b3f0c55704
< 4a3159cb88de53f16c396d73d5c191f044c68c01 refs/tags/v10
< ^f25e6e0c255a6d81971fe66f6c32d29be0706f3d
< 31bd3b3decd7ca73195fdd48912acf5f69f251f3 refs/tags/v10.1
< ^e780c3daafe0588e035e752c771ebfcd2201746a
< c542079956b4570875ab466e2bc80f6351d33839 refs/tags/v10.2
< ^40dd29653ab85812d21fa64e9a665ceb316701ad
< e0cfeead1a3b0df898270944cd43daf1fd21bce5 refs/tags/v10.3
< ^07015d9f913d63bdc4495e75f4603c586553796e
< b47f729192b0f2d578d01114f9a565b9023ddbcb refs/tags/v10.4
< ^ee9e966296d74ca3836be5b5adc839cfc73d8c98
< b91386d844087708e1a43873282a46550e85fcdd refs/tags/v10.5
< ^d0af7d5745f3e228293633faa9e57994f3308c31
< 1ae05d8a0bba7fe2e833a279e60c9c4117b1858a refs/tags/v10_alpha1
< ^fe533ffdcffadb3e55f07d0caf316bc6bfe82049
< 7bae6f5b4d5023ecde030d759038fa25bd8c4059 refs/tags/v10_alpha2
< ^210881110d3e22cca36edeaca118b5e22c998266
< cda15090ffbb390e281fb0f016fd199d08530565 refs/tags/v10_beta1
< ^614b9e4db8f3d7c23fc0410fc04745a727a82f4e
< d20fb9d1aa10295fd9ce7b97669b42fe2609dc9d refs/tags/v10_beta2
< ^2b9ee7d5b901e0d7ba617511e4ed31d3043894d3
< 68810a51c767d36723720ac3820ab71b6a98aab2 refs/tags/v11
< ^f851477889ae48e2f17073cf7486e1d5561b7ae4
< cd976837b41823302293cd134802e137ea5f531f refs/tags/v11.1
< ^1cc6fef0671c5522c952671ee06bf973135a22c4
< dffb1113486356d304b5cfaf374e27844bc9a7c8 refs/tags/v11_alpha1
< ^fb1ddcdc8f51b9d261ae8e9c26b91e81f7b6bf45
< cf59fccb3480bbc7a618adb3d8060e76b3b3a555 refs/tags/v11_alpha2
< ^e8049af1325dd59a51546c15b2e71a0f578e9d27
< 4f5e06989fce758cd1e3104060da0d6e8d8e7d31 refs/tags/v11_beta1
< ^369380e1c4c6fc9b0d9ff04ec23d46b252ba7110
< 41014378061807c0d09f7e91b9491112921fc352 refs/tags/v11_dev0
< ^4d7ab5cfebef91820af2933ef2f622ea598e6b53
< 54303997082460d085803b46db7e0ba7e5b2048b refs/tags/v12_dev0
< ^11cd727fbd603197cb1e49654fce3352d56f8fd8
< 5b4b6a731f8d6183b70c70553f7f6f17a00e92cc refs/tags/v9
< ^f73f76fd202b310e8e1d0215b2e0cf038cd18c4a
< 2982dcff5424c15e9c2ac43371ca9c10b88373d3 refs/tags/v9.1
< ^0135dd73bb23060b896b06f2ecbb05435224f492
< 3c464e6fd24201b61746f25b153f7272f8dcbcb8 refs/tags/v9.10
< ^bb81b2b2e06abbf713094f8b77b4cbd550c02503
< ab327ee8dd147612fe46b5c40494be43ba0e540e refs/tags/v9.11
< ^27f60e2b0b419066619c738b3c9b9376a83ed4b1
< a3196bc1f5d688698f5ad76b05e52c6fc5ea7869 refs/tags/v9.12
< ^f1a2364cebe472a98a5ea157071f4eee4429ce9f
< 693a9a9629b81fc170676dbe027836e7b478a848 refs/tags/v9.13
< ^2340ce6954db2c0a79c57fcba7f45e2fcc20cdc9
< 8c4c4051baef34032afe2a1959c59d4811e02026 refs/tags/v9.14
< ^3ecbd911ff9177097820e5d00401c9bf29e5d167
< 6dd2d7fcf3ed680ce0d5f14f6500f5b0d29d323c refs/tags/v9.15
< ^8da037af332790c704de6127406d5f6b3734acf0
< 4f9adf54ccb2b58ce153ca740645d44bdc00db26 refs/tags/v9.15.1
< ^e86074e6ef23f14273cbf4af84c8d2491f744a79
< f49cf94cd1a65397efe5f3868f860efdfe7230a3 refs/tags/v9.16
< ^bd41211395fd1f968e9f3a4746daffebea60f41e
< 19a6b4fe540898965507c79a04b9b1398e7b4043 refs/tags/v9.17
< ^606bbd50b1ebaa3c040fc7cab84f1d8bb5d3d248
< 49c2b278efc1d76623fb09cae9ab28393e27efaa refs/tags/v9.2
< ^a991c0673f71199df363df05d2c8c83e17e80dfd
< 52d43a48b2482e000b92bda8889e8eb5bc6c87a4 refs/tags/v9.3
< ^a3b3096772c65899d7ca43a913051420d706c88a
< 879e5c04482e1e6ac2983e35f1c26b6133fdf96e refs/tags/v9.4
< ^2dfe3a7b4dda1ff94b31aaf1dd50f208b63dc301
< 959291e84381ad59f4cb775fce39404b53e2a6fc refs/tags/v9.5
< ^6cad940989d321034e5dcabc5bd9a27f46bb0725
< 2a64f034c4196a311febc272b3f562b7b2f84bb8 refs/tags/v9.6
< ^82c3792a308469351f0a3df20b539a9b7e6641a3
< f7d99f0a224d49f17c7e548cca4db6eddae02c3d refs/tags/v9.7
< ^5d2e4c918f35b247fb5a19b74d84de52cbc34e2c
< bf47a91fe3911a7573ccbb70edd8ce5d80984841 refs/tags/v9.8
< ^9aaca159bd220582c698f13d081a455f398c9975
< e852bc1f429247da724f45e6aebe314b7506092e refs/tags/v9.9
< ^4d073ddac95d789f23c3ee6f7b5348599b39f047
< 2a90a5ad49ac52da9163a56a580f066a946102a6 refs/tags/v9_beta1
< ^e578f8f4680f7ad290de64270dc152fb1adb6e6a
< e788ec5d59c91eeadd5637023aefd065d6309322 refs/tags/v9_beta2
< ^a9f0dce283f8ab2e70814244175253620a57eb56
< 3ca9e82ec5d1f6f3b261187353dbec7e66e9fe31 refs/tags/v9_beta3
< ^9378be9f3252bfa6970405c235c776df3f75533a
< ecac19afb22cafa6044b8f624d93364a77b09b61 refs/tags/wk-v2.2
< ^e6021ac00ede78a06c532e6a19b15450fd505558
< 2ad99f1cd7e0e012040b98f85e47708772a5998c refs/tags/wk-v2.2a
< ^5c0c95fefc7f0434c0153da531fb81bd8e8c5f2d
Only in android/contrib/ffmpeg-x86/.git/refs/heads: ijkplayer
diff -r android/contrib/ffmpeg-x86/.git/refs/heads/master /tmp/ffmpeg-x86/.git/refs/heads/master
1c1
< d100dc6c9955af8b7a7a60a37a362a51c819222e
---
> ab658db4d06fa5a3ef5b218e0b86970738e33016
Only in /tmp/ffmpeg-x86/.git/refs/heads: release
diff -r android/contrib/ffmpeg-x86/.gitignore /tmp/ffmpeg-x86/.gitignore
1d0
< .DS_Store
diff -r android/contrib/ffmpeg-x86/libavcodec/4xm.c /tmp/ffmpeg-x86/libavcodec/4xm.c
161c161
< #define MULTIPLY(var, const) (((var) * (const)) >> 16)
---
> #define MULTIPLY(var, const) ((int)((var) * (unsigned)(const)) >> 16)
353a354,355
>     if (get_bits_left(&f->gb) < 1)
>         return AVERROR_INVALIDDATA;
501c503
<         return -1;
---
>         return AVERROR_INVALIDDATA;
525a528,531
>             if (i >= 64) {
>                 av_log(f->avctx, AV_LOG_ERROR, "run %d overflow\n", i);
>                 return 0;
>             }
735c741
<                 return -1;
---
>                 return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/aacdec.c /tmp/ffmpeg-x86/libavcodec/aacdec.c
413a414,415
>                     if (get_bits_left(gb) < 9)
>                         return AVERROR_INVALIDDATA;
564c566
<     .caps_internal   = FF_CODEC_CAP_INIT_THREADSAFE,
---
>     .caps_internal   = FF_CODEC_CAP_INIT_THREADSAFE | FF_CODEC_CAP_INIT_CLEANUP,
589c591
<     .caps_internal   = FF_CODEC_CAP_INIT_THREADSAFE,
---
>     .caps_internal   = FF_CODEC_CAP_INIT_THREADSAFE | FF_CODEC_CAP_INIT_CLEANUP,
diff -r android/contrib/ffmpeg-x86/libavcodec/aacdec_fixed.c /tmp/ffmpeg-x86/libavcodec/aacdec_fixed.c
198,199c198
<     int ssign = scale < 0 ? -1 : 1;
<     int s = FFABS(scale);
---
>     int s = -scale;
203a203
>     av_assert0(s >= 0);
219c219
<             coefs[i] = ((int)(out+round) >> s) * ssign;
---
>             coefs[i] = -((int)(out+round) >> s);
224,227c224,232
<         round = 1 << (s-1);
<         for (i=0; i<len; i++) {
<             out = (int)((int64_t)((int64_t)coefs[i] * c + round) >> s);
<             coefs[i] = out * ssign;
---
>         if (s > 0) {
>             round = 1 << (s-1);
>             for (i=0; i<len; i++) {
>                 out = (int)((int64_t)((int64_t)coefs[i] * c + round) >> s);
>                 coefs[i] = -out;
>             }
>         } else {
>             for (i=0; i<len; i++)
>                 coefs[i] = -(int64_t)coefs[i] * c * (1 << -s);
310c315
<                 *coef += (pv.mant + (1 << (shift - 1))) >> shift;
---
>                 *coef += (unsigned)((pv.mant + (1 << (shift - 1))) >> shift);
312c317
<                 *coef += pv.mant << -shift;
---
>                 *coef += (unsigned)pv.mant << -shift;
388c393
<                             dest[group * 128 + k] += (tmp + round) >> shift;
---
>                             dest[group * 128 + k] += (tmp + (int64_t)round) >> shift;
397c402
<                             dest[group * 128 + k] += tmp * (1 << shift);
---
>                             dest[group * 128 + k] += tmp * (1U << shift);
420c425
<     int *dest = target->ret;
---
>     unsigned int *dest = target->ret;
439c444
<           dest[i] += tmp * (1 << shift);
---
>           dest[i] += tmp * (1U << shift);
diff -r android/contrib/ffmpeg-x86/libavcodec/aacdec_template.c /tmp/ffmpeg-x86/libavcodec/aacdec_template.c
1158a1159,1161
>     if (avctx->sample_rate > 96000)
>         return AVERROR_INVALIDDATA;
> 
1675,1677d1677
< #if !USE_FIXED
<                     float scale;
< #endif /* !USE_FIXED */
1679c1679
< 
---
> #if USE_FIXED
1682d1681
< #if USE_FIXED
1684,1686d1682
< #else
<                         cfo[k] = ac->random_state;
< #endif /* USE_FIXED */
1689d1684
< #if USE_FIXED
1693a1689,1695
>                     float scale;
> 
>                     for (k = 0; k < off_len; k++) {
>                         ac->random_state  = lcg_random(ac->random_state);
>                         cfo[k] = ac->random_state;
>                     }
> 
2465a2468,2470
>     if(!mmm)
>         return;
> 
2564c2569
<                     sce->coeffs[i] += predFreq[i];
---
>                     sce->coeffs[i] += (UINTFLOAT)predFreq[i];
2630c2635
<           buf[i] = (buf[i] + 4) >> 3;
---
>           buf[i] = (buf[i] + 4LL) >> 3;
diff -r android/contrib/ffmpeg-x86/libavcodec/aacps.c /tmp/ffmpeg-x86/libavcodec/aacps.c
417,418c417,418
<                 out[0][n][0] += in[   i][n][0];
<                 out[1][n][0] += in[   i][n][1];
---
>                 out[0][n][0] += (UINTFLOAT)in[   i][n][0];
>                 out[1][n][0] += (UINTFLOAT)in[   i][n][1];
421,422c421,422
<                 out[0][n][1] += in[12+i][n][0];
<                 out[1][n][1] += in[12+i][n][1];
---
>                 out[0][n][1] += (UINTFLOAT)in[12+i][n][0];
>                 out[1][n][1] += (UINTFLOAT)in[12+i][n][1];
425,430c425,430
<                 out[0][n][2] += in[20+i][n][0];
<                 out[1][n][2] += in[20+i][n][1];
<                 out[0][n][3] += in[24+i][n][0];
<                 out[1][n][3] += in[24+i][n][1];
<                 out[0][n][4] += in[28+i][n][0];
<                 out[1][n][4] += in[28+i][n][1];
---
>                 out[0][n][2] += (UINTFLOAT)in[20+i][n][0];
>                 out[1][n][2] += (UINTFLOAT)in[20+i][n][1];
>                 out[0][n][3] += (UINTFLOAT)in[24+i][n][0];
>                 out[1][n][3] += (UINTFLOAT)in[24+i][n][1];
>                 out[0][n][4] += (UINTFLOAT)in[28+i][n][0];
>                 out[1][n][4] += (UINTFLOAT)in[28+i][n][1];
436,443c436,443
<             out[0][n][0] = in[0][n][0] + in[1][n][0] + in[2][n][0] +
<                            in[3][n][0] + in[4][n][0] + in[5][n][0];
<             out[1][n][0] = in[0][n][1] + in[1][n][1] + in[2][n][1] +
<                            in[3][n][1] + in[4][n][1] + in[5][n][1];
<             out[0][n][1] = in[6][n][0] + in[7][n][0];
<             out[1][n][1] = in[6][n][1] + in[7][n][1];
<             out[0][n][2] = in[8][n][0] + in[9][n][0];
<             out[1][n][2] = in[8][n][1] + in[9][n][1];
---
>             out[0][n][0] = (UINTFLOAT)in[0][n][0] + in[1][n][0] + in[2][n][0] +
>                            (UINTFLOAT)in[3][n][0] + in[4][n][0] + in[5][n][0];
>             out[1][n][0] = (UINTFLOAT)in[0][n][1] + in[1][n][1] + in[2][n][1] +
>                            (UINTFLOAT)in[3][n][1] + in[4][n][1] + in[5][n][1];
>             out[0][n][1] = (UINTFLOAT)in[6][n][0] + in[7][n][0];
>             out[1][n][1] = (UINTFLOAT)in[6][n][1] + in[7][n][1];
>             out[0][n][2] = (UINTFLOAT)in[8][n][0] + in[9][n][0];
>             out[1][n][2] = (UINTFLOAT)in[8][n][1] + in[9][n][1];
diff -r android/contrib/ffmpeg-x86/libavcodec/aacpsdsp_template.c /tmp/ffmpeg-x86/libavcodec/aacpsdsp_template.c
57,60c57,60
<             INTFLOAT in0_re = in[j][0];
<             INTFLOAT in0_im = in[j][1];
<             INTFLOAT in1_re = in[12-j][0];
<             INTFLOAT in1_im = in[12-j][1];
---
>             INT64FLOAT in0_re = in[j][0];
>             INT64FLOAT in0_im = in[j][1];
>             INT64FLOAT in1_re = in[12-j][0];
>             INT64FLOAT in1_im = in[12-j][1];
133c133
<             in_re -= a_re;
---
>             in_re -= (UINTFLOAT)a_re;
136,138c136,138
<             in_im -= a_im;
<             ap_delay[m][n+5][0] = apd_re + AAC_MUL31(ag[m], in_re);
<             ap_delay[m][n+5][1] = apd_im + AAC_MUL31(ag[m], in_im);
---
>             in_im -= (UINTFLOAT)a_im;
>             ap_delay[m][n+5][0] = apd_re + (UINTFLOAT)AAC_MUL31(ag[m], in_re);
>             ap_delay[m][n+5][1] = apd_im + (UINTFLOAT)AAC_MUL31(ag[m], in_im);
153,156c153,156
<     INTFLOAT hs0 = h_step[0][0];
<     INTFLOAT hs1 = h_step[0][1];
<     INTFLOAT hs2 = h_step[0][2];
<     INTFLOAT hs3 = h_step[0][3];
---
>     UINTFLOAT hs0 = h_step[0][0];
>     UINTFLOAT hs1 = h_step[0][1];
>     UINTFLOAT hs2 = h_step[0][2];
>     UINTFLOAT hs3 = h_step[0][3];
184,187c184,187
<     INTFLOAT hs00 = h_step[0][0], hs10 = h_step[1][0];
<     INTFLOAT hs01 = h_step[0][1], hs11 = h_step[1][1];
<     INTFLOAT hs02 = h_step[0][2], hs12 = h_step[1][2];
<     INTFLOAT hs03 = h_step[0][3], hs13 = h_step[1][3];
---
>     UINTFLOAT hs00 = h_step[0][0], hs10 = h_step[1][0];
>     UINTFLOAT hs01 = h_step[0][1], hs11 = h_step[1][1];
>     UINTFLOAT hs02 = h_step[0][2], hs12 = h_step[1][2];
>     UINTFLOAT hs03 = h_step[0][3], hs13 = h_step[1][3];
diff -r android/contrib/ffmpeg-x86/libavcodec/aacsbr_fixed.c /tmp/ffmpeg-x86/libavcodec/aacsbr_fixed.c
435a436
>                 sbr->gain[e][m] = av_add_sf(sbr->gain[e][m], FLOAT_MIN);
569,570c570,572
<                 int *out = &Y1[i][kx][idx];
<                 int shift, round;
---
>                 unsigned *out = &Y1[i][kx][idx];
>                 int shift;
>                 unsigned round;
583c585
<                         out[2*m  ] += (in[m  ].mant * A + round) >> shift;
---
>                         out[2*m  ] += (int)(in[m  ].mant * A + round) >> shift;
588c590
<                         out[2*m+2] += (in[m+1].mant * B + round) >> shift2;
---
>                         out[2*m+2] += (int)(in[m+1].mant * B + round) >> shift2;
599c601
<                         out[2*m  ] += (in[m  ].mant * A + round) >> shift;
---
>                         out[2*m  ] += (int)(in[m  ].mant * A + round) >> shift;
diff -r android/contrib/ffmpeg-x86/libavcodec/aarch64/sbrdsp_neon.S /tmp/ffmpeg-x86/libavcodec/aarch64/sbrdsp_neon.S
290c290
<         fcmeq           v7.4S, v3.4S, #0.0
---
>         fcmeq           v7.4S, v3.4S, #0
diff -r android/contrib/ffmpeg-x86/libavcodec/ac3dec_fixed.c /tmp/ffmpeg-x86/libavcodec/ac3dec_fixed.c
67,68c67,68
<     int i, shift, round;
<     unsigned mul;
---
>     int i, shift;
>     unsigned mul, round;
109a110
>       mul <<= shift;
116c117
<           dst[i] = temp << shift;
---
>           dst[i] = temp;
119c120
<           dst[i+1] = temp1 << shift;
---
>           dst[i+1] = temp1;
121c122
<           dst[i+2] = temp2 << shift;
---
>           dst[i+2] = temp2;
124c125
<           dst[i+3] = temp3 << shift;
---
>           dst[i+3] = temp3;
127c128
<           dst[i+4] = temp4 << shift;
---
>           dst[i+4] = temp4;
130,132c131,133
<           dst[i+5] = temp5 << shift;
<           dst[i+6] = temp6 << shift;
<           dst[i+7] = temp7 << shift;
---
>           dst[i+5] = temp5;
>           dst[i+6] = temp6;
>           dst[i+7] = temp7;
diff -r android/contrib/ffmpeg-x86/libavcodec/ac3enc.c /tmp/ffmpeg-x86/libavcodec/ac3enc.c
1068c1068
<     snr_offset = (snr_offset - 240) << 2;
---
>     snr_offset = (snr_offset - 240) * 4;
diff -r android/contrib/ffmpeg-x86/libavcodec/adpcm.c /tmp/ffmpeg-x86/libavcodec/adpcm.c
112a113,116
>         if (avctx->channels & 1) {
>             avpriv_request_sample(avctx, "channel count %d\n", avctx->channels);
>             return AVERROR_PATCHWELCOME;
>         }
138,139c142,143
<             c->status[0].predictor = AV_RL32(avctx->extradata);
<             c->status[1].predictor = AV_RL32(avctx->extradata + 4);
---
>             c->status[0].predictor = av_clip_intp2(AV_RL32(avctx->extradata    ), 18);
>             c->status[1].predictor = av_clip_intp2(AV_RL32(avctx->extradata + 4), 18);
292c296
<     return c->predictor << 4;
---
>     return c->predictor * 16;
380a385,388
>         if (shift < 0) {
>             avpriv_request_sample(avctx, "unknown XA-ADPCM shift %d", shift);
>             shift = 0;
>         }
391c399
<             s = ( t<<shift ) + ((s_1*f0 + s_2*f1+32)>>6);
---
>             s = t*(1<<shift) + ((s_1*f0 + s_2*f1+32)>>6);
406c414
<         if (filter >= FF_ARRAY_ELEMS(xa_adpcm_table)) {
---
>         if (filter >= FF_ARRAY_ELEMS(xa_adpcm_table) || shift < 0) {
409a418,421
>         if (shift < 0) {
>             avpriv_request_sample(avctx, "unknown XA-ADPCM shift %d", shift);
>             shift = 0;
>         }
418c430
<             s = ( t<<shift ) + ((s_1*f0 + s_2*f1+32)>>6);
---
>             s = t*(1<<shift) + ((s_1*f0 + s_2*f1+32)>>6);
1137c1149
<         for (i=0; i<=st; i++)
---
>         for (i=0; i<=st; i++) {
1138a1151,1153
>             if (FFABS((int64_t)c->status[i].predictor) > (1<<16))
>                 return AVERROR_INVALIDDATA;
>         }
1185,1186c1200,1201
<                 next_left_sample  = sign_extend(byte >> 4, 4) << shift_left;
<                 next_right_sample = sign_extend(byte,      4) << shift_right;
---
>                 next_left_sample  = sign_extend(byte >> 4, 4) * (1 << shift_left);
>                 next_right_sample = sign_extend(byte,      4) * (1 << shift_right);
1225c1240
<                     int sample = sign_extend(byte[channel] >> i, 4) << shift[channel];
---
>                     int sample = sign_extend(byte[channel] >> i, 4) * (1 << shift[channel]);
1286c1301
<                             next_sample = sign_extend(byte,    4) << shift;
---
>                             next_sample = (unsigned)sign_extend(byte,    4) << shift;
1289c1304
<                             next_sample = sign_extend(byte >> 4, 4) << shift;
---
>                             next_sample = (unsigned)sign_extend(byte >> 4, 4) << shift;
1340c1355
<                     level = sign_extend(byte >> 4, 4) << shift[n];
---
>                     level = sign_extend(byte >> 4, 4) * (1 << shift[n]);
1344c1359
<                     level = sign_extend(byte, 4) << shift[n];
---
>                     level = sign_extend(byte, 4) * (1 << shift[n]);
1501,1502c1516,1517
<                     sampledat = ((prev1 * factor1 + prev2 * factor2) +
<                                  ((sampledat * scale) << 11)) >> 11;
---
>                     sampledat = ((prev1 * factor1 + prev2 * factor2) >> 11) +
>                                 sampledat * scale;
1564,1565c1579,1580
<                 int factor1 = table[ch][index * 2];
<                 int factor2 = table[ch][index * 2 + 1];
---
>                 int64_t factor1 = table[ch][index * 2];
>                 int64_t factor2 = table[ch][index * 2 + 1];
1579c1594
<                                 + c->status[ch].sample2 * factor2) >> 11) + (sampledat << exp);
---
>                                 + c->status[ch].sample2 * factor2) >> 11) + sampledat * (1 << exp);
1626c1641
<                     sampledat = (((sampledat << 12) >> (header & 0xf)) << 6) + prev;
---
>                     sampledat = ((sampledat * (1 << 12)) >> (header & 0xf)) * (1 << 6) + prev;
1663c1678
<                         scale  = scale << 12;
---
>                         scale  = scale * (1 << 12);
diff -r android/contrib/ffmpeg-x86/libavcodec/adxenc.c /tmp/ffmpeg-x86/libavcodec/adxenc.c
51c51
<         d = ((s0 << COEFF_BITS) - c->coeff[0] * s1 - c->coeff[1] * s2) >> COEFF_BITS;
---
>         d = s0 + ((-c->coeff[0] * s1 - c->coeff[1] * s2) >> COEFF_BITS);
82c82
<         d = ((wav[i] << COEFF_BITS) - c->coeff[0] * s1 - c->coeff[1] * s2) >> COEFF_BITS;
---
>         d = wav[i] + ((-c->coeff[0] * s1 - c->coeff[1] * s2) >> COEFF_BITS);
88c88
<         s0 = ((d << COEFF_BITS) * scale + c->coeff[0] * s1 + c->coeff[1] * s2) >> COEFF_BITS;
---
>         s0 = d * scale + ((c->coeff[0] * s1 + c->coeff[1] * s2) >> COEFF_BITS);
diff -r android/contrib/ffmpeg-x86/libavcodec/aic.c /tmp/ffmpeg-x86/libavcodec/aic.c
210a211,213
>     if (get_bits_left(gb) < 5)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/alac.c /tmp/ffmpeg-x86/libavcodec/alac.c
174c174
< static void lpc_prediction(int32_t *error_buffer, int32_t *buffer_out,
---
> static void lpc_prediction(int32_t *error_buffer, uint32_t *buffer_out,
179c179
<     int32_t *pred = buffer_out;
---
>     uint32_t *pred = buffer_out;
211c211
<         int error_val = error_buffer[i];
---
>         unsigned error_val = error_buffer[i];
218c218
<         val = (val + (1 << (lpc_quant - 1))) >> lpc_quant;
---
>         val = (val + (1LL << (lpc_quant - 1))) >> lpc_quant;
225c225
<             for (j = 0; j < lpc_order && error_val * error_sign > 0; j++) {
---
>             for (j = 0; j < lpc_order && (int)(error_val * error_sign) > 0; j++) {
230,231c230,231
<                 val *= sign;
<                 error_val -= (val >> lpc_quant) * (j + 1);
---
>                 val *= (unsigned)sign;
>                 error_val -= (val >> lpc_quant) * (j + 1U);
253c253
<     if (bps > 32U) {
---
>     if (bps > 32) {
256a257,258
>     if (bps < 1)
>         return AVERROR_INVALIDDATA;
309c311
<             if (lpc_order[ch] >= alac->max_samples_per_frame)
---
>             if (lpc_order[ch] >= alac->max_samples_per_frame || !lpc_quant[ch])
398c400
<                 alac->output_samples_buffer[ch][i] <<= 12;
---
>                 alac->output_samples_buffer[ch][i] *= 1U << 12;
404c406
<                 alac->output_samples_buffer[ch][i] <<= 8;
---
>                 alac->output_samples_buffer[ch][i] *= 1U << 8;
diff -r android/contrib/ffmpeg-x86/libavcodec/alacdsp.c /tmp/ffmpeg-x86/libavcodec/alacdsp.c
52c52
<             buffer[ch][i] = (buffer[ch][i] << extra_bits) | extra_bits_buffer[ch][i];
---
>             buffer[ch][i] = ((unsigned)buffer[ch][i] << extra_bits) | extra_bits_buffer[ch][i];
diff -r android/contrib/ffmpeg-x86/libavcodec/aliaspixdec.c /tmp/ffmpeg-x86/libavcodec/aliaspixdec.c
64a65,67
>     if (bytestream2_get_bytes_left(&gb) < width*height / 255)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/alsdec.c /tmp/ffmpeg-x86/libavcodec/alsdec.c
350a351,355
>     if (avctx->channels > FF_SANE_NB_CHANNELS) {
>         avpriv_request_sample(avctx, "Huge number of channels\n");
>         return AVERROR_PATCHWELCOME;
>     }
> 
490c495
<     int q   = get_unary(gb, 0, max);
---
>     unsigned q = get_unary(gb, 0, max);
510c515
<         int tmp1 = ((MUL64(par[k], cof[j]) + (1 << 19)) >> 20);
---
>         unsigned tmp1 = ((MUL64(par[k], cof[j]) + (1 << 19)) >> 20);
660c665
<     if (bd->block_length & (sub_blocks - 1)) {
---
>     if (bd->block_length & (sub_blocks - 1) || bd->block_length <= 0) {
775,776c780,781
<             bd->ltp_gain[0]   = decode_rice(gb, 1) << 3;
<             bd->ltp_gain[1]   = decode_rice(gb, 2) << 3;
---
>             bd->ltp_gain[0]   = decode_rice(gb, 1) * 8;
>             bd->ltp_gain[1]   = decode_rice(gb, 2) * 8;
787,788c792,793
<             bd->ltp_gain[3]   = decode_rice(gb, 2) << 3;
<             bd->ltp_gain[4]   = decode_rice(gb, 1) << 3;
---
>             bd->ltp_gain[3]   = decode_rice(gb, 2) * 8;
>             bd->ltp_gain[4]   = decode_rice(gb, 1) * 8;
796a802,809
>         start = FFMIN(opt_order, 3);
>         av_assert0(sb_length <= sconf->frame_length);
>         if (sb_length <= start) {
>             // opt_order or sb_length may be corrupted, either way this is unsupported and not well defined in the specification
>             av_log(avctx, AV_LOG_ERROR, "Sub block length smaller or equal start\n");
>             return AVERROR_PATCHWELCOME;
>         }
> 
803,804d815
< 
<         start = FFMIN(opt_order, 3);
818c829,831
<         ff_bgmc_decode_init(gb, &high, &low, &value);
---
>         int ret = ff_bgmc_decode_init(gb, &high, &low, &value);
>         if (ret < 0)
>             return ret;
827a841,843
>             if (k[sb] >= 32)
>                 return AVERROR_INVALIDDATA;
> 
869c885
<                         res  *= 1 << cur_k;
---
>                         res  *= 1U << cur_k;
920c936
<                 y += MUL64(bd->ltp_gain[tab], raw_samples[base]);
---
>                 y += (uint64_t)MUL64(bd->ltp_gain[tab], raw_samples[base]);
932c948
<                 y += MUL64(lpc_cof[sb], raw_samples[-(sb + 1)]);
---
>                 y += (uint64_t)MUL64(lpc_cof[sb], raw_samples[-(sb + 1)]);
948c964
<             int32_t *left, *right;
---
>             uint32_t *left, *right;
982c998
<             y += MUL64(lpc_cof[sb], raw_samples[sb]);
---
>             y += (uint64_t)MUL64(lpc_cof[sb], raw_samples[sb]);
1041c1057
<             bd->raw_samples[smp] <<= *bd->shift_lsbs;
---
>             bd->raw_samples[smp] = (unsigned)bd->raw_samples[smp] << *bd->shift_lsbs;
1177c1193
<                 bd[0].raw_samples[s] = bd[1].raw_samples[s] - bd[0].raw_samples[s];
---
>                 bd[0].raw_samples[s] = bd[1].raw_samples[s] - (unsigned)bd[0].raw_samples[s];
1180c1196
<                 bd[1].raw_samples[s] = bd[1].raw_samples[s] + bd[0].raw_samples[s];
---
>                 bd[1].raw_samples[s] = bd[1].raw_samples[s] + (unsigned)bd[0].raw_samples[s];
1386a1403,1405
>     if (!mantissa_temp)
>         return FLOAT_0;
> 
1403c1422,1426
<     mantissa = (unsigned int)(mantissa_temp >> cutoff_bit_count);
---
>     if (cutoff_bit_count >= 0) {
>         mantissa = (unsigned int)(mantissa_temp >> cutoff_bit_count);
>     } else {
>         mantissa = (unsigned int)(mantissa_temp <<-cutoff_bit_count);
>     }
1415c1438
<     return_val |= (a.exp + b.exp + bit_count - 47) << 23;
---
>     return_val |= ((unsigned)av_clip(a.exp + b.exp + bit_count - 47, -126, 127) << 23) & 0x7F800000;
1459a1483,1485
>     if (avctx->channels * 8 > get_bits_left(gb))
>         return AVERROR_INVALIDDATA;
> 
1799a1826,1827
>         int channels = avctx->channels;                                              \
>         int32_t **raw_samples = ctx->raw_samples;                                    \
1803,1804c1831,1832
<                 for (c = 0; c < avctx->channels; c++)                                \
<                     *dest++ = ctx->raw_samples[c][sample] << shift;                  \
---
>                 for (c = 0; c < channels; c++)                                       \
>                     *dest++ = raw_samples[c][sample] * (1U << shift);                \
1807,1808c1835,1836
<                 for (c = 0; c < avctx->channels; c++)                                \
<                     *dest++ = ctx->raw_samples[sconf->chan_pos[c]][sample] << shift; \
---
>                 for (c = 0; c < channels; c++)                                       \
>                     *dest++ = raw_samples[sconf->chan_pos[c]][sample] * (1U << shift);\
1991a2020,2021
>     if (num_buffers * (uint64_t)num_buffers > INT_MAX) // protect chan_data_buffer allocation
>         return AVERROR_INVALIDDATA;
2124d2153
<     decode_end(avctx);
2149a2179
>     .caps_internal  = FF_CODEC_CAP_INIT_CLEANUP,
diff -r android/contrib/ffmpeg-x86/libavcodec/amrwbdec.c /tmp/ffmpeg-x86/libavcodec/amrwbdec.c
614c614
<     return (p_ener - f_ener) / (p_ener + f_ener);
---
>     return (p_ener - f_ener) / (p_ener + f_ener + 0.01);
864a865
>     float tmp;
869,870c870,875
<     tilt = ctx->celpm_ctx.dot_productf(synth, synth + 1, AMRWB_SFR_SIZE - 1) /
<            ctx->celpm_ctx.dot_productf(synth, synth, AMRWB_SFR_SIZE);
---
>     tmp = ctx->celpm_ctx.dot_productf(synth, synth + 1, AMRWB_SFR_SIZE - 1);
> 
>     if (tmp > 0) {
>         tilt = tmp / ctx->celpm_ctx.dot_productf(synth, synth, AMRWB_SFR_SIZE);
>     } else
>         tilt = 0;
873c878
<     return av_clipf((1.0 - FFMAX(0.0, tilt)) * (1.25 - 0.25 * wsp), 0.1, 1.0);
---
>     return av_clipf((1.0 - tilt) * (1.25 - 0.25 * wsp), 0.1, 1.0);
diff -r android/contrib/ffmpeg-x86/libavcodec/anm.c /tmp/ffmpeg-x86/libavcodec/anm.c
121a122,124
>     if (buf_size < 7)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/apedec.c /tmp/ffmpeg-x86/libavcodec/apedec.c
463c463
<     else if (rice->ksum >= (1 << (rice->k + 5)))
---
>     else if (rice->ksum >= (1 << (rice->k + 5)) && rice->k < 24)
557c557
<         overflow  = range_decode_bits(ctx, 16) << 16;
---
>         overflow  = (unsigned)range_decode_bits(ctx, 16) << 16;
592c592
<     int ksummax, ksummin;
---
>     unsigned ksummax, ksummin;
613c613
<         rice->ksum += out[i] - out[i - 64];
---
>         rice->ksum += out[i] - (unsigned)out[i - 64];
839c839
<     p->filterA[filter] += p->lastA[filter];
---
>     p->filterA[filter] += (unsigned)p->lastA[filter];
862,864c862,864
<     d1 = (p->buf[delayA] - p->buf[delayA - 1]) << 1;
<     d0 =  p->buf[delayA] + ((p->buf[delayA - 2] - p->buf[delayA - 1]) << 3);
<     d3 =  p->buf[delayB] * 2 - p->buf[delayB - 1];
---
>     d1 = (p->buf[delayA] - p->buf[delayA - 1]) * 2U;
>     d0 =  p->buf[delayA] + ((p->buf[delayA - 2] - p->buf[delayA - 1]) * 8U);
>     d3 =  p->buf[delayB] * 2U - p->buf[delayB - 1];
884c884
<     p->filterA[filter] = p->filterB[filter] + ((p->filterA[filter] * 31) >> 5);
---
>     p->filterA[filter] = p->filterB[filter] + (unsigned)((int)(p->filterA[filter] * 31U) >> 5);
905c905
<             dotprod += delay[j] * coeffs[j];
---
>             dotprod += delay[j] * (unsigned)coeffs[j];
919c919,920
<     int32_t coeffs[8] = { 0 }, delay[8] = { 0 };
---
>     int32_t delay[8] = { 0 };
>     uint32_t coeffs[8] = { 0 };
1054c1055
<     p->filterA[filter] = p->lastA[filter] + ((p->filterA[filter] * 31) >> 5);
---
>     p->filterA[filter] = p->lastA[filter] + ((int)(p->filterA[filter] * 31U) >> 5);
1124c1125
<     p->buf[delayA - 1] = p->buf[delayA] - p->buf[delayA - 1];
---
>     p->buf[delayA - 1] = p->buf[delayA] - (unsigned)p->buf[delayA - 1];
1133c1134
<     p->buf[delayB]     = p->filterA[filter ^ 1] - ((p->filterB[filter] * 31) >> 5);
---
>     p->buf[delayB]     = p->filterA[filter ^ 1] - ((int)(p->filterB[filter] * 31U) >> 5);
1135c1136
<     p->buf[delayB - 1] = p->buf[delayB] - p->buf[delayB - 1];
---
>     p->buf[delayB - 1] = p->buf[delayB] - (unsigned)p->buf[delayB - 1];
1145,1146c1146,1147
<     p->lastA[filter] = decoded + ((predictionA + (predictionB >> 1)) >> 10);
<     p->filterA[filter] = p->lastA[filter] + ((p->filterA[filter] * 31) >> 5);
---
>     p->lastA[filter] = decoded + ((int)((unsigned)predictionA + (predictionB >> 1)) >> 10);
>     p->filterA[filter] = p->lastA[filter] + ((int)(p->filterA[filter] * 31U) >> 5);
1205c1206
<         p->buf[YDELAYA - 1] = p->buf[YDELAYA] - p->buf[YDELAYA - 1];
---
>         p->buf[YDELAYA - 1] = p->buf[YDELAYA] - (unsigned)p->buf[YDELAYA - 1];
1212c1213
<         currentA = A + (predictionA >> 10);
---
>         currentA = A + (unsigned)(predictionA >> 10);
1232c1233
<         p->filterA[0] = currentA + ((p->filterA[0] * 31) >> 5);
---
>         p->filterA[0] = currentA + (unsigned)((int)(p->filterA[0] * 31U) >> 5);
1269,1270c1270,1271
<         res = (res + (1 << (fracbits - 1))) >> fracbits;
<         res += *data;
---
>         res = (int)(res + (1U << (fracbits - 1))) >> fracbits;
>         res += (unsigned)*data;
1285c1286
<             absres = FFABS(res);
---
>             absres = res < 0 ? -(unsigned)res : res;
1300c1301
<             f->avg += (absres - f->avg) / 16;
---
>             f->avg += (int)(absres - (unsigned)f->avg) / 16;
1379c1380
<     int32_t left, right;
---
>     unsigned left, right;
1396c1397
<         left = *decoded1 - (*decoded0 / 2);
---
>         left = *decoded1 - (unsigned)(*decoded0 / 2);
1454c1455,1456
<                 s->data = NULL;
---
>                 av_freep(&s->data);
>                 s->data_size = 0;
1502c1504
<     memset(s->decoded_buffer, 0, s->decoded_size);
---
>     memset(s->decoded_buffer, 0, decoded_buffer_size);
1544c1546
<                 *sample24++ = s->decoded[ch][i] << 8;
---
>                 *sample24++ = s->decoded[ch][i] * 256;
diff -r android/contrib/ffmpeg-x86/libavcodec/arm/sbrdsp_neon.S /tmp/ffmpeg-x86/libavcodec/arm/sbrdsp_neon.S
339c339
<         vld1.32         {d3[]},   [r2,:32]!
---
>         vld1.32         {d18[]},  [r2,:32]!
343c343
<         vmla.f32        d0,  d6,  d3
---
>         vmla.f32        d0,  d6,  d18
diff -r android/contrib/ffmpeg-x86/libavcodec/assdec.c /tmp/ffmpeg-x86/libavcodec/assdec.c
34c34,35
<     memcpy(avctx->subtitle_header, avctx->extradata, avctx->extradata_size);
---
>     if (avctx->extradata_size)
>         memcpy(avctx->subtitle_header, avctx->extradata, avctx->extradata_size);
diff -r android/contrib/ffmpeg-x86/libavcodec/atrac3.c /tmp/ffmpeg-x86/libavcodec/atrac3.c
967c967
<     if (avctx->block_align >= UINT_MAX / 2)
---
>     if (avctx->block_align > 1024 || avctx->block_align <= 0)
diff -r android/contrib/ffmpeg-x86/libavcodec/atrac3plus.c /tmp/ffmpeg-x86/libavcodec/atrac3plus.c
458a459,462
>         if (pos > FF_ARRAY_ELEMS(chan->qu_wordlen)) {
>             av_log(avctx, AV_LOG_ERROR, "Split point beyond array\n");
>             pos = FF_ARRAY_ELEMS(chan->qu_wordlen);
>         }
diff -r android/contrib/ffmpeg-x86/libavcodec/audiodsp.c /tmp/ffmpeg-x86/libavcodec/audiodsp.c
82c82
<     int res = 0;
---
>     unsigned res = 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/avcodec.h /tmp/ffmpeg-x86/libavcodec/avcodec.h
1577c1577
<      * MPEGTS stream ID, this is required to pass the stream ID
---
>      * MPEGTS stream ID as uint8_t, this is required to pass the stream ID
1726d1725
< #define AV_PKT_FLAG_NEW_SEG 0x8000 ///< The packet is the first packet from a source in concat
diff -r android/contrib/ffmpeg-x86/libavcodec/avdct.c /tmp/ffmpeg-x86/libavcodec/avdct.c
112c112
<         IDCTDSPContext idsp;
---
>         IDCTDSPContext idsp = {0};
diff -r android/contrib/ffmpeg-x86/libavcodec/bethsoftvideo.c /tmp/ffmpeg-x86/libavcodec/bethsoftvideo.c
111a112,116
>         case VIDEO_P_FRAME:
>         case VIDEO_I_FRAME:
>             break;
>         default:
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/bgmc.c /tmp/ffmpeg-x86/libavcodec/bgmc.c
488c488
< void ff_bgmc_decode_init(GetBitContext *gb, unsigned int *h,
---
> int ff_bgmc_decode_init(GetBitContext *gb, unsigned int *h,
490a491,493
>     if (get_bits_left(gb) < VALUE_BITS)
>         return AVERROR_INVALIDDATA;
> 
493a497,498
> 
>     return 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/bgmc.h /tmp/ffmpeg-x86/libavcodec/bgmc.h
43c43
< void ff_bgmc_decode_init(GetBitContext *gb,
---
> int ff_bgmc_decode_init(GetBitContext *gb,
diff -r android/contrib/ffmpeg-x86/libavcodec/binkaudio.c /tmp/ffmpeg-x86/libavcodec/binkaudio.c
97a98,99
>         if (sample_rate > INT_MAX / avctx->channels)
>             return AVERROR_INVALIDDATA;
110c112
<     sample_rate_half = (sample_rate + 1) / 2;
---
>     sample_rate_half = (sample_rate + 1LL) / 2;
diff -r android/contrib/ffmpeg-x86/libavcodec/bink.c /tmp/ffmpeg-x86/libavcodec/bink.c
1301a1302,1304
>     if ((ret = av_image_check_size(avctx->width, avctx->height, 0, avctx)) < 0)
>         return ret;
> 
1305,1307d1307
< 
<     if ((ret = av_image_check_size(avctx->width, avctx->height, 0, avctx)) < 0)
<         return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/binkdsp.c /tmp/ffmpeg-x86/libavcodec/binkdsp.c
35a36,37
> #define MUL(X,Y) ((int)((unsigned)(X) * (Y)) >> 11)
> 
40c42
<     const int a3 = (A1*((src)[s2] - (src)[s6])) >> 11; \
---
>     const int a3 = MUL(A1, (src)[s2] - (src)[s6]); \
46,49c48,51
<     const int b1 = (A3*(a5 + a7)) >> 11; \
<     const int b2 = ((A4*a5) >> 11) - b0 + b1; \
<     const int b3 = (A1*(a6 - a4) >> 11) - b2; \
<     const int b4 = ((A2*a7) >> 11) + b3 - b1; \
---
>     const int b1 = MUL(A3, a5 + a7); \
>     const int b2 = MUL(A4, a5) - b0 + b1; \
>     const int b3 = MUL(A1, a6 - a4) - b2; \
>     const int b4 = MUL(A2, a7) + b3 - b1; \
diff -r android/contrib/ffmpeg-x86/libavcodec/bintext.c /tmp/ffmpeg-x86/libavcodec/bintext.c
37a38,39
> #define FONT_WIDTH 8
> 
63a66,69
>         if (!s->font_height) {
>             av_log(avctx, AV_LOG_ERROR, "invalid font height\n");
>             return AVERROR_INVALIDDATA;
>         }
93a100,102
>     if (avctx->width < FONT_WIDTH || avctx->height < s->font_height)
>         return AVERROR_INVALIDDATA;
> 
115,116d123
< 
< #define FONT_WIDTH 8
diff -r android/contrib/ffmpeg-x86/libavcodec/bitstream.c /tmp/ffmpeg-x86/libavcodec/bitstream.c
165d164
<     table_size = 1 << table_nb_bits;
167a167
>     table_size = 1 << table_nb_bits;
190a191
>                 int oldsym  = table[j][0];
192c193
<                 if (bits != 0 && bits != n) {
---
>                 if ((bits || oldsym) && (bits != n || oldsym != symbol)) {
228a230,233
>             if (table[j][0] != index) {
>                 avpriv_request_sample(NULL, "strange codes");
>                 return AVERROR_PATCHWELCOME;
>             }
diff -r android/contrib/ffmpeg-x86/libavcodec/bitstream_filters.c /tmp/ffmpeg-x86/libavcodec/bitstream_filters.c
64a65,67
>     if (!name)
>         return NULL;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/bmp.c /tmp/ffmpeg-x86/libavcodec/bmp.c
294c294
<                 for (j = 0; j < n; j++) {
---
>                 for (j = 0; j < avctx->width >> 3; j++) {
302a303,305
>                 }
>                 for (j = 0; j < (avctx->width & 7); j++) {
>                     ptr[avctx->width - (avctx->width & 7) + j] = buf[avctx->width >> 3] >> (7 - j) & 1;
diff -r android/contrib/ffmpeg-x86/libavcodec/brenderpix.c /tmp/ffmpeg-x86/libavcodec/brenderpix.c
206a207,210
>     bytes_per_scanline = bytes_pp * hdr.width;
> 
>     if (bytestream2_get_bytes_left(&gb) < hdr.height * bytes_per_scanline)
>         return AVERROR_INVALIDDATA;
264d267
<     bytes_per_scanline = bytes_pp * hdr.width;
diff -r android/contrib/ffmpeg-x86/libavcodec/bsf.c /tmp/ffmpeg-x86/libavcodec/bsf.c
50c50,51
<     av_packet_free(&ctx->internal->buffer_pkt);
---
>     if (ctx->internal)
>         av_packet_free(&ctx->internal->buffer_pkt);
diff -r android/contrib/ffmpeg-x86/libavcodec/cavsdec.c /tmp/ffmpeg-x86/libavcodec/cavsdec.c
594c594
< static inline void decode_residual_chroma(AVSContext *h)
---
> static inline int decode_residual_chroma(AVSContext *h)
596,597c596,597
<     if (h->cbp & (1 << 4))
<         decode_residual_block(h, &h->gb, chroma_dec, 0,
---
>     if (h->cbp & (1 << 4)) {
>         int ret = decode_residual_block(h, &h->gb, chroma_dec, 0,
599,600c599,603
<     if (h->cbp & (1 << 5))
<         decode_residual_block(h, &h->gb, chroma_dec, 0,
---
>         if (ret < 0)
>             return ret;
>     }
>     if (h->cbp & (1 << 5)) {
>         int ret = decode_residual_block(h, &h->gb, chroma_dec, 0,
601a605,608
>         if (ret < 0)
>             return ret;
>     }
>     return 0;
651a659
>     int ret;
695,696c703,707
<         if (h->cbp & (1<<block))
<             decode_residual_block(h, gb, intra_dec, 1, h->qp, d, h->l_stride);
---
>         if (h->cbp & (1<<block)) {
>             ret = decode_residual_block(h, gb, intra_dec, 1, h->qp, d, h->l_stride);
>             if (ret < 0)
>                 return ret;
>         }
706c717,719
<     decode_residual_chroma(h);
---
>     ret = decode_residual_chroma(h);
>     if (ret < 0)
>         return ret;
1069a1083,1087
>         if (   h->alpha_offset < -64 || h->alpha_offset > 64
>             || h-> beta_offset < -64 || h-> beta_offset > 64) {
>             h->alpha_offset = h->beta_offset  = 0;
>             return AVERROR_INVALIDDATA;
>         }
1199a1218
>     int frame_start = 0;
1232a1252,1254
>             if (frame_start > 1)
>                 return AVERROR_INVALIDDATA;
>             frame_start ++;
diff -r android/contrib/ffmpeg-x86/libavcodec/cavsdsp.c /tmp/ffmpeg-x86/libavcodec/cavsdsp.c
204,217c204,217
<         const int a0 =  3*src[i][1] - (src[i][7]<<1);
<         const int a1 =  3*src[i][3] + (src[i][5]<<1);
<         const int a2 =  (src[i][3]<<1) - 3*src[i][5];
<         const int a3 =  (src[i][1]<<1) + 3*src[i][7];
< 
<         const int b4 = ((a0 + a1 + a3)<<1) + a1;
<         const int b5 = ((a0 - a1 + a2)<<1) + a0;
<         const int b6 = ((a3 - a2 - a1)<<1) + a3;
<         const int b7 = ((a0 - a2 - a3)<<1) - a2;
< 
<         const int a7 = (src[i][2]<<2) - 10*src[i][6];
<         const int a6 = (src[i][6]<<2) + 10*src[i][2];
<         const int a5 = ((src[i][0] - src[i][4]) << 3) + 4;
<         const int a4 = ((src[i][0] + src[i][4]) << 3) + 4;
---
>         const int a0 = 3 * src[i][1] - 2 * src[i][7];
>         const int a1 = 3 * src[i][3] + 2 * src[i][5];
>         const int a2 = 2 * src[i][3] - 3 * src[i][5];
>         const int a3 = 2 * src[i][1] + 3 * src[i][7];
> 
>         const int b4 = 2 * (a0 + a1 + a3) + a1;
>         const int b5 = 2 * (a0 - a1 + a2) + a0;
>         const int b6 = 2 * (a3 - a2 - a1) + a3;
>         const int b7 = 2 * (a0 - a2 - a3) - a2;
> 
>         const int a7 = 4 * src[i][2] - 10 * src[i][6];
>         const int a6 = 4 * src[i][6] + 10 * src[i][2];
>         const int a5 = 8 * (src[i][0] - src[i][4]) + 4;
>         const int a4 = 8 * (src[i][0] + src[i][4]) + 4;
234,247c234,247
<         const int a0 =  3*src[1][i] - (src[7][i]<<1);
<         const int a1 =  3*src[3][i] + (src[5][i]<<1);
<         const int a2 =  (src[3][i]<<1) - 3*src[5][i];
<         const int a3 =  (src[1][i]<<1) + 3*src[7][i];
< 
<         const int b4 = ((a0 + a1 + a3)<<1) + a1;
<         const int b5 = ((a0 - a1 + a2)<<1) + a0;
<         const int b6 = ((a3 - a2 - a1)<<1) + a3;
<         const int b7 = ((a0 - a2 - a3)<<1) - a2;
< 
<         const int a7 = (src[2][i]<<2) - 10*src[6][i];
<         const int a6 = (src[6][i]<<2) + 10*src[2][i];
<         const int a5 = (src[0][i] - src[4][i]) << 3;
<         const int a4 = (src[0][i] + src[4][i]) << 3;
---
>         const int a0 = 3 * src[1][i] - 2 * src[7][i];
>         const int a1 = 3 * src[3][i] + 2 * src[5][i];
>         const int a2 = 2 * src[3][i] - 3 * src[5][i];
>         const int a3 = 2 * src[1][i] + 3 * src[7][i];
> 
>         const int b4 = 2 * (a0 + a1 + a3) + a1;
>         const int b5 = 2 * (a0 - a1 + a2) + a0;
>         const int b6 = 2 * (a3 - a2 - a1) + a3;
>         const int b7 = 2 * (a0 - a2 - a3) - a2;
> 
>         const int a7 = 4 * src[2][i] - 10 * src[6][i];
>         const int a6 = 4 * src[6][i] + 10 * src[2][i];
>         const int a5 = 8 * (src[0][i] - src[4][i]);
>         const int a4 = 8 * (src[0][i] + src[4][i]);
diff -r android/contrib/ffmpeg-x86/libavcodec/ccaption_dec.c /tmp/ffmpeg-x86/libavcodec/ccaption_dec.c
215,218c215,218
<     uint8_t characters[SCREEN_ROWS][SCREEN_COLUMNS+1];
<     uint8_t charsets[SCREEN_ROWS][SCREEN_COLUMNS+1];
<     uint8_t colors[SCREEN_ROWS][SCREEN_COLUMNS+1];
<     uint8_t fonts[SCREEN_ROWS][SCREEN_COLUMNS+1];
---
>     uint8_t characters[SCREEN_ROWS+1][SCREEN_COLUMNS+1];
>     uint8_t charsets[SCREEN_ROWS+1][SCREEN_COLUMNS+1];
>     uint8_t colors[SCREEN_ROWS+1][SCREEN_COLUMNS+1];
>     uint8_t fonts[SCREEN_ROWS+1][SCREEN_COLUMNS+1];
diff -r android/contrib/ffmpeg-x86/libavcodec/cdgraphics.c /tmp/ffmpeg-x86/libavcodec/cdgraphics.c
83,84d82
<     avctx->width   = CDG_FULL_WIDTH;
<     avctx->height  = CDG_FULL_HEIGHT;
86,87c84
< 
<     return 0;
---
>     return ff_set_dimensions(avctx, CDG_FULL_WIDTH, CDG_FULL_HEIGHT);
diff -r android/contrib/ffmpeg-x86/libavcodec/cinepak.c /tmp/ffmpeg-x86/libavcodec/cinepak.c
318c318
< static int cinepak_decode (CinepakContext *s)
---
> static int cinepak_predecode_check (CinepakContext *s)
320,322c320
<     const uint8_t  *eod = (s->data + s->size);
<     int           i, result, strip_size, frame_flags, num_strips;
<     int           y0 = 0;
---
>     int           num_strips;
325d322
<     frame_flags = s->data[0];
355a353,367
>     if (s->size < 10 + s->sega_film_skip_bytes + num_strips * 12)
>         return AVERROR_INVALIDDATA;
> 
>     return 0;
> }
> 
> static int cinepak_decode (CinepakContext *s)
> {
>     const uint8_t  *eod = (s->data + s->size);
>     int           i, result, strip_size, frame_flags, num_strips;
>     int           y0 = 0;
> 
>     frame_flags = s->data[0];
>     num_strips  = AV_RB16 (&s->data[8]);
> 
434a447
>     int num_strips;
440a454,464
> 
>     num_strips = AV_RB16 (&s->data[8]);
> 
>     //Empty frame, do not waste time
>     if (!num_strips && (!s->palette_video || !av_packet_get_side_data(avpkt, AV_PKT_DATA_PALETTE, NULL)))
>         return buf_size;
> 
>     if ((ret = cinepak_predecode_check(s)) < 0) {
>         av_log(avctx, AV_LOG_ERROR, "cinepak_predecode_check failed\n");
>         return ret;
>     }
diff -r android/contrib/ffmpeg-x86/libavcodec/cngdec.c /tmp/ffmpeg-x86/libavcodec/cngdec.c
156c156
<         buf_out[i] = p->filter_out[i + p->order];
---
>         buf_out[i] = av_clip_int16(p->filter_out[i + p->order]);
177c177
<     .capabilities   = AV_CODEC_CAP_DELAY | AV_CODEC_CAP_DR1,
---
>     .capabilities   = AV_CODEC_CAP_DR1,
diff -r android/contrib/ffmpeg-x86/libavcodec/cook.c /tmp/ffmpeg-x86/libavcodec/cook.c
146c146
<     float               gain_table[23];
---
>     float               gain_table[31];
188,189c188,189
<     for (i = 0; i < 23; i++)
<         q->gain_table[i] = pow(pow2tab[i + 52],
---
>     for (i = 0; i < 31; i++)
>         q->gain_table[i] = pow(pow2tab[i + 48],
673c673
<         fc2 = q->gain_table[11 + (gain_index_next - gain_index)];
---
>         fc2 = q->gain_table[15 + (gain_index_next - gain_index)];
762c762
<                                                p->channel_coupling.bits, 2);
---
>                                                p->channel_coupling.bits, 3);
1077a1078,1080
>     if (avctx->block_align >= INT_MAX / 8)
>         return AVERROR(EINVAL);
> 
1219a1223,1231
> 
>     /* Try to catch some obviously faulty streams, otherwise it might be exploitable */
>     if (q->samples_per_channel != 256 && q->samples_per_channel != 512 &&
>         q->samples_per_channel != 1024) {
>         avpriv_request_sample(avctx, "samples_per_channel = %d",
>                               q->samples_per_channel);
>         return AVERROR_PATCHWELCOME;
>     }
> 
1228,1231d1239
< 
<     if (avctx->block_align >= UINT_MAX / 2)
<         return AVERROR(EINVAL);
< 
1253,1260d1260
<     }
< 
<     /* Try to catch some obviously faulty streams, otherwise it might be exploitable */
<     if (q->samples_per_channel != 256 && q->samples_per_channel != 512 &&
<         q->samples_per_channel != 1024) {
<         avpriv_request_sample(avctx, "samples_per_channel = %d",
<                               q->samples_per_channel);
<         return AVERROR_PATCHWELCOME;
diff -r android/contrib/ffmpeg-x86/libavcodec/cpia.c /tmp/ffmpeg-x86/libavcodec/cpia.c
66c66
<     if ( avpkt->size < FRAME_HEADER_SIZE
---
>     if ( avpkt->size < FRAME_HEADER_SIZE + avctx->height * 3
diff -r android/contrib/ffmpeg-x86/libavcodec/cscd.c /tmp/ffmpeg-x86/libavcodec/cscd.c
84c84
<             if (av_lzo1x_decode(c->decomp_buf, &outlen, &buf[2], &inlen))
---
>             if (av_lzo1x_decode(c->decomp_buf, &outlen, &buf[2], &inlen) || outlen) {
85a86,87
>                 return AVERROR_INVALIDDATA;
>             }
91c93
<             if (uncompress(c->decomp_buf, &dlen, &buf[2], buf_size - 2) != Z_OK)
---
>             if (uncompress(c->decomp_buf, &dlen, &buf[2], buf_size - 2) != Z_OK) {
92a95,96
>                 return AVERROR_INVALIDDATA;
>             }
diff -r android/contrib/ffmpeg-x86/libavcodec/cuvid.c /tmp/ffmpeg-x86/libavcodec/cuvid.c
82c82
<     CUVIDEOFORMATEX cuparse_ext;
---
>     CUVIDEOFORMATEX *cuparse_ext;
376c376,380
<     return (av_fifo_size(ctx->frame_queue) / sizeof(CuvidParsedFrame)) + 2 > ctx->nb_surfaces;
---
>     int delay = ctx->cuparseinfo.ulMaxDisplayDelay;
>     if (ctx->deint_mode != cudaVideoDeinterlaceMode_Weave && !ctx->drop_second_field)
>         delay *= 2;
> 
>     return (av_fifo_size(ctx->frame_queue) / sizeof(CuvidParsedFrame)) + delay >= ctx->nb_surfaces;
694a699,700
>     av_freep(&ctx->cuparse_ext);
> 
797a804,805
>     uint8_t *extradata;
>     int extradata_size;
894d901
<     memset(&ctx->cuparse_ext, 0, sizeof(ctx->cuparse_ext));
897,898d903
<     ctx->cuparseinfo.pExtVideoInfo = &ctx->cuparse_ext;
< 
968,976c973,984
<         ctx->cuparse_ext.format.seqhdr_data_length = ctx->bsf->par_out->extradata_size;
<         memcpy(ctx->cuparse_ext.raw_seqhdr_data,
<                ctx->bsf->par_out->extradata,
<                FFMIN(sizeof(ctx->cuparse_ext.raw_seqhdr_data), ctx->bsf->par_out->extradata_size));
<     } else if (avctx->extradata_size > 0) {
<         ctx->cuparse_ext.format.seqhdr_data_length = avctx->extradata_size;
<         memcpy(ctx->cuparse_ext.raw_seqhdr_data,
<                avctx->extradata,
<                FFMIN(sizeof(ctx->cuparse_ext.raw_seqhdr_data), avctx->extradata_size));
---
>         extradata = ctx->bsf->par_out->extradata;
>         extradata_size = ctx->bsf->par_out->extradata_size;
>     } else {
>         extradata = avctx->extradata;
>         extradata_size = avctx->extradata_size;
>     }
> 
>     ctx->cuparse_ext = av_mallocz(sizeof(*ctx->cuparse_ext)
>             + FFMAX(extradata_size - (int)sizeof(ctx->cuparse_ext->raw_seqhdr_data), 0));
>     if (!ctx->cuparse_ext) {
>         ret = AVERROR(ENOMEM);
>         goto error;
978a987,992
>     if (extradata_size > 0)
>         memcpy(ctx->cuparse_ext->raw_seqhdr_data, extradata, extradata_size);
>     ctx->cuparse_ext->format.seqhdr_data_length = extradata_size;
> 
>     ctx->cuparseinfo.pExtVideoInfo = ctx->cuparse_ext;
> 
1001,1002c1015,1016
<     seq_pkt.payload = ctx->cuparse_ext.raw_seqhdr_data;
<     seq_pkt.payload_size = ctx->cuparse_ext.format.seqhdr_data_length;
---
>     seq_pkt.payload = ctx->cuparse_ext->raw_seqhdr_data;
>     seq_pkt.payload_size = ctx->cuparse_ext->format.seqhdr_data_length;
1061,1062c1075,1076
<     seq_pkt.payload = ctx->cuparse_ext.raw_seqhdr_data;
<     seq_pkt.payload_size = ctx->cuparse_ext.format.seqhdr_data_length;
---
>     seq_pkt.payload = ctx->cuparse_ext->raw_seqhdr_data;
>     seq_pkt.payload_size = ctx->cuparse_ext->format.seqhdr_data_length;
diff -r android/contrib/ffmpeg-x86/libavcodec/dca_lbr.c /tmp/ffmpeg-x86/libavcodec/dca_lbr.c
157c157
<         return -1;
---
>         return AVERROR_INVALIDDATA;
211c211
<         return -1;
---
>         return AVERROR_INVALIDDATA;
248a249,250
>     int ret;
> 
255,256c257,259
<     if (init_get_bits8(&s->gb, chunk->data, chunk->len) < 0)
<         return -1;
---
>     ret = init_get_bits8(&s->gb, chunk->data, chunk->len);
>     if (ret < 0)
>         return ret;
265c268
<     return -1;
---
>     return AVERROR_INVALIDDATA;
294c297
<                 return -1;
---
>                 return AVERROR_INVALIDDATA;
300c303
<                 return -1;
---
>                 return AVERROR_INVALIDDATA;
310c313
<                 return -1;
---
>                 return AVERROR_INVALIDDATA;
361c364
<     int sb, group;
---
>     int sb, group, ret;
366,367c369,372
<     if (init_get_bits8(&s->gb, chunk->data, chunk->len) < 0)
<         return -1;
---
>     ret = init_get_bits8(&s->gb, chunk->data, chunk->len);
> 
>     if (ret < 0)
>         return ret;
373c378
<             return -1;
---
>             return AVERROR_INVALIDDATA;
381,383c386,390
<         for (group = 0; group < 5; group++)
<             if (parse_tonal(s, group) < 0)
<                 return -1;
---
>         for (group = 0; group < 5; group++) {
>             ret = parse_tonal(s, group);
>             if (ret < 0)
>                 return ret;
>         }
389a397,398
>     int ret;
> 
393,394c402,404
<     if (init_get_bits8(&s->gb, chunk->data, chunk->len) < 0)
<         return -1;
---
>     ret = init_get_bits8(&s->gb, chunk->data, chunk->len);
>     if (ret < 0)
>         return ret;
407c417
<         return -1;
---
>         return AVERROR_INVALIDDATA;
436c446
<             return -1;
---
>             return AVERROR_INVALIDDATA;
501c511
<     int ch, sb, sf, nsubbands;
---
>     int ch, sb, sf, nsubbands, ret;
506,507c516,518
<     if (init_get_bits8(&s->gb, chunk->data, chunk->len) < 0)
<         return -1;
---
>     ret = init_get_bits8(&s->gb, chunk->data, chunk->len);
>     if (ret < 0)
>         return ret;
512,516c523,530
<         if (parse_scale_factors(s, s->grid_1_scf[ch1][sb]) < 0)
<             return -1;
<         if (ch1 != ch2 && ff_dca_grid_1_to_scf[sb] < s->min_mono_subband
<             && parse_scale_factors(s, s->grid_1_scf[ch2][sb]) < 0)
<             return -1;
---
>         ret = parse_scale_factors(s, s->grid_1_scf[ch1][sb]);
>         if (ret < 0)
>             return ret;
>         if (ch1 != ch2 && ff_dca_grid_1_to_scf[sb] < s->min_mono_subband) {
>             ret = parse_scale_factors(s, s->grid_1_scf[ch2][sb]);
>             if (ret < 0)
>                 return ret;
>         }
535c549
<         return -1;
---
>         return AVERROR_INVALIDDATA;
565c579
<     int sb, nsubbands;
---
>     int sb, nsubbands, ret;
570,572c584,588
<         if (ff_dca_grid_1_to_scf[sb] >= s->min_mono_subband
<             && parse_scale_factors(s, s->grid_1_scf[ch2][sb]) < 0)
<             return -1;
---
>         if (ff_dca_grid_1_to_scf[sb] >= s->min_mono_subband) {
>             ret = parse_scale_factors(s, s->grid_1_scf[ch2][sb]);
>             if (ret < 0)
>                 return ret;
>         }
712c728
<             return -1;
---
>             return AVERROR_INVALIDDATA;
734c750
<             return -1;
---
>             return AVERROR_INVALIDDATA;
795c811
<     int sb, ch, ol, st, max_sb, profile;
---
>     int sb, ch, ol, st, max_sb, profile, ret;
800,801c816,818
<     if (init_get_bits8(&s->gb, chunk->data, chunk->len) < 0)
<         return -1;
---
>     ret = init_get_bits8(&s->gb, chunk->data, chunk->len);
>     if (ret < 0)
>         return ret;
835,836c852,854
<     if (parse_lpc(s, ch1, ch2, 0, 2) < 0)
<         return -1;
---
>     ret = parse_lpc(s, ch1, ch2, 0, 2);
>     if (ret < 0)
>         return ret;
839,840c857,859
<     if (parse_ts(s, ch1, ch2, 0, 2, 0) < 0)
<         return -1;
---
>     ret = parse_ts(s, ch1, ch2, 0, 2, 0);
>     if (ret < 0)
>         return ret;
845,846c864,865
<             if (parse_scale_factors(s, s->grid_1_scf[ch][sb]) < 0)
<                 return -1;
---
>             if ((ret = parse_scale_factors(s, s->grid_1_scf[ch][sb])) < 0)
>                 return ret;
894a914
>     int ret;
897,906c917,926
<     if (init_get_bits8(&s->gb, chunk->data, chunk->len) < 0)
<         return -1;
<     if (parse_lpc(s, ch1, ch2, 2, 3) < 0)
<         return -1;
<     if (parse_ts(s, ch1, ch2, 2, 4, 0) < 0)
<         return -1;
<     if (parse_grid_2(s, ch1, ch2, 0, 1, 0) < 0)
<         return -1;
<     if (parse_ts(s, ch1, ch2, 4, 6, 0) < 0)
<         return -1;
---
>     if ((ret = init_get_bits8(&s->gb, chunk->data, chunk->len)) < 0)
>         return ret;
>     if ((ret = parse_lpc(s, ch1, ch2, 2, 3)) < 0)
>         return ret;
>     if ((ret = parse_ts(s, ch1, ch2, 2, 4, 0)) < 0)
>         return ret;
>     if ((ret = parse_grid_2(s, ch1, ch2, 0, 1, 0)) < 0)
>         return ret;
>     if ((ret = parse_ts(s, ch1, ch2, 4, 6, 0)) < 0)
>         return ret;
911a932,933
>     int ret;
> 
914,919c936,941
<     if (init_get_bits8(&s->gb, chunk->data, chunk->len) < 0)
<         return -1;
<     if (parse_grid_2(s, ch1, ch2, 1, 3, 0) < 0)
<         return -1;
<     if (parse_ts(s, ch1, ch2, 6, s->max_mono_subband, 0) < 0)
<         return -1;
---
>     if ((ret = init_get_bits8(&s->gb, chunk->data, chunk->len)) < 0)
>         return ret;
>     if ((ret = parse_grid_2(s, ch1, ch2, 1, 3, 0)) < 0)
>         return ret;
>     if ((ret = parse_ts(s, ch1, ch2, 6, s->max_mono_subband, 0)) < 0)
>         return ret;
921,924c943,946
<         if (parse_grid_1_sec_ch(s, ch2) < 0)
<             return -1;
<         if (parse_grid_2(s, ch1, ch2, 0, 3, 1) < 0)
<             return -1;
---
>         if ((ret = parse_grid_1_sec_ch(s, ch2)) < 0)
>             return ret;
>         if ((ret = parse_grid_2(s, ch1, ch2, 0, 3, 1)) < 0)
>             return ret;
926,927c948,949
<     if (parse_ts(s, ch1, ch2, s->min_mono_subband, s->nsubbands, 1) < 0)
<         return -1;
---
>     if ((ret = parse_ts(s, ch1, ch2, s->min_mono_subband, s->nsubbands, 1)) < 0)
>         return ret;
934a957
>     int ret;
938,939c961,963
<     if (ff_mdct_init(&s->imdct, s->freq_range + 6, 1, scale) < 0)
<         return -1;
---
>     ret = ff_mdct_init(&s->imdct, s->freq_range + 6, 1, scale);
>     if (ret < 0)
>         return ret;
978c1002
<         return -1;
---
>         return AVERROR(ENOMEM);
1799c1823
<         return -1;
---
>         return AVERROR(ENOMEM);
diff -r android/contrib/ffmpeg-x86/libavcodec/dds.c /tmp/ffmpeg-x86/libavcodec/dds.c
615a616
>     int width, height;
634,636c635,637
<     avctx->height = bytestream2_get_le32(gbc);
<     avctx->width  = bytestream2_get_le32(gbc);
<     ret = av_image_check_size(avctx->width, avctx->height, 0, avctx);
---
>     height = bytestream2_get_le32(gbc);
>     width  = bytestream2_get_le32(gbc);
>     ret = ff_set_dimensions(avctx, width, height);
diff -r android/contrib/ffmpeg-x86/libavcodec/decode.c /tmp/ffmpeg-x86/libavcodec/decode.c
755a756,760
>     if (avci->draining_done && pkt && pkt->size != 0) {
>         av_log(avctx, AV_LOG_WARNING, "Got unexpected packet after EOF\n");
>         avcodec_flush_buffers(avctx);
>     }
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/dfa.c /tmp/ffmpeg-x86/libavcodec/dfa.c
44c44
<     if (!avctx->width || !avctx->height)
---
>     if (!avctx->width || !avctx->height || FFMAX(avctx->width, avctx->height) >= (1<<16))
355a356,357
>         if (bytestream2_get_bytes_left(&gb) < 12)
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/diracdec.c /tmp/ffmpeg-x86/libavcodec/diracdec.c
143c143
<     int frame_number;           /* number of the next frame to display       */
---
>     int64_t frame_number;       /* number of the next frame to display       */
511c511
<         int quant = b->quant;
---
>         int quant;
513c513
<             quant += dirac_get_arith_int(c, CTX_DELTA_Q_F, CTX_DELTA_Q_DATA);
---
>             quant = dirac_get_arith_int(c, CTX_DELTA_Q_F, CTX_DELTA_Q_DATA);
515,516c515,516
<             quant += dirac_get_se_golomb(gb);
<         if (quant < 0) {
---
>             quant = dirac_get_se_golomb(gb);
>         if (quant > INT_MAX - b->quant || b->quant + quant < 0) {
520c520
<         b->quant = quant;
---
>         b->quant += quant;
669a670,673
>                 if (b->quant > (DIRAC_MAX_QUANT_INDEX - 1)) {
>                     av_log(s->avctx, AV_LOG_ERROR, "Unsupported quant %d\n", b->quant);
>                     b->quant = 0;
>                 }
987a992,995
>                 if (bytes >= INT_MAX || bytes*8 > bufsize) {
>                     av_log(s->avctx, AV_LOG_ERROR, "too many bytes\n");
>                     return AVERROR_INVALIDDATA;
>                 }
1245c1253,1258
<         if (s->num_x * s->num_y == 0 || s->num_x * (uint64_t)s->num_y > INT_MAX) {
---
>         if (s->num_x * s->num_y == 0 || s->num_x * (uint64_t)s->num_y > INT_MAX ||
>             s->num_x * (uint64_t)s->avctx->width  > INT_MAX ||
>             s->num_y * (uint64_t)s->avctx->height > INT_MAX ||
>             s->num_x > s->avctx->width ||
>             s->num_y > s->avctx->height
>         ) {
1400,1402c1413,1415
<     int m       = (1<<ep) - (c[0]*x + c[1]*y);
<     int mx      = m * ((A[0][0] * x + A[0][1]*y) + (1<<ez) * b[0]);
<     int my      = m * ((A[1][0] * x + A[1][1]*y) + (1<<ez) * b[1]);
---
>     int64_t m   = (1<<ep) - (c[0]*(int64_t)x + c[1]*(int64_t)y);
>     int64_t mx  = m * (int64_t)((A[0][0] * (int64_t)x + A[0][1]*(int64_t)y) + (1LL<<ez) * b[0]);
>     int64_t my  = m * (int64_t)((A[1][0] * (int64_t)x + A[1][1]*(int64_t)y) + (1LL<<ez) * b[1]);
1439,1440c1452,1453
<                 block->u.mv[i][0] += dirac_get_arith_int(arith + 4 + 2 * i, CTX_MV_F1, CTX_MV_DATA);
<                 block->u.mv[i][1] += dirac_get_arith_int(arith + 5 + 2 * i, CTX_MV_F1, CTX_MV_DATA);
---
>                 block->u.mv[i][0] += (unsigned)dirac_get_arith_int(arith + 4 + 2 * i, CTX_MV_F1, CTX_MV_DATA);
>                 block->u.mv[i][1] += (unsigned)dirac_get_arith_int(arith + 5 + 2 * i, CTX_MV_F1, CTX_MV_DATA);
2305c2318
<         s->frame_number = picture->display_picture_number + 1;
---
>         s->frame_number = picture->display_picture_number + 1LL;
diff -r android/contrib/ffmpeg-x86/libavcodec/diracdsp.c /tmp/ffmpeg-x86/libavcodec/diracdsp.c
162,165c162,165
<             dst[x  ] = av_clip_uintp2(src[x  ] + (1 << (PX - 1)), PX);                                  \
<             dst[x+1] = av_clip_uintp2(src[x+1] + (1 << (PX - 1)), PX);                                  \
<             dst[x+2] = av_clip_uintp2(src[x+2] + (1 << (PX - 1)), PX);                                  \
<             dst[x+3] = av_clip_uintp2(src[x+3] + (1 << (PX - 1)), PX);                                  \
---
>             dst[x  ] = av_clip_uintp2(src[x  ] + (1U << (PX - 1)), PX);                                  \
>             dst[x+1] = av_clip_uintp2(src[x+1] + (1U << (PX - 1)), PX);                                  \
>             dst[x+2] = av_clip_uintp2(src[x+2] + (1U << (PX - 1)), PX);                                  \
>             dst[x+3] = av_clip_uintp2(src[x+3] + (1U << (PX - 1)), PX);                                  \
diff -r android/contrib/ffmpeg-x86/libavcodec/dirac_dwt.h /tmp/ffmpeg-x86/libavcodec/dirac_dwt.h
96c96
<     (b1 - ((int)(b0 + (unsigned)(b2) + 2) >> 2))
---
>     (b1 - (unsigned)((int)(b0 + (unsigned)(b2) + 2) >> 2))
99c99
<     (b1 + ((int)(b0 + (unsigned)(b2) + 1) >> 1))
---
>     (b1 + (unsigned)((int)(b0 + (unsigned)(b2) + 1) >> 1))
102c102
<     (b2 + ((int)(-b0 + 9U*b1 + 9U*b3 - b4 + 8) >> 4))
---
>     (int)(((unsigned)(b2) + ((int)(9U*b1 + 9U*b3 - b4 - b0 +  8) >> 4)))
105c105
<     (b2 - ((-b0 + 9*b1 + 9*b3 - b4 + 16) >> 5))
---
>     (int)(((unsigned)(b2) - ((int)(9U*b1 + 9U*b3 - b4 - b0 + 16) >> 5)))
108c108
<     (b0 - ((b1 + 1) >> 1))
---
>     ((int)(b0 - (unsigned)((int)(b1 + 1U) >> 1)))
111c111
<     (b0 + b1)
---
>     ((int)(b0 + (unsigned)(b1)))
114c114
<     (b4 - ((int)(-8*(b0+(unsigned)b8) + 21*(b1+(unsigned)b7) - 46*(b2+(unsigned)b6) + 161*(b3+(unsigned)b5) + 128) >> 8))
---
>     ((unsigned)b4 - ((int)(-8*(b0+(unsigned)b8) + 21*(b1+(unsigned)b7) - 46*(b2+(unsigned)b6) + 161*(b3+(unsigned)b5) + 128) >> 8))
117c117
<     (b4 + ((int)(-2*(b0+(unsigned)b8) + 10*(b1+(unsigned)b7) - 25*(b2+(unsigned)b6) +  81*(b3+(unsigned)b5) + 128) >> 8))
---
>     ((unsigned)b4 + ((int)(-2*(b0+(unsigned)b8) + 10*(b1+(unsigned)b7) - 25*(b2+(unsigned)b6) +  81*(b3+(unsigned)b5) + 128) >> 8))
120c120
<     (b1 - ((int)(1817*(b0 + (unsigned)b2) + 2048) >> 12))
---
>     ((unsigned)(b1) - ((int)(1817*(b0 + (unsigned)b2) + 2048) >> 12))
123c123
<     (b1 - ((int)( 113*(b0 + (unsigned)b2) + 64) >> 7))
---
>     ((unsigned)(b1) - ((int)( 113*(b0 + (unsigned)b2) + 64) >> 7))
126c126
<     (b1 + ((int)( 217*(b0 + (unsigned)b2) + 2048) >> 12))
---
>     ((unsigned)(b1) + ((int)( 217*(b0 + (unsigned)b2) + 2048) >> 12))
129c129
<     (b1 + ((int)(6497*(b0 + (unsigned)b2) + 2048) >> 12))
---
>     ((unsigned)(b1) + ((int)(6497*(b0 + (unsigned)b2) + 2048) >> 12))
diff -r android/contrib/ffmpeg-x86/libavcodec/dirac_dwt_template.c /tmp/ffmpeg-x86/libavcodec/dirac_dwt_template.c
52c52
<         b1[i] -= (int)(b0[i] + (unsigned)b2[i] + 2) >> 2;
---
>         b1[i] -= (unsigned)((int)(b0[i] + (unsigned)b2[i] + 2) >> 2);
60,61c60,61
<         dst[2*i  ] = (src0[i] + add) >> shift;
<         dst[2*i+1] = (src1[i] + add) >> shift;
---
>         dst[2*i  ] = ((int)(src0[i] + (unsigned)add)) >> shift;
>         dst[2*i+1] = ((int)(src1[i] + (unsigned)add)) >> shift;
98,99c98,99
<         b[2*x  ] = (tmp[x] + 1)>>1;
<         b[2*x+1] = (COMPOSE_DD97iH0(tmp[x-1], tmp[x], b[x+w2], tmp[x+1], tmp[x+2]) + 1)>>1;
---
>         b[2*x  ] = ((int)(tmp[x] + 1U))>>1;
>         b[2*x+1] = ((int)(COMPOSE_DD97iH0(tmp[x-1], tmp[x], b[x+w2], tmp[x+1], tmp[x+2]) + 1U))>>1;
121,122c121,122
<         b[2*x  ] = (tmp[x] + 1)>>1;
<         b[2*x+1] = (COMPOSE_DD97iH0(tmp[x-1], tmp[x], b[x+w2], tmp[x+1], tmp[x+2]) + 1)>>1;
---
>         b[2*x  ] = ((int)(tmp[x] + 1U))>>1;
>         b[2*x+1] = ((int)(COMPOSE_DD97iH0(tmp[x-1], tmp[x], b[x+w2], tmp[x+1], tmp[x+2]) + 1U))>>1;
193c193
<     b[0] = (b0 + 1) >> 1;
---
>     b[0] = ~((~b0) >> 1);
197,198c197,198
<         b[2*x-1] = (b1 + 1) >> 1;
<         b[2*x  ] = (b2 + 1) >> 1;
---
>         b[2*x-1] = ~((~b1) >> 1);
>         b[2*x  ] = ~((~b2) >> 1);
201c201
<     b[w-1] = (COMPOSE_DAUB97iH0(b2, temp[w-1], b2) + 1) >> 1;
---
>     b[w-1] = ~((~COMPOSE_DAUB97iH0(b2, temp[w-1], b2)) >> 1);
diff -r android/contrib/ffmpeg-x86/libavcodec/dirac_parser.c /tmp/ffmpeg-x86/libavcodec/dirac_parser.c
215c215
<             int pts = AV_RB32(cur_pu + 13);
---
>             int64_t pts = AV_RB32(cur_pu + 13);
diff -r android/contrib/ffmpeg-x86/libavcodec/dnxhddec.c /tmp/ffmpeg-x86/libavcodec/dnxhddec.c
383a384,387
>     if (len < 0) {
>         ret = len;
>         goto error;
>     }
437c441
< 
---
> error:
diff -r android/contrib/ffmpeg-x86/libavcodec/dnxhdenc.c /tmp/ffmpeg-x86/libavcodec/dnxhdenc.c
223c223
<             int index = (level << 1) | run;
---
>             int index = level * (1 << 1) | run;
619c619
<             int rlevel = (slevel << 1) | !!run_level;
---
>             int rlevel = slevel * (1 << 1) | !!run_level;
699c699
<             bits += ctx->vlc_bits[(level << 1) |
---
>             bits += ctx->vlc_bits[level * (1 << 1) |
diff -r android/contrib/ffmpeg-x86/libavcodec/dnxhd_parser.c /tmp/ffmpeg-x86/libavcodec/dnxhd_parser.c
81a82
>                 remaining += i - 47;
83,85c84
<                 if (buf_size - i + 47 >= dctx->remaining) {
<                     int remaining = dctx->remaining;
< 
---
>                 if (buf_size >= dctx->remaining) {
diff -r android/contrib/ffmpeg-x86/libavcodec/dpcm.c /tmp/ffmpeg-x86/libavcodec/dpcm.c
308,310c308,309
<             /* saturate the shifter to a lower limit of 0 */
<             if (shift[ch] < 0)
<                 shift[ch] = 0;
---
>             /* saturate the shifter to 0..31 */
>             shift[ch] = av_clip_uintp2(shift[ch], 5);
370c369
<             *output_samples++ = s->sample[idx] += s->array[n];
---
>             *output_samples++ = s->sample[idx] += (unsigned)s->array[n];
diff -r android/contrib/ffmpeg-x86/libavcodec/dsddec.c /tmp/ffmpeg-x86/libavcodec/dsddec.c
46a47,49
>     if (!avctx->channels)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/dsicinvideo.c /tmp/ffmpeg-x86/libavcodec/dsicinvideo.c
160a161,163
>     if (dst_end - dst > dst_size - dst_size/10)
>         return AVERROR_INVALIDDATA;
> 
186a190,193
> 
>     if (dst_end - dst > dst_size - dst_size/10)
>         return AVERROR_INVALIDDATA;
> 
229c236
<         cin_decode_rle(buf, bitmap_frame_size,
---
>         res =  cin_decode_rle(buf, bitmap_frame_size,
230a238,239
>         if (res < 0)
>             return res;
233c242
<         cin_decode_rle(buf, bitmap_frame_size,
---
>         res =  cin_decode_rle(buf, bitmap_frame_size,
234a244,245
>         if (res < 0)
>             return res;
241c252
<         cin_decode_rle(cin->bitmap_table[CIN_INT_BMP], bitmap_frame_size,
---
>         res =  cin_decode_rle(cin->bitmap_table[CIN_INT_BMP], bitmap_frame_size,
242a254,255
>         if (res < 0)
>             return res;
248c261
<         cin_decode_rle(cin->bitmap_table[CIN_INT_BMP], bitmap_frame_size,
---
>         res = cin_decode_rle(cin->bitmap_table[CIN_INT_BMP], bitmap_frame_size,
249a263,264
>         if (res < 0)
>             return res;
diff -r android/contrib/ffmpeg-x86/libavcodec/dstdec.c /tmp/ffmpeg-x86/libavcodec/dstdec.c
40c40
< #define DSD_FS44(sample_rate) (sample_rate * 8 / 44100)
---
> #define DSD_FS44(sample_rate) (sample_rate * 8LL / 44100)
87a88,97
>     // the sample rate is only allowed to be 64,128,256 * 44100 by ISO/IEC 14496-3:2005(E)
>     // We are a bit more tolerant here, but this check is needed to bound the size and duration
>     if (avctx->sample_rate > 512 * 44100)
>         return AVERROR_INVALIDDATA;
> 
> 
>     if (DST_SAMPLES_PER_FRAME(avctx->sample_rate) & 7) {
>         return AVERROR_PATCHWELCOME;
>     }
> 
123c133
<     int v = get_ur_golomb(gb, k, get_bits_left(gb), 0);
---
>     int v = get_ur_golomb_jpegls(gb, k, get_bits_left(gb), 0);
158c168
<                     x += code_pred_coeff[method][k] * t->coeff[i][j - k - 1];
---
>                     x += code_pred_coeff[method][k] * (unsigned)t->coeff[i][j - k - 1];
163a174,177
>                 if (!is_signed) {
>                     if (c < offset || c >= offset + (1<<coeff_bits))
>                         return AVERROR_INVALIDDATA;
>                 }
301c315,317
<     read_table(gb, &s->fsets, fsets_code_pred_coeff, 7, 9, 1, 0);
---
>     ret = read_table(gb, &s->fsets, fsets_code_pred_coeff, 7, 9, 1, 0);
>     if (ret < 0)
>         return ret;
305c321,323
<     read_table(gb, &s->probs, probs_code_pred_coeff, 6, 7, 0, 1);
---
>     ret = read_table(gb, &s->probs, probs_code_pred_coeff, 6, 7, 0, 1);
>     if (ret < 0)
>         return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/dvbsubdec.c /tmp/ffmpeg-x86/libavcodec/dvbsubdec.c
1244a1245,1251
>         if (display->x_pos >= region->width ||
>             display->y_pos >= region->height) {
>             av_log(avctx, AV_LOG_ERROR, "Object outside region\n");
>             av_free(display);
>             return AVERROR_INVALIDDATA;
>         }
> 
1549,1550c1556,1558
<         avctx->width  = display_def->width;
<         avctx->height = display_def->height;
---
>         int ret = ff_set_dimensions(avctx, display_def->width, display_def->height);
>         if (ret < 0)
>             return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/dvdsubdec.c /tmp/ffmpeg-x86/libavcodec/dvdsubdec.c
85,88c85
<     if (get_bits1(gb))
<         *color = get_bits(gb, 8);
<     else
<         *color = get_bits(gb, 2);
---
>     *color = get_bits(gb, 2 + 6*get_bits1(gb));
129a127,128
>         if (len != INT_MAX && len > w - x)
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/dvdsub_parser.c /tmp/ffmpeg-x86/libavcodec/dvdsub_parser.c
46a47,49
>     *poutbuf      = buf;
>     *poutbuf_size = buf_size;
> 
57c60,64
<         pc->packet = av_malloc(pc->packet_len);
---
>         if ((unsigned)pc->packet_len > INT_MAX - AV_INPUT_BUFFER_PADDING_SIZE) {
>             av_log(avctx, AV_LOG_ERROR, "packet length %d is invalid\n", pc->packet_len);
>             return buf_size;
>         }
>         pc->packet = av_malloc(pc->packet_len + AV_INPUT_BUFFER_PADDING_SIZE);
diff -r android/contrib/ffmpeg-x86/libavcodec/dxtory.c /tmp/ffmpeg-x86/libavcodec/dxtory.c
308,312c308
<         av_log(avctx, AV_LOG_VERBOSE,
<                "Not enough slice data available, "
<                "cropping the frame by %d pixels\n",
<                 avctx->height - line);
<         avctx->height = line;
---
>         avpriv_request_sample(avctx, "Not enough slice data available");
329c325
<     for (y = 0; y < left && get_bits_left(gb) > 16; y++) {
---
>     for (y = 0; y < left && get_bits_left(gb) > 6 * width; y++) {
395c391
<     for (y = 0; y < left && get_bits_left(gb) > 16; y++) {
---
>     for (y = 0; y < left && get_bits_left(gb) > 6 * width; y++) {
440c436
<     for (y = 0; y < left - 3 && get_bits_left(gb) > 16; y += 4) {
---
>     for (y = 0; y < left - 3 && get_bits_left(gb) > 9 * width; y += 4) {
484c480
<     for (y = 0; y < left - 1 && get_bits_left(gb) > 16; y += 2) {
---
>     for (y = 0; y < left - 1 && get_bits_left(gb) > 6 * width; y += 2) {
527c523
<     for (y = 0; y < left && get_bits_left(gb) > 16; y++) {
---
>     for (y = 0; y < left && get_bits_left(gb) > 6 * width; y++) {
diff -r android/contrib/ffmpeg-x86/libavcodec/eatgv.c /tmp/ffmpeg-x86/libavcodec/eatgv.c
302a303,305
>         if (buf_end - buf < 5) {
>             return AVERROR_INVALIDDATA;
>         }
diff -r android/contrib/ffmpeg-x86/libavcodec/eatqi.c /tmp/ffmpeg-x86/libavcodec/eatqi.c
133a134,136
>     if (buf_size < 12)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/elsdec.c /tmp/ffmpeg-x86/libavcodec/elsdec.c
274c274
<     av_free(rung->rem_rung_list);
---
>     av_freep(&rung->rem_rung_list);
394c394
<                     ur->rem_rung_list = av_realloc(ur->rem_rung_list,
---
>                     ctx->err = av_reallocp(&ur->rem_rung_list,
397,399c397
<                     if (!ur->rem_rung_list) {
<                         av_free(ur->rem_rung_list);
<                         ctx->err = AVERROR(ENOMEM);
---
>                     if (ctx->err < 0) {
diff -r android/contrib/ffmpeg-x86/libavcodec/error_resilience.c /tmp/ffmpeg-x86/libavcodec/error_resilience.c
111c111
<             dc = (dc * 10923 + 32768) >> 16;
---
>             dc = (av_clip(dc, INT_MIN/10923, INT_MAX/10923 - 32768) * 10923 + 32768) >> 16;
127c127
<             dc = (dc * 10923 + 32768) >> 16;
---
>             dc = (av_clip(dc, INT_MIN/10923, INT_MAX/10923 - 32768) * 10923 + 32768) >> 16;
441c441
<         num_avail <= mb_width / 2) {
---
>         num_avail <= FFMAX(mb_width, mb_height) / 2) {
diff -r android/contrib/ffmpeg-x86/libavcodec/escape124.c /tmp/ffmpeg-x86/libavcodec/escape124.c
224c224,228
<     if (get_bits_left(&gb) < 64)
---
>     // Check if the amount we will read minimally is available on input.
>     // The 64 represent the immediately next 2 frame_* elements read, the 23/4320
>     // represent a lower bound of the space needed for skipped superblocks. Non
>     // skipped SBs need more space.
>     if (get_bits_left(&gb) < 64 + s->num_superblocks * 23LL / 4320)
diff -r android/contrib/ffmpeg-x86/libavcodec/exr.c /tmp/ffmpeg-x86/libavcodec/exr.c
561c561
<         if (pl.len) {
---
>         if (pl.len && lc >= pl.len) {
858c858
<                     uint32_t diff = (*(ptr[0]++) << 24) |
---
>                     uint32_t diff = ((unsigned)*(ptr[0]++) << 24) |
884c884
<                     uint32_t diff = (*(ptr[0]++) << 24) |
---
>                     uint32_t diff = ((uint32_t)*(ptr[0]++) << 24) |
902c902
<     unsigned short shift = (b[ 2] >> 2);
---
>     unsigned short shift = (b[ 2] >> 2) & 15;
1054c1054
<         if (line_offset > buf_size - 20)
---
>         if (buf_size < 20 || line_offset > buf_size - 20)
1065c1065
<         if (data_size <= 0 || data_size > buf_size)
---
>         if (data_size <= 0 || data_size > buf_size - line_offset - 20)
1098c1098
<         if (line_offset > buf_size - 8)
---
>         if (buf_size < 8 || line_offset > buf_size - 8)
1108c1108
<         if (data_size <= 0 || data_size > buf_size)
---
>         if (data_size <= 0 || data_size > buf_size - line_offset - 8)
1308a1309,1310
>     int ret;
>     int dup_channels = 0;
1367,1368c1369,1372
<             if (!var_size)
<                 return AVERROR_INVALIDDATA;
---
>             if (!var_size) {
>                 ret = AVERROR_INVALIDDATA;
>                 goto fail;
>             }
1386a1391
>                         layer_match = 0;
1427c1432,1433
<                     return AVERROR_INVALIDDATA;
---
>                     ret = AVERROR_INVALIDDATA;
>                     goto fail;
1434c1440,1441
<                     return AVERROR_PATCHWELCOME;
---
>                     ret = AVERROR_PATCHWELCOME;
>                     goto fail;
1445c1452,1453
<                     return AVERROR_PATCHWELCOME;
---
>                     ret = AVERROR_PATCHWELCOME;
>                     goto fail;
1453c1461,1462
<                         return AVERROR_INVALIDDATA;
---
>                         ret = AVERROR_INVALIDDATA;
>                         goto fail;
1456a1466,1472
>                 } else if (channel_index >= 0) {
>                     av_log(s->avctx, AV_LOG_WARNING,
>                             "Multiple channels with index %d.\n", channel_index);
>                     if (++dup_channels > 10) {
>                         ret = AVERROR_INVALIDDATA;
>                         goto fail;
>                     }
1461,1462c1477,1480
<                 if (!s->channels)
<                     return AVERROR(ENOMEM);
---
>                 if (!s->channels) {
>                     ret = AVERROR(ENOMEM);
>                     goto fail;
>                 }
1487c1505,1506
<                     return AVERROR_INVALIDDATA;
---
>                     ret = AVERROR_INVALIDDATA;
>                     goto fail;
1496,1497c1515,1518
<             if (!var_size)
<                 return AVERROR_INVALIDDATA;
---
>             if (!var_size) {
>                 ret = AVERROR_INVALIDDATA;
>                 goto fail;
>             }
1509,1510c1530,1533
<             if (!var_size)
<                 return AVERROR_INVALIDDATA;
---
>             if (!var_size) {
>                 ret = AVERROR_INVALIDDATA;
>                 goto fail;
>             }
1520,1521c1543,1546
<             if (!var_size)
<                 return AVERROR_INVALIDDATA;
---
>             if (!var_size) {
>                 ret = AVERROR_INVALIDDATA;
>                 goto fail;
>             }
1527c1552,1553
<                 return AVERROR_INVALIDDATA;
---
>                 ret = AVERROR_INVALIDDATA;
>                 goto fail;
1533,1534c1559,1562
<             if (!var_size)
<                 return AVERROR_INVALIDDATA;
---
>             if (!var_size) {
>                 ret = AVERROR_INVALIDDATA;
>                 goto fail;
>             }
1541,1542c1569,1572
<             if (!var_size)
<                 return AVERROR_INVALIDDATA;
---
>             if (!var_size) {
>                 ret = AVERROR_INVALIDDATA;
>                 goto fail;
>             }
1569c1599,1600
<                 return AVERROR_PATCHWELCOME;
---
>                 ret = AVERROR_PATCHWELCOME;
>                 goto fail;
1575c1606,1607
<                 return AVERROR_PATCHWELCOME;
---
>                 ret = AVERROR_PATCHWELCOME;
>                 goto fail;
1592c1624,1625
<             return AVERROR_INVALIDDATA;
---
>             ret = AVERROR_INVALIDDATA;
>             goto fail;
1607c1640,1641
<         return AVERROR_INVALIDDATA;
---
>         ret = AVERROR_INVALIDDATA;
>         goto fail;
1613c1647,1648
<             return AVERROR_INVALIDDATA;
---
>             ret = AVERROR_INVALIDDATA;
>             goto fail;
1619c1654,1655
<         return AVERROR_INVALIDDATA;
---
>         ret = AVERROR_INVALIDDATA;
>         goto fail;
1626a1663,1665
> fail:
>     av_dict_free(&metadata);
>     return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/extract_extradata_bsf.c /tmp/ffmpeg-x86/libavcodec/extract_extradata_bsf.c
81c81
<         return ret;
---
>         goto fail;
116a117
>         memset(extradata + extradata_size, 0, AV_INPUT_BUFFER_PADDING_SIZE);
139a141,142
> 
>             memset(pkt->data + pkt->size, 0, AV_INPUT_BUFFER_PADDING_SIZE);
171a175
>         memset(*data + extradata_size, 0, AV_INPUT_BUFFER_PADDING_SIZE);
201a206
>                 memset(*data + *size, 0, AV_INPUT_BUFFER_PADDING_SIZE);
230a236
>                 memset(*data + *size, 0, AV_INPUT_BUFFER_PADDING_SIZE);
diff -r android/contrib/ffmpeg-x86/libavcodec/ffv1dec.c /tmp/ffmpeg-x86/libavcodec/ffv1dec.c
881c881
<                 av_log(f->avctx, AV_LOG_ERROR, "CRC mismatch %X!", crc);
---
>                 av_log(f->avctx, AV_LOG_ERROR, "slice CRC mismatch %X!", crc);
diff -r android/contrib/ffmpeg-x86/libavcodec/ffv1enc.c /tmp/ffmpeg-x86/libavcodec/ffv1enc.c
541a542,545
>     // CRC requires version 3+
>     if (s->ec)
>         s->version = FFMAX(s->version, 3);
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/ffwavesynth.c /tmp/ffmpeg-x86/libavcodec/ffwavesynth.c
116c116
< static void lcg_seek(uint32_t *s, int64_t dt)
---
> static void lcg_seek(uint32_t *s, uint32_t dt)
120,127c120,121
<     if (dt >= 0) {
<         a = LCG_A;
<         c = LCG_C;
<     } else { /* coefficients for a step backward */
<         a = LCG_AI;
<         c = (uint32_t)(LCG_AI * LCG_C);
<         dt = -dt;
<     }
---
>     a = LCG_A;
>     c = LCG_C;
224c218
<     lcg_seek(&ws->dither_state, ts - ws->cur_ts);
---
>     lcg_seek(&ws->dither_state, (uint32_t)ts - (uint32_t)ws->cur_ts);
226,227c220,221
<         int64_t pink_ts_cur  = (ws->cur_ts + PINK_UNIT - 1) & ~(PINK_UNIT - 1);
<         int64_t pink_ts_next = ts & ~(PINK_UNIT - 1);
---
>         uint64_t pink_ts_cur  = (ws->cur_ts + (uint64_t)PINK_UNIT - 1) & ~(PINK_UNIT - 1);
>         uint64_t pink_ts_next = ts & ~(PINK_UNIT - 1);
229c223
<         lcg_seek(&ws->pink_state, (pink_ts_next - pink_ts_cur) << 1);
---
>         lcg_seek(&ws->pink_state, (uint32_t)(pink_ts_next - pink_ts_cur) * 2);
256c250
<     if (ws->nb_inter < 0)
---
>     if (ws->nb_inter < 0 || (edata_end - edata) / 24 < ws->nb_inter)
270c264,267
<         if (in->ts_start < cur_ts || in->ts_end <= in->ts_start)
---
>         if (in->ts_start < cur_ts ||
>             in->ts_end <= in->ts_start ||
>             (uint64_t)in->ts_end - in->ts_start > INT64_MAX
>         )
276c273
<                 if (edata_end - edata < 20)
---
>                 if (edata_end - edata < 20 || avc->sample_rate <= 0)
287c284
<                 in->ddphi = (dphi2 - dphi1) / dt;
---
>                 in->ddphi = (int64_t)(dphi2 - (uint64_t)dphi1) / dt;
307,308c304,305
<         in->amp0 = (int64_t)a1 << 32;
<         in->damp = (((int64_t)a2 << 32) - ((int64_t)a1 << 32)) / dt;
---
>         in->amp0 = (uint64_t)a1 << 32;
>         in->damp = (int64_t)(((uint64_t)a2 << 32) - ((uint64_t)a1 << 32)) / dt;
356c353,354
<     int32_t amp, val, *cv;
---
>     int32_t amp, *cv;
>     unsigned val;
383c381
<                 val = amp * pink;
---
>                 val = amp * (unsigned)pink;
391c389
<                 *cv += val;
---
>                 *cv += (unsigned)val;
449c447
<     for (s = 0; s < duration; s++, ts++) {
---
>     for (s = 0; s < duration; s++, ts+=(uint64_t)1) {
457c455
<     ws->cur_ts += duration;
---
>     ws->cur_ts += (uint64_t)duration;
diff -r android/contrib/ffmpeg-x86/libavcodec/fic.c /tmp/ffmpeg-x86/libavcodec/fic.c
84a85
> #define CURSOR_OFFSET 59
140a142,144
>     if (get_bits_left(gb) < 8)
>         return AVERROR_INVALIDDATA;
> 
339a344,347
>     if (!skip_cursor && avpkt->size < CURSOR_OFFSET + sizeof(ctx->cursor_buf)) {
>         skip_cursor = 1;
>     }
> 
377a386,387
>             if (slice_size < slice_off)
>                 return AVERROR_INVALIDDATA;
419c429
<         memcpy(ctx->cursor_buf, src + 59, 32 * 32 * 4);
---
>         memcpy(ctx->cursor_buf, src + CURSOR_OFFSET, sizeof(ctx->cursor_buf));
diff -r android/contrib/ffmpeg-x86/libavcodec/fits.c /tmp/ffmpeg-x86/libavcodec/fits.c
140a141,151
> 
>         switch(header->bitpix) {
>         case   8:
>         case  16:
>         case  32: case -32:
>         case  64: case -64: break;
>         default:
>             av_log(avcl, AV_LOG_ERROR, "invalid value of BITPIX %d\n", header->bitpix); \
>             return AVERROR_INVALIDDATA;
>         }
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/fitsdec.c /tmp/ffmpeg-x86/libavcodec/fitsdec.c
146c146
<         if (header->naxisn[i] > SIZE_MAX / size) {
---
>         if (size == 0 || header->naxisn[i] > SIZE_MAX / size) {
170a171,178
>     if (!header->rgb && header->data_min >= header->data_max) {
>         if (header->data_min > header->data_max) {
>             av_log(avctx, AV_LOG_ERROR, "data min/max (%g %g) is invalid\n", header->data_min, header->data_max);
>             return AVERROR_INVALIDDATA;
>         }
>         av_log(avctx, AV_LOG_WARNING, "data min/max indicates a blank image\n");
>         header->data_max ++;
>     }
258a267,273
>         double scale = header.data_max - header.data_min;
> 
>         if (scale <= 0 || !isfinite(scale)) {
>             scale = 1;
>         }
>         scale = 1/scale;
> 
267c282
<                     *dst++ = ((t - header.data_min) * ((1 << (sizeof(type) * 8)) - 1)) / (header.data_max - header.data_min); \
---
>                     *dst++ = ((t - header.data_min) * ((1 << (sizeof(type) * 8)) - 1)) * scale; \
diff -r android/contrib/ffmpeg-x86/libavcodec/flacdec.c /tmp/ffmpeg-x86/libavcodec/flacdec.c
301c301
<         d = c - decoded[pred_order-2] + 2*decoded[pred_order-3] - decoded[pred_order-4];
---
>         d = c - decoded[pred_order-2] + 2U*decoded[pred_order-3] - decoded[pred_order-4];
459c459
<     if (wasted) {
---
>     if (wasted && wasted < 32) {
diff -r android/contrib/ffmpeg-x86/libavcodec/flacdsp_template.c /tmp/ffmpeg-x86/libavcodec/flacdsp_template.c
69,70c69,70
<         int a = in[0][i];
<         int b = in[1][i];
---
>         unsigned a = in[0][i];
>         unsigned b = in[1][i];
83,84c83,84
<         int a = in[0][i];
<         int b = in[1][i];
---
>         unsigned a = in[0][i];
>         unsigned b = in[1][i];
97c97
<         int a = in[0][i];
---
>         unsigned a = in[0][i];
diff -r android/contrib/ffmpeg-x86/libavcodec/flac_parser.c /tmp/ffmpeg-x86/libavcodec/flac_parser.c
219,220c219,222
<         if ((AV_RB16(buf + i) & 0xFFFE) == 0xFFF8)
<             size = find_headers_search_validate(fpc, search_start + i);
---
>         if ((AV_RB16(buf + i) & 0xFFFE) == 0xFFF8) {
>             int ret = find_headers_search_validate(fpc, search_start + i);
>             size = FFMAX(size, ret);
>         }
227,228c229,232
<                 if ((AV_RB16(buf + i + j) & 0xFFFE) == 0xFFF8)
<                     size = find_headers_search_validate(fpc, search_start + i + j);
---
>                 if ((AV_RB16(buf + i + j) & 0xFFFE) == 0xFFF8) {
>                     int ret = find_headers_search_validate(fpc, search_start + i + j);
>                     size = FFMAX(size, ret);
>                 }
689,690c693
<         if (curr->max_score > 0 &&
<             (!fpc->best_header || curr->max_score > fpc->best_header->max_score)) {
---
>         if (!fpc->best_header || curr->max_score > fpc->best_header->max_score) {
692a696,701
>     }
> 
>     if (fpc->best_header && fpc->best_header->max_score <= 0) {
>         // Only accept a bad header if there is no other option to continue
>         if (!buf_size || !buf || read_end != buf || fpc->nb_headers_buffered < FLAC_MIN_HEADERS)
>             fpc->best_header = NULL;
diff -r android/contrib/ffmpeg-x86/libavcodec/flicvideo.c /tmp/ffmpeg-x86/libavcodec/flicvideo.c
178c178
<     signed short line_packets;
---
>     int line_packets;
277c277
<                 line_packets = bytestream2_get_le16(&g2);
---
>                 line_packets = sign_extend(bytestream2_get_le16(&g2), 16);
511c511
<     signed short line_packets;
---
>     int line_packets;
575c575
<                 line_packets = bytestream2_get_le16(&g2);
---
>                 line_packets = sign_extend(bytestream2_get_le16(&g2), 16);
809c809
<     signed short line_packets;
---
>     int line_packets;
873c873
<                 line_packets = bytestream2_get_le16(&g2);
---
>                 line_packets = sign_extend(bytestream2_get_le16(&g2), 16);
903c903
<                             CHECK_PIXEL_PTR(2 * byte_run);
---
>                             CHECK_PIXEL_PTR(3 * byte_run);
1027,1034c1027
<                     pixel_countdown = s->avctx->width;
<                     pixel_ptr = 0;
<                     while (pixel_countdown > 0) {
<                         pixel = bytestream2_get_le24(&g2);
<                         AV_WL24(&pixels[y_ptr + pixel_ptr], pixel);
<                         pixel_ptr += 3;
<                         pixel_countdown--;
<                     }
---
>                     bytestream2_get_buffer(&g2, pixels + y_ptr, 3*s->avctx->width);
diff -r android/contrib/ffmpeg-x86/libavcodec/fmvc.c /tmp/ffmpeg-x86/libavcodec/fmvc.c
405a406,408
>     if (avpkt->size < 8)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/g2meet.c /tmp/ffmpeg-x86/libavcodec/g2meet.c
30a31
> #include "libavutil/imgutils.h"
245a247,249
>     if (get_bits_left(gb) < 1)
>         return AVERROR_INVALIDDATA;
> 
558,559c562,563
<     if (R<0 || G<0 || B<0) {
<         av_log(NULL, AV_LOG_ERROR, "RGB %d %d %d is out of range\n", R, G, B);
---
>     if (R<0 || G<0 || B<0 || R > 255 || G > 255 || B > 255) {
>         avpriv_request_sample(NULL, "RGB %d %d %d is out of range\n", R, G, B);
855a860,862
>                         if (is_pixel_on_stack(dc, pix))
>                             return AVERROR_INVALIDDATA;
> 
912a920,924
>     if (tile_width > (1 << FF_ARRAY_ELEMS(c->ec.prev_row_rung))) {
>         avpriv_request_sample(avctx, "large tile width");
>         return AVERROR_INVALIDDATA;
>     }
> 
928a941
>             ff_els_decoder_uninit(&c->ec.unsigned_rung);
1357c1370,1371
<     if (y < 0) {
---
> 
>     if (y < 0)
1358a1373,1375
>     if (w < 0 || h < 0)
>         return;
>     if (y < 0) {
1363,1364d1379
<     if (w < 0 || h < 0)
<         return;
1454c1469,1470
<                 c->tile_width * (uint64_t)c->tile_height >= INT_MAX / 4
---
>                 c->tile_width * (uint64_t)c->tile_height >= INT_MAX / 4 ||
>                 av_image_check_size2(c->tile_width, c->tile_height, avctx->max_pixels, avctx->pix_fmt, 0, avctx) < 0
diff -r android/contrib/ffmpeg-x86/libavcodec/g723_1dec.c /tmp/ffmpeg-x86/libavcodec/g723_1dec.c
552c552
<         bits2 = FFMAX(0, bits2);
---
>         bits2 = av_clip_uintp2(bits2, 5);
670c670,672
<             t = p->sid_gain << shift;
---
>             t = p->sid_gain * (1 << shift);
>     } else if(shift < -31) {
>         t = (p->sid_gain < 0) ? -1 : 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/g729dec.c /tmp/ffmpeg-x86/libavcodec/g729dec.c
331c331
<     int res = 0;
---
>     int64_t res = 0;
335a336,338
>     if      (res > INT32_MAX) return INT32_MAX;
>     else if (res < INT32_MIN) return INT32_MIN;
> 
416c419
<     if (buf_size % 10 == 0) {
---
>     if (buf_size && buf_size % 10 == 0) {
diff -r android/contrib/ffmpeg-x86/libavcodec/g729_parser.c /tmp/ffmpeg-x86/libavcodec/g729_parser.c
53a54,59
>     if (!s->block_size) {
>         *poutbuf      = buf;
>         *poutbuf_size = buf_size;
>         return buf_size;
>     }
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/g729postfilter.c /tmp/ffmpeg-x86/libavcodec/g729postfilter.c
159c159
<             sig_scaled[i] = residual[i] << -shift;
---
>             sig_scaled[i] = (unsigned)residual[i] << -shift;
204,205c204,205
<             corr_int_den = adsp->scalarproduct_int16(sig_scaled - best_delay_int + RES_PREV_DATA_SIZE,
<                                                     sig_scaled - best_delay_int + RES_PREV_DATA_SIZE,
---
>             corr_int_den = adsp->scalarproduct_int16(sig_scaled + RES_PREV_DATA_SIZE - best_delay_int,
>                                                      sig_scaled + RES_PREV_DATA_SIZE - best_delay_int,
349c349
<         tmp = ((sh_gain_long_num - sh_gain_num) << 1) - (sh_gain_long_den - sh_gain_den);
---
>         tmp = ((sh_gain_long_num - sh_gain_num) * 2) - (sh_gain_long_den - sh_gain_den);
370c370
<                 selected_signal[i] <<= shift;
---
>                 selected_signal[i] *= 1 << shift;
467c467
<     return -(rh1 << 15) / rh0;
---
>     return -(rh1 * (1 << 15)) / rh0;
489,490c489,490
<         fact = 0x4000; // 0.5 in (0.15)
<         sh_fact = 15;
---
>         fact = 0x2000; // 0.5 in (0.15)
>         sh_fact = 14;
493,494c493,494
<         fact = 0x800; // 0.5 in (3.12)
<         sh_fact = 12;
---
>         fact = 0x400; // 0.5 in (3.12)
>         sh_fact = 11;
496c496
<     ga = (fact << 15) / av_clip_int16(32768 - FFABS(gt));
---
>     ga = (fact << 16) / av_clip_int16(32768 - FFABS(gt));
503,504c503,504
<         tmp2 = (res_pst[i] << 15) + ((gt * res_pst[i-1]) << 1);
<         tmp2 = (tmp2 + 0x4000) >> 15;
---
>         tmp2 = (gt * res_pst[i-1]) * 2 + 0x4000;
>         tmp2 = res_pst[i] + (tmp2 >> 15);
506c506
<         tmp2 = (tmp2 * ga * 2 + fact) >> sh_fact;
---
>         tmp2 = (tmp2 * ga + fact) >> sh_fact;
509,511c509,511
<     tmp2 = (res_pst[0] << 15) + ((gt * ht_prev_data) << 1);
<     tmp2 = (tmp2 + 0x4000) >> 15;
<     tmp2 = (tmp2 * ga * 2 + fact) >> sh_fact;
---
>     tmp2 = (gt * ht_prev_data) * 2 + 0x4000;
>     tmp2 = res_pst[0] + (tmp2 >> 15);
>     tmp2 = (tmp2 * ga + fact) >> sh_fact;
602a603
>         gain = av_clip_int16(gain);
diff -r android/contrib/ffmpeg-x86/libavcodec/gdv.c /tmp/ffmpeg-x86/libavcodec/gdv.c
88c88
<                 dst[PREAMBLE_SIZE + x + y * w] = dst[PREAMBLE_SIZE + x/2 + (y/2) * (w/2)];
---
>                 dst[PREAMBLE_SIZE + x + y * w] = dst[PREAMBLE_SIZE + (x>>1) + (y>>1) * (w>>1)];
95c95
<                 dst[PREAMBLE_SIZE + x + y * w] = dst[PREAMBLE_SIZE + x + (y/2) * w];
---
>                 dst[PREAMBLE_SIZE + x + y * w] = dst[PREAMBLE_SIZE + x + (y>>1) * w];
103c103
<                 dst[PREAMBLE_SIZE + x + y * w] = dst[PREAMBLE_SIZE + x/2 + y * (w/2)];
---
>                 dst[PREAMBLE_SIZE + x + y * w] = dst[PREAMBLE_SIZE + (x>>1) + y * (w>>1)];
109,111c109,111
<         for (y = 0; y < h/2; y++) {
<             for (x = 0; x < w/2; x++) {
<                 dst[PREAMBLE_SIZE + x + y * (w/2)] = dst[PREAMBLE_SIZE + x*2 + y*2 * w];
---
>         for (y = 0; y < (h>>1); y++) {
>             for (x = 0; x < (w>>1); x++) {
>                 dst[PREAMBLE_SIZE + x + y * (w>>1)] = dst[PREAMBLE_SIZE + x*2 + y*2 * w];
115c115
<         for (y = 0; y < h/2; y++) {
---
>         for (y = 0; y < (h>>1); y++) {
122c122
<             for (x = 0; x < w/2; x++) {
---
>             for (x = 0; x < (w>>1); x++) {
246a247,248
>         if (bytestream2_get_bytes_left(gb) < 1)
>             return AVERROR_INVALIDDATA;
307c309,310
<                     assert(lbits < 16);
---
>                     if (lbits >= 16)
>                         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/get_bits.h /tmp/ffmpeg-x86/libavcodec/get_bits.h
34a35
> #include "avcodec.h"
431c432
<     if (bit_size >= INT_MAX - 7 || bit_size < 0 || !buffer) {
---
>     if (bit_size >= INT_MAX - FFMAX(7, AV_INPUT_BUFFER_PADDING_SIZE*8) || bit_size < 0 || !buffer) {
552a554
>  * @returns the code parsed or -1 if no vlc matches
diff -r android/contrib/ffmpeg-x86/libavcodec/golomb.h /tmp/ffmpeg-x86/libavcodec/golomb.h
51a52,53
>  *
>  * @returns the read value or a negative error code.
diff -r android/contrib/ffmpeg-x86/libavcodec/h263dec.c /tmp/ffmpeg-x86/libavcodec/h263dec.c
603c603
<     if (!s->divx_packed)
---
>     if (!s->divx_packed && !avctx->hwaccel)
640c640
<             if (s->slice_height == 0 || s->mb_x != 0 ||
---
>             if (s->slice_height == 0 || s->mb_x != 0 || slice_ret < 0 ||
diff -r android/contrib/ffmpeg-x86/libavcodec/h264addpx_template.c /tmp/ffmpeg-x86/libavcodec/h264addpx_template.c
38,41c38,41
<         dst[0] += src[0];
<         dst[1] += src[1];
<         dst[2] += src[2];
<         dst[3] += src[3];
---
>         dst[0] += (unsigned)src[0];
>         dst[1] += (unsigned)src[1];
>         dst[2] += (unsigned)src[2];
>         dst[3] += (unsigned)src[3];
58,65c58,65
<         dst[0] += src[0];
<         dst[1] += src[1];
<         dst[2] += src[2];
<         dst[3] += src[3];
<         dst[4] += src[4];
<         dst[5] += src[5];
<         dst[6] += src[6];
<         dst[7] += src[7];
---
>         dst[0] += (unsigned)src[0];
>         dst[1] += (unsigned)src[1];
>         dst[2] += (unsigned)src[2];
>         dst[3] += (unsigned)src[3];
>         dst[4] += (unsigned)src[4];
>         dst[5] += (unsigned)src[5];
>         dst[6] += (unsigned)src[6];
>         dst[7] += (unsigned)src[7];
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_cabac.c /tmp/ffmpeg-x86/libavcodec/h264_cabac.c
1738c1738
<                 while (get_cabac_bypass(CC) && j < 30) { \
---
>                 while (get_cabac_bypass(CC) && j < 16+7) { \
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_cavlc.c /tmp/ffmpeg-x86/libavcodec/h264_cavlc.c
717,718c717,724
<         if (sl->mb_skip_run == -1)
<             sl->mb_skip_run = get_ue_golomb_long(&sl->gb);
---
>         if (sl->mb_skip_run == -1) {
>             unsigned mb_skip_run = get_ue_golomb_long(&sl->gb);
>             if (mb_skip_run > h->mb_num) {
>                 av_log(h->avctx, AV_LOG_ERROR, "mb_skip_run %d is invalid\n", mb_skip_run);
>                 return AVERROR_INVALIDDATA;
>             }
>             sl->mb_skip_run = mb_skip_run;
>         }
1113a1120
>                 sl->qscale = max_qp;
diff -r android/contrib/ffmpeg-x86/libavcodec/h264dec.c /tmp/ffmpeg-x86/libavcodec/h264dec.c
629c629
<                                 h->nal_length_size, avctx->codec_id, avctx->flags2 & AV_CODEC_FLAG2_FAST);
---
>                                 h->nal_length_size, avctx->codec_id, 0);
diff -r android/contrib/ffmpeg-x86/libavcodec/h264dec.h /tmp/ffmpeg-x86/libavcodec/h264dec.h
418a419
>     uint8_t scan_padding[16];
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_direct.c /tmp/ffmpeg-x86/libavcodec/h264_direct.c
159,160c159,160
<         sl->col_parity = (FFABS(col_poc[0] - cur_poc) >=
<                           FFABS(col_poc[1] - cur_poc));
---
>             sl->col_parity = (FFABS(col_poc[0] - (int64_t)cur_poc) >=
>                               FFABS(col_poc[1] - (int64_t)cur_poc));
diff -r android/contrib/ffmpeg-x86/libavcodec/h264idct_template.c /tmp/ffmpeg-x86/libavcodec/h264idct_template.c
79,82c79,82
<         const unsigned int a0 =  block[i+0*8] + block[i+4*8];
<         const unsigned int a2 =  block[i+0*8] - block[i+4*8];
<         const unsigned int a4 = (block[i+2*8]>>1) - block[i+6*8];
<         const unsigned int a6 = (block[i+6*8]>>1) + block[i+2*8];
---
>         const unsigned int a0 =  block[i+0*8] + (unsigned)block[i+4*8];
>         const unsigned int a2 =  block[i+0*8] - (unsigned)block[i+4*8];
>         const unsigned int a4 = (block[i+2*8]>>1) - (unsigned)block[i+6*8];
>         const unsigned int a6 = (block[i+6*8]>>1) + (unsigned)block[i+2*8];
94,97c94,97
<         const int b1 = (a7>>2) + a1;
<         const int b3 =  a3 + (a5>>2);
<         const int b5 = (a3>>2) - a5;
<         const int b7 =  a7 - (a1>>2);
---
>         const int b1 = (a7>>2) + (unsigned)a1;
>         const int b3 =  (unsigned)a3 + (a5>>2);
>         const int b5 = (a3>>2) - (unsigned)a5;
>         const int b7 =  (unsigned)a7 - (a1>>2);
110,113c110,113
<         const unsigned a0 =  block[0+i*8] + block[4+i*8];
<         const unsigned a2 =  block[0+i*8] - block[4+i*8];
<         const unsigned a4 = (block[2+i*8]>>1) - block[6+i*8];
<         const unsigned a6 = (block[6+i*8]>>1) + block[2+i*8];
---
>         const unsigned a0 =  block[0+i*8] + (unsigned)block[4+i*8];
>         const unsigned a2 =  block[0+i*8] - (unsigned)block[4+i*8];
>         const unsigned a4 = (block[2+i*8]>>1) - (unsigned)block[6+i*8];
>         const unsigned a6 = (block[6+i*8]>>1) + (unsigned)block[2+i*8];
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_mc_template.c /tmp/ffmpeg-x86/libavcodec/h264_mc_template.c
81c81,82
<     prefetch_motion(h, sl, 0, PIXEL_SHIFT, CHROMA_IDC);
---
>     if (USES_LIST(mb_type, 0))
>         prefetch_motion(h, sl, 0, PIXEL_SHIFT, CHROMA_IDC);
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_parse.c /tmp/ffmpeg-x86/libavcodec/h264_parse.c
85c85,87
<                             (int8_t)pwt->chroma_weight[i][list][j][1] != pwt->chroma_weight[i][list][j][1])
---
>                             (int8_t)pwt->chroma_weight[i][list][j][1] != pwt->chroma_weight[i][list][j][1]) {
>                             pwt->chroma_weight[i][list][j][0] = chroma_def;
>                             pwt->chroma_weight[i][list][j][1] = 0;
86a89
>                         }
296c299,300
<         int abs_frame_num, expected_delta_per_poc_cycle, expectedpoc;
---
>         int abs_frame_num;
>         int64_t expected_delta_per_poc_cycle, expectedpoc;
428c432,433
<         ret = decode_extradata_ps(escaped_buf, escaped_buf_size, ps, 1, logctx);
---
>         (void)decode_extradata_ps(escaped_buf, escaped_buf_size, ps, 1, logctx);
>         // lorex.mp4 decodes ok even with extradata decoding failing
430,431d434
<         if (ret < 0)
<             return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_parser.c /tmp/ffmpeg-x86/libavcodec/h264_parser.c
123a124,125
>             unsigned int mb, last_mb = p->parse_last_mb;
>             GetBitContext gb;
125,127d126
<             if (p->parse_history_count > 5) {
<                 unsigned int mb, last_mb = p->parse_last_mb;
<                 GetBitContext gb;
129,131c128,130
<                 init_get_bits(&gb, p->parse_history, 8*p->parse_history_count);
<                 p->parse_history_count = 0;
<                 mb= get_ue_golomb_long(&gb);
---
>             init_get_bits(&gb, p->parse_history, 8*p->parse_history_count);
>             mb= get_ue_golomb_long(&gb);
>             if (get_bits_left(&gb) > 0 || p->parse_history_count > 5) {
134c133,135
<                     if (mb <= last_mb)
---
>                     if (mb <= last_mb) {
>                         i -= p->parse_history_count - 1;
>                         p->parse_history_count = 0;
135a137
>                     }
137a140
>                 p->parse_history_count = 0;
152c155
<     return i - (state & 5) - 5 * (state > 7);
---
>     return i - (state & 5);
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_ps.c /tmp/ffmpeg-x86/libavcodec/h264_ps.c
38d37
< #define MAX_LOG2_MAX_FRAME_NUM    (12 + 4)
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_ps.h /tmp/ffmpeg-x86/libavcodec/h264_ps.h
38a39
> #define MAX_LOG2_MAX_FRAME_NUM    (12 + 4)
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_refs.c /tmp/ffmpeg-x86/libavcodec/h264_refs.c
376c376
<             if (i < 0) {
---
>             if (i < 0 || mismatches_ref(h, ref)) {
378c378,380
<                        "reference picture missing during reorder\n");
---
>                        i < 0 ? "reference picture missing during reorder\n" :
>                                "mismatching reference\n"
>                       );
808a811
>     // Detect unmarked random access points
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_sei.c /tmp/ffmpeg-x86/libavcodec/h264_sei.c
267c267
< static int decode_recovery_point(H264SEIRecoveryPoint *h, GetBitContext *gb)
---
> static int decode_recovery_point(H264SEIRecoveryPoint *h, GetBitContext *gb, void *logctx)
269c269
<     h->recovery_frame_cnt = get_ue_golomb_long(gb);
---
>     unsigned recovery_frame_cnt = get_ue_golomb_long(gb);
270a271,276
>     if (recovery_frame_cnt >= (1<<MAX_LOG2_MAX_FRAME_NUM)) {
>         av_log(logctx, AV_LOG_ERROR, "recovery_frame_cnt %u is out of range\n", recovery_frame_cnt);
>         return AVERROR_INVALIDDATA;
>     }
> 
>     h->recovery_frame_cnt = recovery_frame_cnt;
434c440
<             ret = decode_recovery_point(&h->recovery_point, gb);
---
>             ret = decode_recovery_point(&h->recovery_point, gb, logctx);
diff -r android/contrib/ffmpeg-x86/libavcodec/h264_slice.c /tmp/ffmpeg-x86/libavcodec/h264_slice.c
675c675
<             sl->ref_list[0][0].poc + (int64_t)sl->ref_list[1][0].poc == 2 * cur_poc) {
---
>             sl->ref_list[0][0].poc + (int64_t)sl->ref_list[1][0].poc == 2LL * cur_poc) {
1325c1325
<        || (h->last_pocs[MAX_DELAYED_PIC_COUNT-2] > INT_MIN && h->last_pocs[MAX_DELAYED_PIC_COUNT-1] - h->last_pocs[MAX_DELAYED_PIC_COUNT-2] > 2))
---
>        || (h->last_pocs[MAX_DELAYED_PIC_COUNT-2] > INT_MIN && h->last_pocs[MAX_DELAYED_PIC_COUNT-1] - (int64_t)h->last_pocs[MAX_DELAYED_PIC_COUNT-2] > 2))
1577a1578,1583
>                 h->first_field = 1;
>                 h->cur_pic_ptr = NULL;
>             } else if (h->cur_pic_ptr->reference & DELAYED_PIC_REF) {
>                 /* This frame was already output, we cannot draw into it
>                  * anymore.
>                  */
diff -r android/contrib/ffmpeg-x86/libavcodec/hevc_cabac.c /tmp/ffmpeg-x86/libavcodec/hevc_cabac.c
645c645
<         while (k < CABAC_MAX_BIN && get_cabac_bypass(&s->HEVClc->cc)) {
---
>         while (k < 7 && get_cabac_bypass(&s->HEVClc->cc)) {
649c649
<         if (k == CABAC_MAX_BIN)
---
>         if (k == 7) {
650a651,652
>             return AVERROR_INVALIDDATA;
>         }
991,994c993
<     if (prefix == CABAC_MAX_BIN) {
<         av_log(s->avctx, AV_LOG_ERROR, "CABAC_MAX_BIN : %d\n", prefix);
<         return 0;
<     }
---
> 
1000a1000,1005
> 
>         if (prefix == CABAC_MAX_BIN || prefix_minus3 + rc_rice_param >= 31) {
>             av_log(s->avctx, AV_LOG_ERROR, "CABAC_MAX_BIN : %d\n", prefix);
>             return 0;
>         }
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/hevcdec.c /tmp/ffmpeg-x86/libavcodec/hevcdec.c
153c153
<     if (luma_log2_weight_denom < 0 || luma_log2_weight_denom > 7)
---
>     if (luma_log2_weight_denom < 0 || luma_log2_weight_denom > 7) {
154a155,156
>         return AVERROR_INVALIDDATA;
>     }
157,158c159,164
<         int delta = get_se_golomb(gb);
<         s->sh.chroma_log2_weight_denom = av_clip_uintp2(s->sh.luma_log2_weight_denom + delta, 3);
---
>         int64_t chroma_log2_weight_denom = luma_log2_weight_denom + (int64_t)get_se_golomb(gb);
>         if (chroma_log2_weight_denom < 0 || chroma_log2_weight_denom > 7) {
>             av_log(s->avctx, AV_LOG_ERROR, "chroma_log2_weight_denom %"PRId64" is invalid\n", chroma_log2_weight_denom);
>             return AVERROR_INVALIDDATA;
>         }
>         s->sh.chroma_log2_weight_denom = chroma_log2_weight_denom;
177a184,185
>             if ((int8_t)delta_luma_weight_l0 != delta_luma_weight_l0)
>                 return AVERROR_INVALIDDATA;
219a228,229
>                 if ((int8_t)delta_luma_weight_l1 != delta_luma_weight_l1)
>                     return AVERROR_INVALIDDATA;
468a479,483
>     if (s->ref && sh->first_slice_in_pic_flag) {
>         av_log(s->avctx, AV_LOG_ERROR, "Two slices reporting being the first in the same frame.\n");
>         return 1; // This slice will be skipped later, do not corrupt state
>     }
> 
2858a2874,2878
>         if (ret == 1) {
>             ret = AVERROR_INVALIDDATA;
>             goto fail;
>         }
> 
3218,3226c3238
<     for (i = 0; i < FF_ARRAY_ELEMS(s->ps.vps_list); i++)
<         av_buffer_unref(&s->ps.vps_list[i]);
<     for (i = 0; i < FF_ARRAY_ELEMS(s->ps.sps_list); i++)
<         av_buffer_unref(&s->ps.sps_list[i]);
<     for (i = 0; i < FF_ARRAY_ELEMS(s->ps.pps_list); i++)
<         av_buffer_unref(&s->ps.pps_list[i]);
<     s->ps.sps = NULL;
<     s->ps.pps = NULL;
<     s->ps.vps = NULL;
---
>     ff_hevc_ps_uninit(&s->ps);
3244a3257,3258
>     ff_hevc_reset_sei(&s->sei);
> 
3433a3448
>     ff_hevc_reset_sei(&s->sei);
diff -r android/contrib/ffmpeg-x86/libavcodec/hevcdsp_template.c /tmp/ffmpeg-x86/libavcodec/hevcdsp_template.c
124c124
<                 *coeffs = *coeffs << -shift;
---
>                 *coeffs = *(uint16_t*)coeffs << -shift;
918c918
<                                     ((ox0 + ox1 + 1) << log2Wd)) >> (log2Wd + 1));
---
>                                     ((ox0 + ox1 + 1) * (1 << log2Wd))) >> (log2Wd + 1));
973c973
<                                     ((ox0 + ox1 + 1) << log2Wd)) >> (log2Wd + 1));
---
>                                     ((ox0 + ox1 + 1) * (1 << log2Wd))) >> (log2Wd + 1));
1054c1054
<                                     ((ox0 + ox1 + 1) << log2Wd)) >> (log2Wd + 1));
---
>                                     ((ox0 + ox1 + 1) * (1 << log2Wd))) >> (log2Wd + 1));
1358c1358
<                                     ((ox0 + ox1 + 1) << log2Wd)) >> (log2Wd + 1));
---
>                                     ((ox0 + ox1 + 1) * (1 << log2Wd))) >> (log2Wd + 1));
1410c1410
<                                     ((ox0 + ox1 + 1) << log2Wd)) >> (log2Wd + 1));
---
>                                     ((ox0 + ox1 + 1) * (1 << log2Wd))) >> (log2Wd + 1));
diff -r android/contrib/ffmpeg-x86/libavcodec/hevc_mp4toannexb_bsf.c /tmp/ffmpeg-x86/libavcodec/hevc_mp4toannexb_bsf.c
143a144,147
>         if (bytestream2_get_bytes_left(&gb) < s->length_size) {
>             ret = AVERROR_INVALIDDATA;
>             goto fail;
>         }
146a151,155
>         if (nalu_size < 2 || nalu_size > bytestream2_get_bytes_left(&gb)) {
>             ret = AVERROR_INVALIDDATA;
>             goto fail;
>         }
> 
155,156c164
<         if (SIZE_MAX - nalu_size < 4 ||
<             SIZE_MAX - 4 - nalu_size < extra_size) {
---
>         if (FFMIN(INT_MAX, SIZE_MAX) < 4ULL + nalu_size + extra_size) {
167c175
<         if (add_extradata)
---
>         if (extra_size)
diff -r android/contrib/ffmpeg-x86/libavcodec/hevc_parser.c /tmp/ffmpeg-x86/libavcodec/hevc_parser.c
362,371d361
<     int i;
< 
<     for (i = 0; i < FF_ARRAY_ELEMS(ctx->ps.vps_list); i++)
<         av_buffer_unref(&ctx->ps.vps_list[i]);
<     for (i = 0; i < FF_ARRAY_ELEMS(ctx->ps.sps_list); i++)
<         av_buffer_unref(&ctx->ps.sps_list[i]);
<     for (i = 0; i < FF_ARRAY_ELEMS(ctx->ps.pps_list); i++)
<         av_buffer_unref(&ctx->ps.pps_list[i]);
< 
<     ctx->ps.sps = NULL;
372a363
>     ff_hevc_ps_uninit(&ctx->ps);
diff -r android/contrib/ffmpeg-x86/libavcodec/hevc_ps.c /tmp/ffmpeg-x86/libavcodec/hevc_ps.c
1326a1327,1331
>     if (   pps->log2_sao_offset_scale_luma   > FFMAX(sps->bit_depth        - 10, 0)
>         || pps->log2_sao_offset_scale_chroma > FFMAX(sps->bit_depth_chroma - 10, 0)
>     )
>         return AVERROR_INVALIDDATA;
> 
1580,1583c1585,1589
<         pps->num_tile_columns = get_ue_golomb_long(gb) + 1;
<         pps->num_tile_rows    = get_ue_golomb_long(gb) + 1;
<         if (pps->num_tile_columns <= 0 ||
<             pps->num_tile_columns >= sps->width) {
---
>         int num_tile_columns_minus1 = get_ue_golomb(gb);
>         int num_tile_rows_minus1    = get_ue_golomb(gb);
> 
>         if (num_tile_columns_minus1 < 0 ||
>             num_tile_columns_minus1 >= sps->ctb_width - 1) {
1585,1586c1591,1592
<                    pps->num_tile_columns - 1);
<             ret = AVERROR_INVALIDDATA;
---
>                    num_tile_columns_minus1);
>             ret = num_tile_columns_minus1 < 0 ? num_tile_columns_minus1 : AVERROR_INVALIDDATA;
1589,1590c1595,1596
<         if (pps->num_tile_rows <= 0 ||
<             pps->num_tile_rows >= sps->height) {
---
>         if (num_tile_rows_minus1 < 0 ||
>             num_tile_rows_minus1 >= sps->ctb_height - 1) {
1592,1593c1598,1599
<                    pps->num_tile_rows - 1);
<             ret = AVERROR_INVALIDDATA;
---
>                    num_tile_rows_minus1);
>             ret = num_tile_rows_minus1 < 0 ? num_tile_rows_minus1 : AVERROR_INVALIDDATA;
1595a1602,1603
>         pps->num_tile_columns = num_tile_columns_minus1 + 1;
>         pps->num_tile_rows    = num_tile_rows_minus1    + 1;
1704a1713,1728
> }
> 
> void ff_hevc_ps_uninit(HEVCParamSets *ps)
> {
>     int i;
> 
>     for (i = 0; i < FF_ARRAY_ELEMS(ps->vps_list); i++)
>         av_buffer_unref(&ps->vps_list[i]);
>     for (i = 0; i < FF_ARRAY_ELEMS(ps->sps_list); i++)
>         av_buffer_unref(&ps->sps_list[i]);
>     for (i = 0; i < FF_ARRAY_ELEMS(ps->pps_list); i++)
>         av_buffer_unref(&ps->pps_list[i]);
> 
>     ps->sps = NULL;
>     ps->pps = NULL;
>     ps->vps = NULL;
diff -r android/contrib/ffmpeg-x86/libavcodec/hevc_ps.h /tmp/ffmpeg-x86/libavcodec/hevc_ps.h
346,347c346,347
<     int num_tile_columns;   ///< num_tile_columns_minus1 + 1
<     int num_tile_rows;      ///< num_tile_rows_minus1 + 1
---
>     uint16_t num_tile_columns;   ///< num_tile_columns_minus1 + 1
>     uint16_t num_tile_rows;      ///< num_tile_rows_minus1 + 1
422a423,424
> 
> void ff_hevc_ps_uninit(HEVCParamSets *ps);
diff -r android/contrib/ffmpeg-x86/libavcodec/hevc_refs.c /tmp/ffmpeg-x86/libavcodec/hevc_refs.c
400c400
<     int i, x, y;
---
>     int i, y;
413,417c413,417
<                 for (y = 0; y < (s->ps.sps->height >> s->ps.sps->vshift[i]); y++)
<                     for (x = 0; x < (s->ps.sps->width >> s->ps.sps->hshift[i]); x++) {
<                         AV_WN16(frame->frame->data[i] + y * frame->frame->linesize[i] + 2 * x,
<                                 1 << (s->ps.sps->bit_depth - 1));
<                     }
---
>                 for (y = 0; y < (s->ps.sps->height >> s->ps.sps->vshift[i]); y++) {
>                     uint8_t *dst = frame->frame->data[i] + y * frame->frame->linesize[i];
>                     AV_WN16(dst, 1 << (s->ps.sps->bit_depth - 1));
>                     av_memcpy_backptr(dst + 2, 2, 2*(s->ps.sps->width >> s->ps.sps->hshift[i]) - 2);
>                 }
diff -r android/contrib/ffmpeg-x86/libavcodec/hevc_sei.c /tmp/ffmpeg-x86/libavcodec/hevc_sei.c
326a327,328
>         if (get_bits_left(gb) < 16 || payload_type > INT_MAX - 255)
>             return AVERROR_INVALIDDATA;
331a334,335
>         if (get_bits_left(gb) < 8 + 8LL*payload_size)
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/hnm4video.c /tmp/ffmpeg-x86/libavcodec/hnm4video.c
120c120,121
<     uint32_t x, y, src_x, src_y;
---
>     uint32_t x, y, src_y;
>     int width = hnm->width;
122a124,125
>         uint8_t *dst = hnm->processed + y * width;
>         const uint8_t *src = hnm->current;
124,127c127,130
<         src_x = src_y * hnm->width + (y % 2);
<         for (x = 0; x < hnm->width; x++) {
<             hnm->processed[(y * hnm->width) + x] = hnm->current[src_x];
<             src_x += 2;
---
>         src += src_y * width + (y % 2);
>         for (x = 0; x < width; x++) {
>             dst[x] = *src;
>             src += 2;
146c149
< static void decode_interframe_v4(AVCodecContext *avctx, uint8_t *src, uint32_t size)
---
> static int decode_interframe_v4(AVCodecContext *avctx, uint8_t *src, uint32_t size)
165c168
<                     break;
---
>                     return AVERROR_INVALIDDATA;
179c182
<                     break;
---
>                     return AVERROR_INVALIDDATA;
191c194
<                 break;
---
>                 return AVERROR_INVALIDDATA;
207c210
<                 break;
---
>                 return AVERROR_INVALIDDATA;
210c213
<                 break;
---
>                 return AVERROR_INVALIDDATA;
214c217,218
<                 break;
---
>                 return AVERROR_INVALIDDATA;
> 
219c223
<                     break;
---
>                     return AVERROR_INVALIDDATA;
224c228
<                     break;
---
>                     return AVERROR_INVALIDDATA;
270a275
>     return 0;
437c442,444
<             decode_interframe_v4(avctx, avpkt->data + 8, avpkt->size - 8);
---
>             int ret = decode_interframe_v4(avctx, avpkt->data + 8, avpkt->size - 8);
>             if (ret < 0)
>                 return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/hq_hqa.c /tmp/ffmpeg-x86/libavcodec/hq_hqa.c
183a184,186
>     if (get_bits_left(gb) < 1)
>         return AVERROR_INVALIDDATA;
> 
247a251,253
>     if (bytestream2_get_bytes_left(&ctx->gbc) < 8 + 4*(num_slices + 1))
>         return AVERROR_INVALIDDATA;
> 
250a257,260
>     ret = ff_set_dimensions(ctx->avctx, width, height);
>     if (ret < 0)
>         return ret;
> 
253,254d262
<     ctx->avctx->width               = width;
<     ctx->avctx->height              = height;
316c324
<         if (bytestream2_get_bytes_left(&ctx->gbc) < info_size) {
---
>         if (info_size < 0 || bytestream2_get_bytes_left(&ctx->gbc) < info_size) {
diff -r android/contrib/ffmpeg-x86/libavcodec/htmlsubtitles.c /tmp/ffmpeg-x86/libavcodec/htmlsubtitles.c
26a27
> #include <ctype.h>
46a48,66
> /*
>  * Fast code for scanning text enclosed in braces. Functionally
>  * equivalent to this sscanf call:
>  *
>  * sscanf(in, "{\\an%*1u}%n", &len) >= 0 && len > 0
>  */
> static int scanbraces(const char* in) {
>     if (strncmp(in, "{\\an", 4) != 0) {
>         return 0;
>     }
>     if (!av_isdigit(in[4])) {
>         return 0;
>     }
>     if (in[5] != '}') {
>         return 0;
>     }
>     return 1;
> }
> 
51d70
<     int len = 0;
54c73
<     *an += sscanf(in, "{\\an%*1u}%n", &len) >= 0 && len > 0;
---
>     *an += scanbraces(in);
77a97,124
>  * Fast code for scanning the rest of a tag. Functionally equivalent to
>  * this sscanf call:
>  *
>  * sscanf(in, "%127[^<>]>%n", buffer, lenp) == 2
>  */
> static int scantag(const char* in, char* buffer, int* lenp) {
>     int len;
> 
>     for (len = 0; len < 128; len++) {
>         const char c = *in++;
>         switch (c) {
>         case '\0':
>             return 0;
>         case '<':
>             return 0;
>         case '>':
>             buffer[len] = '\0';
>             *lenp = len+1;
>             return 1;
>         default:
>             break;
>         }
>         buffer[len] = c;
>     }
>     return 0;
> }
> 
> /*
158c205
<             if (sscanf(in+tag_close+1, "%127[^<>]>%n", buffer, &len) >= 1 && len > 0) {
---
>             if (scantag(in+tag_close+1, buffer, &len) && len > 0) {
diff -r android/contrib/ffmpeg-x86/libavcodec/huffyuvdec.c /tmp/ffmpeg-x86/libavcodec/huffyuvdec.c
421,423d420
<         case 0x170:
<             avctx->pix_fmt = AV_PIX_FMT_GRAY8A;
<             break;
921a919,921
>     if (buf_size < (width * height + 7)/8)
>         return AVERROR_INVALIDDATA;
> 
990a991,992
>                 if (y >= h)
>                     break;
996a999,1000
>                     if (y >= h)
>                         break;
1107a1112,1113
>                 if (y >= height)
>                     break;
1119a1126,1127
>                     if (y >= height)
>                         break;
diff -r android/contrib/ffmpeg-x86/libavcodec/huffyuvenc.c /tmp/ffmpeg-x86/libavcodec/huffyuvenc.c
282d281
<     case AV_PIX_FMT_GRAY8A:
1136d1134
<         AV_PIX_FMT_GRAY8A,
diff -r android/contrib/ffmpeg-x86/libavcodec/idcinvideo.c /tmp/ffmpeg-x86/libavcodec/idcinvideo.c
245a246,250
> static const AVCodecDefault idcin_defaults[] = {
>     { "max_pixels", "320*240" },
>     { NULL },
> };
> 
254a260
>     .defaults       = idcin_defaults,
diff -r android/contrib/ffmpeg-x86/libavcodec/iff.c /tmp/ffmpeg-x86/libavcodec/iff.c
114,130c114,130
< #define LUT32(plane) {                                \
<              0,          0,          0,          0,   \
<              0,          0,          0, 1 << plane,   \
<              0,          0, 1 << plane,          0,   \
<              0,          0, 1 << plane, 1 << plane,   \
<              0, 1 << plane,          0,          0,   \
<              0, 1 << plane,          0, 1 << plane,   \
<              0, 1 << plane, 1 << plane,          0,   \
<              0, 1 << plane, 1 << plane, 1 << plane,   \
<     1 << plane,          0,          0,          0,   \
<     1 << plane,          0,          0, 1 << plane,   \
<     1 << plane,          0, 1 << plane,          0,   \
<     1 << plane,          0, 1 << plane, 1 << plane,   \
<     1 << plane, 1 << plane,          0,          0,   \
<     1 << plane, 1 << plane,          0, 1 << plane,   \
<     1 << plane, 1 << plane, 1 << plane,          0,   \
<     1 << plane, 1 << plane, 1 << plane, 1 << plane,   \
---
> #define LUT32(plane) {                                    \
>               0,           0,           0,           0,   \
>               0,           0,           0, 1U << plane,   \
>               0,           0, 1U << plane,           0,   \
>               0,           0, 1U << plane, 1U << plane,   \
>               0, 1U << plane,           0,           0,   \
>               0, 1U << plane,           0, 1U << plane,   \
>               0, 1U << plane, 1U << plane,           0,   \
>               0, 1U << plane, 1U << plane, 1U << plane,   \
>     1U << plane,           0,           0,           0,   \
>     1U << plane,           0,           0, 1U << plane,   \
>     1U << plane,           0, 1U << plane,           0,   \
>     1U << plane,           0, 1U << plane, 1U << plane,   \
>     1U << plane, 1U << plane,           0,           0,   \
>     1U << plane, 1U << plane,           0, 1U << plane,   \
>     1U << plane, 1U << plane, 1U << plane,           0,   \
>     1U << plane, 1U << plane, 1U << plane, 1U << plane,   \
182a183,186
>         if ((1 << avctx->bits_per_coded_sample) < count) {
>             avpriv_request_sample(avctx, "overlapping mask");
>             return AVERROR_PATCHWELCOME;
>         }
282a287,296
>         if (s->ham) {
>             if (s->bpp > 8) {
>                 av_log(avctx, AV_LOG_ERROR, "Invalid number of hold bits for HAM: %u\n", s->ham);
>                 return AVERROR_INVALIDDATA;
>             } if (s->ham != (s->bpp > 6 ? 6 : 4)) {
>                 av_log(avctx, AV_LOG_ERROR, "Invalid number of hold bits for HAM: %u, BPP: %u\n", s->ham, s->bpp);
>                 return AVERROR_INVALIDDATA;
>             }
>         }
> 
310,312d323
<         } else if (s->ham >= 8) {
<             av_log(avctx, AV_LOG_ERROR, "Invalid number of hold bits for HAM: %u\n", s->ham);
<             return AVERROR_INVALIDDATA;
313a325,326
>         if (s->video_size && s->planesize * s->bpp * avctx->height > s->video_size)
>             return AVERROR_INVALIDDATA;
321a335,338
>             int extra_space = 1;
> 
>             if (avctx->codec_tag == MKTAG('P', 'B', 'M', ' ') && s->ham == 4)
>                 extra_space = 4;
328c345
<             s->ham_palbuf = av_malloc((ham_count << !!(s->masking == MASK_HAS_MASK)) * sizeof (uint32_t) + AV_INPUT_BUFFER_PADDING_SIZE);
---
>             s->ham_palbuf = av_malloc(extra_space * (ham_count << !!(s->masking == MASK_HAS_MASK)) * sizeof (uint32_t) + AV_INPUT_BUFFER_PADDING_SIZE);
373a391,392
>     av_freep(&s->mask_buf);
>     av_freep(&s->mask_palbuf);
423a443,444
>         if (!s->video_size)
>             return AVERROR_INVALIDDATA;
446c467
<     const uint64_t *lut = plane8_lut[plane];
---
>     const uint64_t *lut;
450a472
>     lut = plane8_lut[plane];
698c720
<     while (src + 5 <= src_end) {
---
>     while (src_end - src >= 5) {
704c726,728
<                 int length = FFMIN(size - i, width);
---
>                 int length = FFMIN(size - i, width - x);
>                 if (src_end - src < length * 4)
>                     return;
1132a1157,1159
>                     if (ofsdst + (opcode - 1LL) * dstpitch > bytestream2_size_p(&pb))
>                         return;
> 
1272a1300,1302
>                     if (ofsdst + (opcode - 1LL) * dstpitch > bytestream2_size_p(&pb))
>                         return;
> 
1341a1372,1373
>                 if (opcode && 4 + (opcode - 1LL) * pitch > bytestream2_get_bytes_left_p(&pb))
>                     continue;
1348d1379
<                 opcode = -opcode;
1352c1383
<                     opcode--;
---
>                     opcode++;
1515c1546
<     if (!s->init && avctx->bits_per_coded_sample <= 8 &&
---
>     if (!s->init && avctx->bits_per_coded_sample <= 8 - (s->masking == MASK_HAS_MASK) &&
diff -r android/contrib/ffmpeg-x86/libavcodec/imgconvert.c /tmp/ffmpeg-x86/libavcodec/imgconvert.c
71a72
>     int loss;
73,74c74,77
<     for(i=0; pix_fmt_list[i] != AV_PIX_FMT_NONE; i++)
<         best = avcodec_find_best_pix_fmt_of_2(best, pix_fmt_list[i], src_pix_fmt, has_alpha, loss_ptr);
---
>     for (i=0; pix_fmt_list[i] != AV_PIX_FMT_NONE; i++) {
>         loss = loss_ptr ? *loss_ptr : 0;
>         best = avcodec_find_best_pix_fmt_of_2(best, pix_fmt_list[i], src_pix_fmt, has_alpha, &loss);
>     }
75a79,80
>     if (loss_ptr)
>         *loss_ptr = loss;
diff -r android/contrib/ffmpeg-x86/libavcodec/indeo2.c /tmp/ffmpeg-x86/libavcodec/indeo2.c
82,83d81
<         if (get_bits_left(&ctx->gb) <= 0)
<             return AVERROR_INVALIDDATA;
85c83,86
<             int c = ir2_get_code(&ctx->gb);
---
>             int c;
>             if (get_bits_left(&ctx->gb) <= 0)
>                 return AVERROR_INVALIDDATA;
>             c = ir2_get_code(&ctx->gb);
126,127d126
<         if (get_bits_left(&ctx->gb) <= 0)
<             return AVERROR_INVALIDDATA;
128a128,129
>             if (get_bits_left(&ctx->gb) <= 0)
>                 return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/indeo4.c /tmp/ffmpeg-x86/libavcodec/indeo4.c
32a33
> #include "libavutil/imgutils.h"
180a182,188
> 
>     if (av_image_check_size2(pic_conf.pic_width, pic_conf.pic_height, avctx->max_pixels, AV_PIX_FMT_YUV410P, 0, avctx) < 0) {
>         av_log(avctx, AV_LOG_ERROR, "picture dimensions %d %d cannot be decoded\n",
>                pic_conf.pic_width, pic_conf.pic_height);
>         return AVERROR_INVALIDDATA;
>     }
> 
263c271
< static int decode_band_hdr(IVI45DecContext *ctx, IVIBandDesc *band,
---
> static int decode_band_hdr(IVI45DecContext *ctx, IVIBandDesc *arg_band,
268a277,278
>     IVIBandDesc temp_band, *band = &temp_band;
>     memcpy(&temp_band, arg_band, sizeof(temp_band));
398c408
<             band->blk_vlc.tab = ctx->blk_vlc.tab;
---
>             arg_band->blk_vlc.tab = ctx->blk_vlc.tab;
401c411
<                                      &band->blk_vlc, avctx))
---
>                                      &arg_band->blk_vlc, avctx))
441a452,454
>     band->blk_vlc = arg_band->blk_vlc;
>     memcpy(arg_band, band, sizeof(*arg_band));
> 
488a502,506
> 
>             if (get_bits_left(&ctx->gb) < 1) {
>                 av_log(avctx, AV_LOG_ERROR, "Insufficient input for mb info\n");
>                 return AVERROR_INVALIDDATA;
>             }
diff -r android/contrib/ffmpeg-x86/libavcodec/indeo5.c /tmp/ffmpeg-x86/libavcodec/indeo5.c
326a327
>         ctx->frame_type = FRAMETYPE_INTRA;
diff -r android/contrib/ffmpeg-x86/libavcodec/interplayacm.c /tmp/ffmpeg-x86/libavcodec/interplayacm.c
531c531
<         x -= val;
---
>         x -= (unsigned)val;
diff -r android/contrib/ffmpeg-x86/libavcodec/interplayvideo.c /tmp/ffmpeg-x86/libavcodec/interplayvideo.c
1263c1263
<             if (video_data_size <= 0)
---
>             if (video_data_size <= 0 || s->decoding_map_size == 0)
diff -r android/contrib/ffmpeg-x86/libavcodec/intrax8.c /tmp/ffmpeg-x86/libavcodec/intrax8.c
803a804,805
>         if (get_bits_left(gb) < 1)
>             goto error;
diff -r android/contrib/ffmpeg-x86/libavcodec/ituh263dec.c /tmp/ffmpeg-x86/libavcodec/ituh263dec.c
1205a1206,1210
>     if (!(s->avctx->flags2 & AV_CODEC_FLAG2_CHUNKS)) {
>         if ((s->width * s->height / 256 / 8) > get_bits_left(&s->gb))
>             return AVERROR_INVALIDDATA;
>     }
> 
1269c1274
<                 v |= get_sbits(&s->gb, 8)<<8;
---
>                 v |= get_sbits(&s->gb, 8) * (1 << 8);
diff -r android/contrib/ffmpeg-x86/libavcodec/ivi.c /tmp/ffmpeg-x86/libavcodec/ivi.c
431a432,435
>             if (t_width % 2 || t_height % 2) {
>                 avpriv_request_sample(NULL, "Odd tiles");
>                 return AVERROR_PATCHWELCOME;
>             }
491,496d494
<     int buf_size = band->pitch * band->aheight - buf_offs;
<     int min_size = (blk_size - 1) * band->pitch + blk_size;
< 
<     if (min_size > buf_size)
<         return AVERROR_INVALIDDATA;
< 
726a725,729
>                 int buf_size = band->pitch * band->aheight - buf_offs;
>                 int min_size = (blk_size - 1) * band->pitch + blk_size;
> 
>                 if (min_size > buf_size)
>                     return AVERROR_INVALIDDATA;
1173a1177,1178
>             ctx->got_p_frame = 0;
>             av_frame_unref(ctx->p_frame);
diff -r android/contrib/ffmpeg-x86/libavcodec/j2kenc.c /tmp/ffmpeg-x86/libavcodec/j2kenc.c
691c691,692
<     cblk->passes[passno-1].rate = ff_mqc_flush_to(&t1->mqc, cblk->passes[passno-1].flushed, &cblk->passes[passno-1].flushed_len);
---
>     if (passno)
>         cblk->passes[passno-1].rate = ff_mqc_flush_to(&t1->mqc, cblk->passes[passno-1].flushed, &cblk->passes[passno-1].flushed_len);
diff -r android/contrib/ffmpeg-x86/libavcodec/jpeg2000.c /tmp/ffmpeg-x86/libavcodec/jpeg2000.c
249a250,254
>     if (band->f_stepsize > (INT_MAX >> 15)) {
>         band->f_stepsize = 0;
>         av_log(avctx, AV_LOG_ERROR, "stepsize out of range\n");
>     }
> 
543a549,551
>             return AVERROR(ENOMEM);
> 
>         if (reslevel->num_precincts_x * (uint64_t)reslevel->num_precincts_y * reslevel->nbands > avctx->max_pixels / sizeof(*reslevel->band->prec))
diff -r android/contrib/ffmpeg-x86/libavcodec/jpeg2000dec.c /tmp/ffmpeg-x86/libavcodec/jpeg2000dec.c
287c287
<     if (av_image_check_size(s->width, s->height, 0, s->avctx)) {
---
>     if (av_image_check_size2(s->width, s->height, s->avctx->max_pixels, AV_PIX_FMT_NONE, 0, s->avctx)) {
345c345,348
<     if (s->numXtiles * (uint64_t)s->numYtiles > INT_MAX/sizeof(*s->tile)) {
---
>     // There must be at least a SOT and SOD per tile, their minimum size is 14
>     if (s->numXtiles * (uint64_t)s->numYtiles > INT_MAX/sizeof(*s->tile) ||
>         s->numXtiles * s->numYtiles * 14LL > bytestream2_size(&s->g)
>     ) {
1129a1133,1135
>             if (RSpoc >= FFMIN(codsty->nreslevels, REpoc))
>                 continue;
> 
1149c1155
<                         if (yc % (1 << (rlevel->log2_prec_height + reducedresno)) && y != tile->coord[1][0]) //FIXME this is a subset of the check
---
>                         if (yc % (1LL << (rlevel->log2_prec_height + reducedresno)) && y != tile->coord[1][0]) //FIXME this is a subset of the check
1152c1158
<                         if (xc % (1 << (rlevel->log2_prec_width + reducedresno)) && x != tile->coord[0][0]) //FIXME this is a subset of the check
---
>                         if (xc % (1LL << (rlevel->log2_prec_width + reducedresno)) && x != tile->coord[0][0]) //FIXME this is a subset of the check
1219c1225
<                         if (yc % (1 << (rlevel->log2_prec_height + reducedresno)) && y != tile->coord[1][0]) //FIXME this is a subset of the check
---
>                         if (yc % (1LL << (rlevel->log2_prec_height + reducedresno)) && y != tile->coord[1][0]) //FIXME this is a subset of the check
1222c1228
<                         if (xc % (1 << (rlevel->log2_prec_width + reducedresno)) && x != tile->coord[0][0]) //FIXME this is a subset of the check
---
>                         if (xc % (1LL << (rlevel->log2_prec_width + reducedresno)) && x != tile->coord[0][0]) //FIXME this is a subset of the check
1290c1296
<                         if (yc % (1 << (rlevel->log2_prec_height + reducedresno)) && y != tile->coord[1][0]) //FIXME this is a subset of the check
---
>                         if (yc % (1LL << (rlevel->log2_prec_height + reducedresno)) && y != tile->coord[1][0]) //FIXME this is a subset of the check
1293c1299
<                         if (xc % (1 << (rlevel->log2_prec_width + reducedresno)) && x != tile->coord[0][0]) //FIXME this is a subset of the check
---
>                         if (xc % (1LL << (rlevel->log2_prec_width + reducedresno)) && x != tile->coord[0][0]) //FIXME this is a subset of the check
diff -r android/contrib/ffmpeg-x86/libavcodec/jpeg2000dsp.c /tmp/ffmpeg-x86/libavcodec/jpeg2000dsp.c
67c67
<         i0 = *src0 + *src2 + (((26345 * *src2) + (1 << 15)) >> 16);
---
>         i0 = *src0 + *src2 + ((int)((26345U * *src2) + (1 << 15)) >> 16);
69c69
<                    - (((i_ict_params[2] * *src2) + (1 << 15)) >> 16);
---
>                    - ((int)(((unsigned)i_ict_params[2] * *src2) + (1 << 15)) >> 16);
diff -r android/contrib/ffmpeg-x86/libavcodec/jpeg2000dwt.c /tmp/ffmpeg-x86/libavcodec/jpeg2000dwt.c
258c258
<         t[i] <<= I_PRESHIFT;
---
>         t[i] *= 1 << I_PRESHIFT;
308c308
< static void sr_1d53(int *p, int i0, int i1)
---
> static void sr_1d53(unsigned *p, int i0, int i1)
314c314
<             p[1] >>= 1;
---
>             p[1] = (int)p[1] >> 1;
321c321
<         p[2 * i] -= (p[2 * i - 1] + p[2 * i + 1] + 2) >> 2;
---
>         p[2 * i] -= (int)(p[2 * i - 1] + p[2 * i + 1] + 2) >> 2;
323c323
<         p[2 * i + 1] += (p[2 * i] + p[2 * i + 2]) >> 1;
---
>         p[2 * i + 1] += (int)(p[2 * i] + p[2 * i + 2]) >> 1;
534c534
<         data[i] = (data[i] + ((1<<I_PRESHIFT)>>1)) >> I_PRESHIFT;
---
>         data[i] = (data[i] + ((1LL<<I_PRESHIFT)>>1)) >> I_PRESHIFT;
diff -r android/contrib/ffmpeg-x86/libavcodec/jpeglsdec.c /tmp/ffmpeg-x86/libavcodec/jpeglsdec.c
235a236,238
>         if (get_bits_left(&s->gb) <= 0)
>             return;
> 
443a447,450
>         ret = AVERROR_PATCHWELCOME;
>         goto end;
>     } else { /* unknown interleaving */
>         avpriv_report_missing_feature(s->avctx, "Unknown interleaved images");
diff -r android/contrib/ffmpeg-x86/libavcodec/jvdec.c /tmp/ffmpeg-x86/libavcodec/jvdec.c
166,167d165
<         if ((ret = ff_reget_buffer(avctx, s->frame)) < 0)
<             return ret;
172a171,178
>             if ((ret = ff_reget_buffer(avctx, s->frame)) < 0)
>                 return ret;
> 
>             if (avctx->height/8 * (avctx->width/8) > 4 * video_size) {
>                 av_log(avctx, AV_LOG_ERROR, "Insufficient input data for dimensions\n");
>                 return AVERROR_INVALIDDATA;
>             }
> 
181a188,192
> 
>             av_frame_unref(s->frame);
>             if ((ret = ff_get_buffer(avctx, s->frame, AV_GET_BUFFER_FLAG_REF)) < 0)
>                 return ret;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/kgv1dec.c /tmp/ffmpeg-x86/libavcodec/kgv1dec.c
64a65,67
>     if (avpkt->size < 2 + w*h / 513)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/lagarith.c /tmp/ffmpeg-x86/libavcodec/lagarith.c
224a225,227
>     if (scale_factor > 23)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/libmp3lame.c /tmp/ffmpeg-x86/libavcodec/libmp3lame.c
282d281
<             av_free(avpkt);
291d289
<                 av_free(avpkt);
diff -r android/contrib/ffmpeg-x86/libavcodec/libopusdec.c /tmp/ffmpeg-x86/libavcodec/libopusdec.c
129c129,132
<     opus_multistream_decoder_destroy(opus->dec);
---
>     if (opus->dec) {
>         opus_multistream_decoder_destroy(opus->dec);
>         opus->dec = NULL;
>     }
202a206
>     .caps_internal  = FF_CODEC_CAP_INIT_CLEANUP,
diff -r android/contrib/ffmpeg-x86/libavcodec/libopusenc.c /tmp/ffmpeg-x86/libavcodec/libopusenc.c
485d484
<         av_free(avpkt);
494d492
<             av_free(avpkt);
diff -r android/contrib/ffmpeg-x86/libavcodec/libvorbisdec.c /tmp/ffmpeg-x86/libavcodec/libvorbisdec.c
51a52
>         int sizesum = 0;
53a55,61
>             sizesum += 2 + hsizes[i];
>             if (sizesum > avccontext->extradata_size) {
>                 av_log(avccontext, AV_LOG_ERROR, "vorbis extradata too small\n");
>                 ret = AVERROR_INVALIDDATA;
>                 goto error;
>             }
> 
58a67
>         unsigned int sizesum = 1;
62c71
<             while((*p == 0xFF) && (offset < avccontext->extradata_size)) {
---
>             while((*p == 0xFF) && (sizesum < avccontext->extradata_size)) {
64a74
>                 sizesum += 1 + 0xFF;
67c77,80
<             if(offset >= avccontext->extradata_size - 1) {
---
>             hsizes[i] += *p;
>             offset++;
>             sizesum += 1 + *p;
>             if(sizesum > avccontext->extradata_size) {
73,74d85
<             hsizes[i] += *p;
<             offset++;
diff -r android/contrib/ffmpeg-x86/libavcodec/libvpxenc.c /tmp/ffmpeg-x86/libavcodec/libvpxenc.c
863d862
<                 av_free(pkt);
diff -r android/contrib/ffmpeg-x86/libavcodec/libx264.c /tmp/ffmpeg-x86/libavcodec/libx264.c
274a275
>     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(ctx->pix_fmt);
282c283
<     if (x264_bit_depth > 8)
---
>     if (desc->comp[0].depth > 8)
741a743,745
> #if X264_BUILD >= 153
>     x4->params.i_bitdepth       = av_pix_fmt_desc_get(avctx->pix_fmt)->comp[0].depth;
> #endif
854a859,876
> static const enum AVPixelFormat pix_fmts[] = {
>     AV_PIX_FMT_YUV420P,
>     AV_PIX_FMT_YUVJ420P,
>     AV_PIX_FMT_YUV422P,
>     AV_PIX_FMT_YUVJ422P,
>     AV_PIX_FMT_YUV444P,
>     AV_PIX_FMT_YUVJ444P,
>     AV_PIX_FMT_YUV420P10,
>     AV_PIX_FMT_YUV422P10,
>     AV_PIX_FMT_YUV444P10,
>     AV_PIX_FMT_NV12,
>     AV_PIX_FMT_NV16,
>     AV_PIX_FMT_NV20,
> #ifdef X264_CSP_NV21
>     AV_PIX_FMT_NV21,
> #endif
>     AV_PIX_FMT_NONE
> };
891a914
> #if X264_BUILD < 153
897a921,923
> #else
>     codec->pix_fmts = pix_fmts;
> #endif
diff -r android/contrib/ffmpeg-x86/libavcodec/loco.c /tmp/ffmpeg-x86/libavcodec/loco.c
85c85
<     int v;
---
>     unsigned v;
161a162,163
>         if (val == INT_MIN)
>            return AVERROR_INVALIDDATA;
293a296,300
>     }
> 
>     if (l->lossy > 65536U) {
>         av_log(avctx, AV_LOG_ERROR, "lossy %i is too large\n", l->lossy);
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/lossless_audiodsp.c /tmp/ffmpeg-x86/libavcodec/lossless_audiodsp.c
30c30
<     int res = 0;
---
>     unsigned res = 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/lsp.c /tmp/ffmpeg-x86/libavcodec/lsp.c
111c111
<     f[1] = -lsp[0] << 8;      // *2 and (0.15) -> (3.22)
---
>     f[1] = -lsp[0] * 256;     // *2 and (0.15) -> (3.22)
119c119
<         f[1] -= lsp[2*i-2] << 8;
---
>         f[1] -= lsp[2*i-2] * 256;
diff -r android/contrib/ffmpeg-x86/libavcodec/lzf.c /tmp/ffmpeg-x86/libavcodec/lzf.c
52c52
<                 *size += *size /2;
---
>                 *size += s + *size /2;
75c75
<                 *size += *size / 2;
---
>                 *size += l + *size / 2;
diff -r android/contrib/ffmpeg-x86/libavcodec/m101.c /tmp/ffmpeg-x86/libavcodec/m101.c
64c64
<         min_stride = (avctx->width + 15) / 16 * 20;
---
>         min_stride = (avctx->width + 15) / 16 * 40;
diff -r android/contrib/ffmpeg-x86/libavcodec/magicyuv.c /tmp/ffmpeg-x86/libavcodec/magicyuv.c
242a243,244
>             if (get_bits_left(&gb) < bps * width * height)
>                 return AVERROR_INVALIDDATA;
373a376,377
>             if (get_bits_left(&gb) < 8* width * height)
>                 return AVERROR_INVALIDDATA;
669a674,684
>     }
> 
>     if (s->interlaced) {
>         if ((s->slice_height >> s->vshift[1]) < 2) {
>             av_log(avctx, AV_LOG_ERROR, "impossible slice height\n");
>             return AVERROR_INVALIDDATA;
>         }
>         if ((avctx->coded_height % s->slice_height) && ((avctx->coded_height % s->slice_height) >> s->vshift[1]) < 2) {
>             av_log(avctx, AV_LOG_ERROR, "impossible height\n");
>             return AVERROR_INVALIDDATA;
>         }
diff -r android/contrib/ffmpeg-x86/libavcodec/mdct_fixed.c /tmp/ffmpeg-x86/libavcodec/mdct_fixed.c
42,43c42,43
<         re = RSCALE(-input[2*i+n3] - input[n3-1-2*i]);
<         im = RSCALE(-input[n4+2*i] + input[n4-1-2*i]);
---
>         re = RSCALE(-input[2*i+n3], - input[n3-1-2*i]);
>         im = RSCALE(-input[n4+2*i], + input[n4-1-2*i]);
47,48c47,48
<         re = RSCALE( input[2*i]    - input[n2-1-2*i]);
<         im = RSCALE(-input[n2+2*i] - input[ n-1-2*i]);
---
>         re = RSCALE( input[2*i]   , - input[n2-1-2*i]);
>         im = RSCALE(-input[n2+2*i], - input[ n-1-2*i]);
diff -r android/contrib/ffmpeg-x86/libavcodec/mdct_template.c /tmp/ffmpeg-x86/libavcodec/mdct_template.c
36c36
< #   define RSCALE(x) (x)
---
> #   define RSCALE(x, y) ((x) + (y))
39c39
< #   define RSCALE(x) (((x) + 32) >> 6)
---
> #   define RSCALE(x, y) ((int)((x) + (unsigned)(y) + 32) >> 6)
41c41
< #   define RSCALE(x) ((x) >> 1)
---
> #   define RSCALE(x, y) ((int)((x) + (unsigned)(y)) >> 1)
184,185c184,185
<         re = RSCALE(-input[2*i+n3] - input[n3-1-2*i]);
<         im = RSCALE(-input[n4+2*i] + input[n4-1-2*i]);
---
>         re = RSCALE(-input[2*i+n3], - input[n3-1-2*i]);
>         im = RSCALE(-input[n4+2*i], + input[n4-1-2*i]);
189,190c189,190
<         re = RSCALE( input[2*i]    - input[n2-1-2*i]);
<         im = RSCALE(-input[n2+2*i] - input[ n-1-2*i]);
---
>         re = RSCALE( input[2*i]   , - input[n2-1-2*i]);
>         im = RSCALE(-input[n2+2*i], - input[ n-1-2*i]);
diff -r android/contrib/ffmpeg-x86/libavcodec/mediacodecdec.c /tmp/ffmpeg-x86/libavcodec/mediacodecdec.c
258a259,260
>     ff_hevc_ps_uninit(&ps);
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/mips/hevc_lpf_sao_msa.c /tmp/ffmpeg-x86/libavcodec/mips/hevc_lpf_sao_msa.c
2633c2633
<     ptrdiff_t stride_src = (2 * 64 + 32) / sizeof(uint8_t);
---
>     ptrdiff_t stride_src = (2 * MAX_PB_SIZE + AV_INPUT_BUFFER_PADDING_SIZE) / sizeof(uint8_t);
diff -r android/contrib/ffmpeg-x86/libavcodec/mjpegbdec.c /tmp/ffmpeg-x86/libavcodec/mjpegbdec.c
73,74c73
<     if (get_bits_long(&hgb, 32) != MKBETAG('m','j','p','g'))
<     {
---
>     if (get_bits_long(&hgb, 32) != MKBETAG('m','j','p','g')) {
88,89c87
<     if (dqt_offs)
<     {
---
>     if (dqt_offs) {
94c92
<           return AVERROR_INVALIDDATA;
---
>             return AVERROR_INVALIDDATA;
99,100c97
<     if (dht_offs)
<     {
---
>     if (dht_offs) {
108,109c105
<     if (sof_offs)
<     {
---
>     if (sof_offs) {
120,121c116
<     if (sos_offs)
<     {
---
>     if (sos_offs) {
128c123
<           return AVERROR_INVALIDDATA;
---
>             return AVERROR_INVALIDDATA;
134,135c129
<         if (s->bottom_field != s->interlace_polarity && second_field_offs)
<         {
---
>         if (s->bottom_field != s->interlace_polarity && second_field_offs) {
138c132
<             }
---
>         }
diff -r android/contrib/ffmpeg-x86/libavcodec/mjpegdec.c /tmp/ffmpeg-x86/libavcodec/mjpegdec.c
330a331,332
>     if (s->buf_size && (width + 7) / 8 * ((height + 7) / 8) > s->buf_size * 4LL)
>         return AVERROR_INVALIDDATA;
616a619,622
>     if ((AV_RB32(s->upscale_h) || AV_RB32(s->upscale_v)) && s->progressive && s->avctx->pix_fmt == AV_PIX_FMT_GBRP) {
>         avpriv_report_missing_feature(s->avctx, "progressive for weird subsampling");
>         return AVERROR_PATCHWELCOME;
>     }
665c671,673
<         (!s->rgb && s->ls && s->nb_components > 1)) {
---
>         (!s->rgb && s->ls && s->nb_components > 1) ||
>         (s->avctx->pix_fmt == AV_PIX_FMT_PAL8 && !s->ls)
>     ) {
718c726
<     val = val * quant_matrix[0] + s->last_dc[component];
---
>     val = val * (unsigned)quant_matrix[0] + s->last_dc[component];
1011a1020,1024
>             if (get_bits_left(&s->gb) < 1) {
>                 av_log(s->avctx, AV_LOG_ERROR, "bitstream end in rgb_scan\n");
>                 return AVERROR_INVALIDDATA;
>             }
> 
1035c1048
<                     mask & (pred + (dc * (1 << point_transform)));
---
>                     mask & (pred + (unsigned)(dc * (1 << point_transform)));
1149,1158c1162,1168
<                         ptr = s->picture_ptr->data[c] + (linesize * (v * mb_y + y)) + (h * mb_x + x); //FIXME optimize this crap
<                         if(y==0 && toprow){
<                             if(x==0 && leftcol){
<                                 pred= 1 << (bits - 1);
<                             }else{
<                                 pred= ptr[-1];
<                             }
<                         }else{
<                             if(x==0 && leftcol){
<                                 pred= ptr[-linesize];
---
>                             ptr = s->picture_ptr->data[c] + (linesize * (v * mb_y + y)) + (h * mb_x + x); //FIXME optimize this crap
>                             if(y==0 && toprow){
>                                 if(x==0 && leftcol){
>                                     pred= 1 << (bits - 1);
>                                 }else{
>                                     pred= ptr[-1];
>                                 }
1160c1170,1174
<                                 PREDICT(pred, ptr[-linesize-1], ptr[-linesize], ptr[-1], predictor);
---
>                                 if(x==0 && leftcol){
>                                     pred= ptr[-linesize];
>                                 }else{
>                                     PREDICT(pred, ptr[-linesize-1], ptr[-linesize], ptr[-1], predictor);
>                                 }
1162d1175
<                         }
1164,1167c1177,1180
<                         if (s->interlaced && s->bottom_field)
<                             ptr += linesize >> 1;
<                         pred &= mask;
<                         *ptr= pred + ((unsigned)dc << point_transform);
---
>                             if (s->interlaced && s->bottom_field)
>                                 ptr += linesize >> 1;
>                             pred &= mask;
>                             *ptr= pred + ((unsigned)dc << point_transform);
2194a2208,2209
> 
>     s->buf_size = buf_size;
diff -r android/contrib/ffmpeg-x86/libavcodec/mjpegdec.h /tmp/ffmpeg-x86/libavcodec/mjpegdec.h
47a48
>     int buf_size;
diff -r android/contrib/ffmpeg-x86/libavcodec/mlpdec.c /tmp/ffmpeg-x86/libavcodec/mlpdec.c
477c477
<     int min_channel, max_channel, max_matrix_channel;
---
>     int min_channel, max_channel, max_matrix_channel, noise_type;
490c490
<     s->noise_type = get_bits1(gbp);
---
>     noise_type = get_bits1(gbp);
492c492
<     if (m->avctx->codec_id == AV_CODEC_ID_MLP && s->noise_type) {
---
>     if (m->avctx->codec_id == AV_CODEC_ID_MLP && noise_type) {
518c518
<     if (max_channel > MAX_MATRIX_CHANNEL_MLP && !s->noise_type) {
---
>     if (max_channel > MAX_MATRIX_CHANNEL_MLP && !noise_type) {
534a535
>     s->noise_type         = noise_type;
1192c1193
<             av_log(m->avctx, AV_LOG_ERROR, "Insuffient data for headers\n");
---
>             av_log(m->avctx, AV_LOG_ERROR, "Insufficient data for headers\n");
diff -r android/contrib/ffmpeg-x86/libavcodec/mlpdsp.c /tmp/ffmpeg-x86/libavcodec/mlpdsp.c
82c82
<             accum += noise_buffer[index] << (matrix_noise_shift + 7);
---
>             accum += noise_buffer[index] * (1 << (matrix_noise_shift + 7));
120c120
<                 *data_32++ = sample << 8;
---
>                 *data_32++ = sample * 256U;
diff -r android/contrib/ffmpeg-x86/libavcodec/motion_est_template.c /tmp/ffmpeg-x86/libavcodec/motion_est_template.c
160,161c160,161
<     (*mx_ptr)<<=1;
<     (*my_ptr)<<=1;
---
>     (*mx_ptr) *= 2;
>     (*my_ptr) *= 2;
diff -r android/contrib/ffmpeg-x86/libavcodec/motionpixels.c /tmp/ffmpeg-x86/libavcodec/motionpixels.c
174c174
< static int mp_gradient(MotionPixelsContext *mp, int component, int v)
---
> static av_always_inline int mp_gradient(MotionPixelsContext *mp, int component, int v)
199c199
< static int mp_get_vlc(MotionPixelsContext *mp, GetBitContext *gb)
---
> static av_always_inline int mp_get_vlc(MotionPixelsContext *mp, GetBitContext *gb)
203a204,205
>     if (i < 0)
>         return i;
diff -r android/contrib/ffmpeg-x86/libavcodec/movtextdec.c /tmp/ffmpeg-x86/libavcodec/movtextdec.c
301a302,309
> 
>         if (   m->s_temp->style_end < m->s_temp->style_start
>             || (m->count_s && m->s_temp->style_start < m->s[m->count_s - 1]->style_end)) {
>             av_freep(&m->s_temp);
>             mov_text_cleanup(m);
>             return AVERROR(ENOMEM);
>         }
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/mp3_header_decompress_bsf.c /tmp/ffmpeg-x86/libavcodec/mp3_header_decompress_bsf.c
64a65,69
>     if (sample_rate_index == 3) {
>         ret = AVERROR_INVALIDDATA;
>         goto fail;
>     }
> 
90c95
<         av_packet_free(&out);
---
>         av_packet_unref(out);
diff -r android/contrib/ffmpeg-x86/libavcodec/mpc8.c /tmp/ffmpeg-x86/libavcodec/mpc8.c
65c65
<             bits |= 1 << n;
---
>             bits |= 1U << n;
367,368c367,369
<                     for(k = 0; k < SAMPLES_PER_BAND / 2; k++, t <<= 1)
<                         c->Q[ch][off + j + k] = (t & 0x20000) ? (get_bits1(gb) << 1) - 1 : 0;
---
>                     for(k = 0; k < SAMPLES_PER_BAND / 2; k++)
>                         c->Q[ch][off + j + k] = t & (1 << (SAMPLES_PER_BAND / 2 - k - 1))
>                                                 ? (get_bits1(gb) << 1) - 1 : 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/mpeg12dec.c /tmp/ffmpeg-x86/libavcodec/mpeg12dec.c
223d222
<  * Note: this function can read out of range and crash for corrupt streams.
399d397
<  * Note: this function can read out of range and crash for corrupt streams.
561d558
<  * Note: this function can read out of range and crash for corrupt streams.
589c586
<     block[0] = dc << (3 - s->intra_dc_precision);
---
>     block[0] = dc * (1 << (3 - s->intra_dc_precision));
1986a1984,1985
>                     s->field_select[0][0] = (s->picture_structure - 1) & 1;
>                     s->field_select[1][0] = (s->picture_structure - 1) & 1;
2474c2473
<                     if (s2->last_picture_ptr || s2->low_delay)
---
>                     if (s2->last_picture_ptr || s2->low_delay || s2->pict_type == AV_PICTURE_TYPE_B)
diff -r android/contrib/ffmpeg-x86/libavcodec/mpeg4_unpack_bframes_bsf.c /tmp/ffmpeg-x86/libavcodec/mpeg4_unpack_bframes_bsf.c
154a155,163
>         ret = av_new_packet(out, in->size);
>         if (ret < 0)
>             return ret;
>         ret = av_packet_copy_props(out, in);
>         if (ret < 0) {
>             av_packet_unref(out);
>             return ret;
>         }
>         memcpy(out->data, in->data, in->size);
156d164
<         av_packet_move_ref(out, in);
diff -r android/contrib/ffmpeg-x86/libavcodec/mpeg4videodec.c /tmp/ffmpeg-x86/libavcodec/mpeg4videodec.c
395c395
<                 llabs(sprite_delta[i][1] * (w+16LL)) >= INT_MAX ||
---
>                 llabs(sprite_delta[i][1] * (h+16LL)) >= INT_MAX ||
463c463
<     if (mb_num >= s->mb_num) {
---
>     if (mb_num >= s->mb_num || !mb_num) {
542c542
<         if (ctx->divx_version == 500 && ctx->divx_build == 413)
---
>         if (ctx->divx_version == 500 && ctx->divx_build == 413 && a >= s->quarter_sample)
554c554
<         mb_v = s->sprite_offset[0][n] + dx * s->mb_x * 16 + dy * s->mb_y * 16;
---
>         mb_v = s->sprite_offset[0][n] + dx * s->mb_x * 16U + dy * s->mb_y * 16U;
1254c1254
<     Mpeg4DecContext *ctx = (Mpeg4DecContext *)s;
---
>     Mpeg4DecContext *ctx = s->avctx->priv_data;
1257a1258,1259
>     av_assert2(s == (void*)ctx);
> 
1339c1341
<     Mpeg4DecContext *ctx = (Mpeg4DecContext *)s;
---
>     Mpeg4DecContext *ctx = s->avctx->priv_data;
1344a1347
>     av_assert2(s ==  (void*)ctx);
2152,2153c2155,2163
<         if (e > 1)
<             build = (ver << 16) + (ver2 << 8) + ver3;
---
>         if (e > 1) {
>             if (ver > 0xFFU || ver2 > 0xFFU || ver3 > 0xFFU) {
>                 av_log(s->avctx, AV_LOG_WARNING,
>                      "Unknown Lavc version string encountered, %d.%d.%d; "
>                      "clamping sub-version values to 8-bits.\n",
>                      ver, ver2, ver3);
>             }
>             build = ((ver & 0xFF) << 16) + ((ver2 & 0xFF) << 8) + (ver3 & 0xFF);
>         }
2663,2664c2673,2674
<                 av_log(s->avctx, AV_LOG_ERROR, "Multiple VOL headers");
<                 return AVERROR_INVALIDDATA;
---
>                 av_log(s->avctx, AV_LOG_WARNING, "Ignoring multiple VOL headers\n");
>                 continue;
diff -r android/contrib/ffmpeg-x86/libavcodec/mpeg4videoenc.c /tmp/ffmpeg-x86/libavcodec/mpeg4videoenc.c
107c107
<         int16_t *ac_val = s->ac_val[0][0] + s->block_index[n] * 16;
---
>         int16_t *ac_val = &s->ac_val[0][0][0] + s->block_index[n] * 16;
146c146
<         ac_val  = s->ac_val[0][0] + s->block_index[n] * 16;
---
>         ac_val  = &s->ac_val[0][0][0] + s->block_index[n] * 16;
885c885
<     int hours, minutes, seconds;
---
>     int64_t hours, minutes, seconds;
diff -r android/contrib/ffmpeg-x86/libavcodec/mpegaudiodsp.c /tmp/ffmpeg-x86/libavcodec/mpegaudiodsp.c
22a23
> #include "libavutil/thread.h"
26a28,30
> static AVOnce mpadsp_float_table_init = AV_ONCE_INIT;
> static AVOnce mpadsp_fixed_table_init = AV_ONCE_INIT;
> 
32,33c36,37
<     ff_init_mpadsp_tabs_float();
<     ff_init_mpadsp_tabs_fixed();
---
>     ff_thread_once(&mpadsp_float_table_init, &ff_init_mpadsp_tabs_float);
>     ff_thread_once(&mpadsp_fixed_table_init, &ff_init_mpadsp_tabs_fixed);
diff -r android/contrib/ffmpeg-x86/libavcodec/mpegaudioenc_template.c /tmp/ffmpeg-x86/libavcodec/mpegaudioenc_template.c
704c704
<                                     q1 = sample << (-shift);
---
>                                     q1 = sample * (1 << -shift);
diff -r android/contrib/ffmpeg-x86/libavcodec/mpegaudio_parser.c /tmp/ffmpeg-x86/libavcodec/mpegaudio_parser.c
101c101,103
<                         return 0; /* parsers must not return error codes */
---
>                         *poutbuf = NULL;
>                         *poutbuf_size = 0;
>                         return buf_size; /* parsers must not return error codes */
diff -r android/contrib/ffmpeg-x86/libavcodec/msmpeg4dec.c /tmp/ffmpeg-x86/libavcodec/msmpeg4dec.c
411a412,419
>     // at minimum one bit per macroblock is required at least in a valid frame,
>     // we discard frames much smaller than this. Frames smaller than 1/8 of the
>     // smallest "black/skip" frame generally contain not much recoverable content
>     // while at the same time they have the highest computational requirements
>     // per byte
>     if (get_bits_left(&s->gb) * 8LL < (s->width+15)/16 * ((s->height+15)/16))
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/msrle.c /tmp/ffmpeg-x86/libavcodec/msrle.c
97a98,100
>     if (buf_size < 2) //Minimally a end of picture code should be there
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/mss12.c /tmp/ffmpeg-x86/libavcodec/mss12.c
163a164,165
>     if (acoder->overread > MAX_OVERREAD)
>         return AVERROR_INVALIDDATA;
308a311,312
>             if (p < 0)
>                 return p;
400a405,406
>                 if (p < 0)
>                     return p;
475a482,483
>         if (pix < 0)
>             return pix;
501a510,511
>         if (mode < 0)
>             return mode;
532a543,544
>     if (acoder->overread > MAX_OVERREAD)
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/mss12.h /tmp/ffmpeg-x86/libavcodec/mss12.h
49a50,51
>     int overread;
> #define MAX_OVERREAD 16
diff -r android/contrib/ffmpeg-x86/libavcodec/mss1.c /tmp/ffmpeg-x86/libavcodec/mss1.c
58a59,60
>         if (get_bits_left(c->gbc.gb) < 1)
>             c->overread++;
114a117
>     c->overread      = 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/mss2.c /tmp/ffmpeg-x86/libavcodec/mss2.c
154a155
>     c->overread      = 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/mss3.c /tmp/ffmpeg-x86/libavcodec/mss3.c
300a301,304
>         if (c->low > c->range) {
>             c->got_error = 1;
>             c->low = 1;
>         }
diff -r android/contrib/ffmpeg-x86/libavcodec/mss4.c /tmp/ffmpeg-x86/libavcodec/mss4.c
554a555,559
>     mb_width  = FFALIGN(width,  16) >> 4;
>     mb_height = FFALIGN(height, 16) >> 4;
> 
>     if (frame_type != SKIP_FRAME && 8*buf_size < 8*HEADER_SIZE + mb_width*mb_height)
>         return AVERROR_INVALIDDATA;
577,579d581
< 
<     mb_width  = FFALIGN(width,  16) >> 4;
<     mb_height = FFALIGN(height, 16) >> 4;
diff -r android/contrib/ffmpeg-x86/libavcodec/msvideo1.c /tmp/ffmpeg-x86/libavcodec/msvideo1.c
64a65,67
>     if (avctx->width < 4 || avctx->height < 4)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/mxpegdec.c /tmp/ffmpeg-x86/libavcodec/mxpegdec.c
201a202
>     s->got_sof_data = !!s->got_sof_data;
243a245,249
>                 if (s->got_sof_data > 1) {
>                     av_log(avctx, AV_LOG_ERROR,
>                            "Multiple SOF in a frame\n");
>                     return AVERROR_INVALIDDATA;
>                 }
256c262
<                 s->got_sof_data = 1;
---
>                 s->got_sof_data ++;
diff -r android/contrib/ffmpeg-x86/libavcodec/nuv.c /tmp/ffmpeg-x86/libavcodec/nuv.c
129c129
<         int buf_size = height * width * 3 / 2
---
>         int64_t buf_size = height * (int64_t)width * 3 / 2
134c134
<         if ((ret = av_image_check_size(height, width, 0, avctx)) < 0)
---
>         if ((ret = ff_set_dimensions(avctx, width, height)) < 0)
136,137c136,137
<         avctx->width  = c->width  = width;
<         avctx->height = c->height = height;
---
>         c->width  = width;
>         c->height = height;
163a164
>     int minsize = 0;
200a202,204
>         if (c->width < 16 || c->height < 16) {
>             return AVERROR_INVALIDDATA;
>         }
208a213,230
>     switch (comptype) {
>     case NUV_UNCOMPRESSED:
>         minsize = c->width * c->height * 3 / 2;
>         break;
>     case NUV_RTJPEG:
>         minsize = c->width/16 * (c->height/16) * 6;
>         break;
>     case NUV_BLACK:
>     case NUV_COPY_LAST:
>     case NUV_LZO:
>     case NUV_RTJPEG_IN_LZO:
>         break;
>     default:
>         av_log(avctx, AV_LOG_ERROR, "unknown compression\n");
>         return AVERROR_INVALIDDATA;
>     }
>     if (buf_size < minsize / 4)
>         return AVERROR_INVALIDDATA;
294,296d315
<     default:
<         av_log(avctx, AV_LOG_ERROR, "unknown compression\n");
<         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/nvenc.c /tmp/ffmpeg-x86/libavcodec/nvenc.c
1355,1359d1354
<         for (i = 0; i < ctx->nb_surfaces; ++i) {
<             if (ctx->surfaces[i].input_surface) {
<                  p_nvenc->nvEncUnmapInputResource(ctx->nvencoder, ctx->surfaces[i].in_map.mappedResource);
<             }
<         }
1360a1356,1357
>             if (ctx->registered_frames[i].mapped)
>                 p_nvenc->nvEncUnmapInputResource(ctx->nvencoder, ctx->registered_frames[i].in_map.mappedResource);
1487a1485
>     NVENCSTATUS nv_status;
1495,1496c1493,1496
<                     p_nvenc->nvEncUnregisterResource(ctx->nvencoder,
<                                                 ctx->registered_frames[i].regptr);
---
>                     nv_status = p_nvenc->nvEncUnregisterResource(ctx->nvencoder, ctx->registered_frames[i].regptr);
>                     if (nv_status != NV_ENC_SUCCESS)
>                         return nvenc_print_error(avctx, nv_status, "Failed unregistering unused input resource");
>                     ctx->registered_frames[i].ptr = 0;
1575,1580c1575,1582
<         nvenc_frame->in_map.version = NV_ENC_MAP_INPUT_RESOURCE_VER;
<         nvenc_frame->in_map.registeredResource = ctx->registered_frames[reg_idx].regptr;
<         nv_status = p_nvenc->nvEncMapInputResource(ctx->nvencoder, &nvenc_frame->in_map);
<         if (nv_status != NV_ENC_SUCCESS) {
<             av_frame_unref(nvenc_frame->in_ref);
<             return nvenc_print_error(avctx, nv_status, "Error mapping an input resource");
---
>         if (!ctx->registered_frames[reg_idx].mapped) {
>             ctx->registered_frames[reg_idx].in_map.version = NV_ENC_MAP_INPUT_RESOURCE_VER;
>             ctx->registered_frames[reg_idx].in_map.registeredResource = ctx->registered_frames[reg_idx].regptr;
>             nv_status = p_nvenc->nvEncMapInputResource(ctx->nvencoder, &ctx->registered_frames[reg_idx].in_map);
>             if (nv_status != NV_ENC_SUCCESS) {
>                 av_frame_unref(nvenc_frame->in_ref);
>                 return nvenc_print_error(avctx, nv_status, "Error mapping an input resource");
>             }
1583c1585,1586
<         ctx->registered_frames[reg_idx].mapped = 1;
---
>         ctx->registered_frames[reg_idx].mapped += 1;
> 
1585,1586c1588,1589
<         nvenc_frame->input_surface             = nvenc_frame->in_map.mappedResource;
<         nvenc_frame->format                    = nvenc_frame->in_map.mappedBufferFmt;
---
>         nvenc_frame->input_surface             = ctx->registered_frames[reg_idx].in_map.mappedResource;
>         nvenc_frame->format                    = ctx->registered_frames[reg_idx].in_map.mappedBufferFmt;
1587a1591
> 
1732,1733c1736,1739
<     if (nv_status != NV_ENC_SUCCESS)
<         nvenc_print_error(avctx, nv_status, "Failed unlocking bitstream buffer, expect the gates of mordor to open");
---
>     if (nv_status != NV_ENC_SUCCESS) {
>         res = nvenc_print_error(avctx, nv_status, "Failed unlocking bitstream buffer, expect the gates of mordor to open");
>         goto error;
>     }
1737c1743,1761
<         p_nvenc->nvEncUnmapInputResource(ctx->nvencoder, tmpoutsurf->in_map.mappedResource);
---
>         ctx->registered_frames[tmpoutsurf->reg_idx].mapped -= 1;
>         if (ctx->registered_frames[tmpoutsurf->reg_idx].mapped == 0) {
>             nv_status = p_nvenc->nvEncUnmapInputResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].in_map.mappedResource);
>             if (nv_status != NV_ENC_SUCCESS) {
>                 res = nvenc_print_error(avctx, nv_status, "Failed unmapping input resource");
>                 goto error;
>             }
>             nv_status = p_nvenc->nvEncUnregisterResource(ctx->nvencoder, ctx->registered_frames[tmpoutsurf->reg_idx].regptr);
>             if (nv_status != NV_ENC_SUCCESS) {
>                 res = nvenc_print_error(avctx, nv_status, "Failed unregistering input resource");
>                 goto error;
>             }
>             ctx->registered_frames[tmpoutsurf->reg_idx].ptr = 0;
>             ctx->registered_frames[tmpoutsurf->reg_idx].regptr = NULL;
>         } else if (ctx->registered_frames[tmpoutsurf->reg_idx].mapped < 0) {
>             res = AVERROR_BUG;
>             goto error;
>         }
> 
1739d1762
<         ctx->registered_frames[tmpoutsurf->reg_idx].mapped = 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/nvenc.h /tmp/ffmpeg-x86/libavcodec/nvenc.h
40d39
<     NV_ENC_MAP_INPUT_RESOURCE in_map;
124a124
>         NV_ENC_MAP_INPUT_RESOURCE in_map;
diff -r android/contrib/ffmpeg-x86/libavcodec/opus_parser.c /tmp/ffmpeg-x86/libavcodec/opus_parser.c
45a46
>     uint64_t payload_len_tmp;
55c56
<     *payload_len = 0;
---
>     payload_len_tmp = *payload_len = 0;
57c58
<         *payload_len += bytestream2_get_byte(&gb);
---
>         payload_len_tmp += bytestream2_get_byte(&gb);
59c60
<     *payload_len += bytestream2_get_byte(&gb);
---
>     payload_len_tmp += bytestream2_get_byte(&gb);
69a71,75
>     if (bytestream2_tell(&gb) + payload_len_tmp > buf_len)
>         return NULL;
> 
>     *payload_len = payload_len_tmp;
> 
106a113,116
>                 if (!payload) {
>                     av_log(avctx, AV_LOG_ERROR, "Error parsing Ogg TS header.\n");
>                     return AVERROR_INVALIDDATA;
>                 }
diff -r android/contrib/ffmpeg-x86/libavcodec/opus_silk.c /tmp/ffmpeg-x86/libavcodec/opus_silk.c
235,236c235,238
<         lpc32[k]         = -p[k + 1] - p[k] - q[k + 1] + q[k];
<         lpc32[order-k-1] = -p[k + 1] - p[k] + q[k + 1] - q[k];
---
>         int32_t p_tmp = p[k + 1] + p[k];
>         int32_t q_tmp = q[k + 1] - q[k];
>         lpc32[k]         = -q_tmp - p_tmp;
>         lpc32[order-k-1] =  q_tmp - p_tmp;
diff -r android/contrib/ffmpeg-x86/libavcodec/pafvideo.c /tmp/ffmpeg-x86/libavcodec/pafvideo.c
80a81
>     int ret;
92a94,96
>     ret = av_image_check_size2(avctx->width, FFALIGN(avctx->height, 256), avctx->max_pixels, avctx->pix_fmt, 0, avctx);
>     if (ret < 0)
>         return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/parser.c /tmp/ffmpeg-x86/libavcodec/parser.c
264a265,267
>     if (next > *buf_size)
>         return AVERROR(EINVAL);
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/pcm.c /tmp/ffmpeg-x86/libavcodec/pcm.c
253a254,256
>         if (avctx->bits_per_coded_sample < 1 || avctx->bits_per_coded_sample > 24)
>             return AVERROR_INVALIDDATA;
> 
293c296
<         AV_WN ## size ## A(dst, (v - offset) << shift);                 \
---
>         AV_WN ## size ## A(dst, (uint ## size ## _t)(v - offset) << shift); \
304c307
<             AV_WN ## size ## A(dst, (v - offset) << shift);             \
---
>             AV_WN ## size ## A(dst, (uint ## size ##_t)(v - offset) << shift); \
501c504
<                 *dst_int32_t++ =  (src[2]         << 28) |
---
>                 *dst_int32_t++ =  ((uint32_t)src[2]<<28) |
507c510
<                 *dst_int32_t++ =  (src[4]         << 24) |
---
>                 *dst_int32_t++ =  ((uint32_t)src[4]<<24) |
diff -r android/contrib/ffmpeg-x86/libavcodec/pgssubdec.c /tmp/ffmpeg-x86/libavcodec/pgssubdec.c
678a679,683
>             if (*data_size) {
>                 av_log(avctx, AV_LOG_ERROR, "Duplicate display segment\n");
>                 ret = AVERROR_INVALIDDATA;
>                 break;
>             }
689c694,696
<         if (ret < 0 && (avctx->err_recognition & AV_EF_EXPLODE))
---
>         if (ret < 0 && (avctx->err_recognition & AV_EF_EXPLODE)) {
>             avsubtitle_free(data);
>             *data_size = 0;
690a698
>         }
diff -r android/contrib/ffmpeg-x86/libavcodec/pixlet.c /tmp/ffmpeg-x86/libavcodec/pixlet.c
220c220
<         if (state >> 8 != -3) {
---
>         if (((state >> 8) + 3) & 0xFFFFFFF) {
diff -r android/contrib/ffmpeg-x86/libavcodec/pngdec.c /tmp/ffmpeg-x86/libavcodec/pngdec.c
579a580,583
>     if (s->compression_type) {
>         av_log(avctx, AV_LOG_ERROR, "Invalid compression method %d\n", s->compression_type);
>         goto error;
>     }
968a973,977
>     if (s->pic_state & PNG_IDAT) {
>         av_log(avctx, AV_LOG_ERROR, "fctl after IDAT\n");
>         return AVERROR_INVALIDDATA;
>     }
> 
1238c1247
<             if (!decode_next_dat) {
---
>             if (!decode_next_dat || length < 4) {
1286c1295
<             if (decode_iccp_chunk(s, length, p) < 0)
---
>             if ((ret = decode_iccp_chunk(s, length, p)) < 0)
1350a1360,1362
>                      s->previous_picture.f->width == p->width  &&
>                      s->previous_picture.f->height== p->height &&
>                      s->previous_picture.f->format== p->format &&
diff -r android/contrib/ffmpeg-x86/libavcodec/pnm.c /tmp/ffmpeg-x86/libavcodec/pnm.c
110a111,113
>         if (!pnm_space(s->bytestream[-1]))
>             return AVERROR_INVALIDDATA;
> 
190a194,197
> 
>     if (!pnm_space(s->bytestream[-1]))
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/pnmdec.c /tmp/ffmpeg-x86/libavcodec/pnmdec.c
135c135
<                     int v=0;
---
>                     unsigned v=0;
diff -r android/contrib/ffmpeg-x86/libavcodec/ppc/hevcdsp.c /tmp/ffmpeg-x86/libavcodec/ppc/hevcdsp.c
60c60,66
<     add = vec_sl(vec_splat_s32(1), vec_splat_u32(shift - 1));
---
>     switch(shift) {
>     case  7: add = vec_sl(vec_splat_s32(1), vec_splat_u32( 7 - 1)); break;
>     case 10: add = vec_sl(vec_splat_s32(1), vec_splat_u32(10 - 1)); break;
>     case 12: add = vec_sl(vec_splat_s32(1), vec_splat_u32(12 - 1)); break;
>     default: abort();
>     }
> 
73c79,86
<     vec_u32 v_shift = vec_splat_u32(shift);
---
>     vec_u32 v_shift;
> 
>     switch(shift) {
>     case  7: v_shift = vec_splat_u32(7) ; break;
>     case 10: v_shift = vec_splat_u32(10); break;
>     case 12: v_shift = vec_splat_u32(12); break;
>     default: abort();
>     }
diff -r android/contrib/ffmpeg-x86/libavcodec/proresdec2.c /tmp/ffmpeg-x86/libavcodec/proresdec2.c
520,521c520,521
<     int16_t qmat_luma_scaled[64];
<     int16_t qmat_chroma_scaled[64];
---
>     LOCAL_ALIGNED_16(int16_t, qmat_luma_scaled,  [64]);
>     LOCAL_ALIGNED_16(int16_t, qmat_chroma_scaled,[64]);
diff -r android/contrib/ffmpeg-x86/libavcodec/proresenc_anatoliy.c /tmp/ffmpeg-x86/libavcodec/proresenc_anatoliy.c
186c186
< #define TO_GOLOMB(val) (((val) << 1) ^ ((val) >> 31))
---
> #define TO_GOLOMB(val) (((val) * 2) ^ ((val) >> 31))
diff -r android/contrib/ffmpeg-x86/libavcodec/ptx.c /tmp/ffmpeg-x86/libavcodec/ptx.c
57a58,60
>     if (buf_end - buf < w * bytes_per_pixel)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/qdm2.c /tmp/ffmpeg-x86/libavcodec/qdm2.c
411c411,416
<                     if (coding_method[ch][sb + (j + k) / 64][(j + k) % 64] > coding_method[ch][sb][j]) {
---
>                     int sbjk = sb + (j + k) / 64;
>                     if (sbjk > 29) {
>                         SAMPLES_NEEDED
>                         continue;
>                     }
>                     if (coding_method[ch][sbjk][(j + k) % 64] > coding_method[ch][sb][j]) {
1286a1292,1295
>             if (local_int_10 <= 2) {
>                 av_log(NULL, AV_LOG_ERROR, "qdm2_fft_decode_tones() stuck\n");
>                 return;
>             }
1327a1337,1339
>             if (q->fft_coefs_index + stereo >= FF_ARRAY_ELEMS(q->fft_coefs))
>                 return;
> 
1698,1699c1710,1711
<     if (s->checksum_size >= 1U << 28) {
<         av_log(avctx, AV_LOG_ERROR, "data block size too large (%u)\n", s->checksum_size);
---
>     if (s->checksum_size >= 1U << 28 || s->checksum_size <= 1) {
>         av_log(avctx, AV_LOG_ERROR, "data block size invalid (%u)\n", s->checksum_size);
1704a1717,1722
>     // Fail on unknown fft order
>     if ((s->fft_order < 7) || (s->fft_order > 9)) {
>         avpriv_request_sample(avctx, "Unknown FFT order %d", s->fft_order);
>         return AVERROR_PATCHWELCOME;
>     }
> 
1714a1733,1737
>     if (s->frame_size * 4 >> s->sub_sampling > MPA_FRAME_SIZE) {
>         avpriv_request_sample(avctx, "large frames");
>         return AVERROR_PATCHWELCOME;
>     }
> 
1738,1742d1760
<     // Fail on unknown fft order
<     if ((s->fft_order < 7) || (s->fft_order > 9)) {
<         avpriv_request_sample(avctx, "Unknown FFT order %d", s->fft_order);
<         return AVERROR_PATCHWELCOME;
<     }
diff -r android/contrib/ffmpeg-x86/libavcodec/qdmc.c /tmp/ffmpeg-x86/libavcodec/qdmc.c
363a364,365
>     if (get_bits_left(gb) < 1)
>         return AVERROR_INVALIDDATA;
574c576
<         s->rndval = 214013 * s->rndval + 2531011;
---
>         s->rndval = 214013U * s->rndval + 2531011;
576c578
<         s->rndval = 214013 * s->rndval + 2531011;
---
>         s->rndval = 214013U * s->rndval + 2531011;
diff -r android/contrib/ffmpeg-x86/libavcodec/qdrw.c /tmp/ffmpeg-x86/libavcodec/qdrw.c
455a456,457
>             if (bytestream2_get_bytes_left(&gbc) < 30)
>                 return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/qpeg.c /tmp/ffmpeg-x86/libavcodec/qpeg.c
92a93,94
>             if (bytestream2_get_bytes_left(&qctx->buffer) < copy)
>                 copy = bytestream2_get_bytes_left(&qctx->buffer);
diff -r android/contrib/ffmpeg-x86/libavcodec/qtrle.c /tmp/ffmpeg-x86/libavcodec/qtrle.c
157a158,159
>             if (bytestream2_get_bytes_left(&s->g) < 1)
>                 return;
212a215,216
>             if (bytestream2_get_bytes_left(&s->g) < 1)
>                 return;
261a266,267
>             if (bytestream2_get_bytes_left(&s->g) < 1)
>                 return;
305a312,313
>             if (bytestream2_get_bytes_left(&s->g) < 1)
>                 return;
352a361,362
>             if (bytestream2_get_bytes_left(&s->g) < 1)
>                 return;
diff -r android/contrib/ffmpeg-x86/libavcodec/ra144.c /tmp/ffmpeg-x86/libavcodec/ra144.c
1519c1519
<             dest[i] = (s1[i]*v[0] + s2[i]*v[1] + s3[i]*v[2]) >> 12;
---
>             dest[i] = (int)((s1[i]*(unsigned)v[0]) + s2[i]*v[1] + s3[i]*v[2]) >> 12;
1572c1572
<             int a = bp2[j] - ((refl[i+1] * bp2[i-j]) >> 12);
---
>             int a = bp2[j] - ((int)(refl[i+1] * (unsigned)bp2[i-j]) >> 12);
1576c1576
<             bp1[j] = (int)((bp2[j] - ((refl[i+1] * bp2[i-j]) >> 12)) * (unsigned)b) >> 12;
---
>             bp1[j] = (int)((bp2[j] - ((int)(refl[i+1] * (unsigned)bp2[i-j]) >> 12)) * (unsigned)b) >> 12;
diff -r android/contrib/ffmpeg-x86/libavcodec/ra144enc.c /tmp/ffmpeg-x86/libavcodec/ra144enc.c
480,481c480,481
<         block_coefs[NBLOCKS - 1][i] = -(lpc_coefs[LPC_ORDER - 1][i] <<
<                                         (12 - shift[LPC_ORDER - 1]));
---
>         block_coefs[NBLOCKS - 1][i] = -lpc_coefs[LPC_ORDER - 1][i]
>                                        * (1 << (12 - shift[LPC_ORDER - 1]));
diff -r android/contrib/ffmpeg-x86/libavcodec/ralf.c /tmp/ffmpeg-x86/libavcodec/ralf.c
223c223
<         val = (val << bits) | get_bits(gb, bits);
---
>         val = ((unsigned)val << bits) | get_bits(gb, bits);
237,238c237,240
<     ctx->filter_bits   = (ctx->filter_params - 2) >> 6;
<     ctx->filter_length = ctx->filter_params - (ctx->filter_bits << 6) - 1;
---
>     if (ctx->filter_params > 1) {
>         ctx->filter_bits   = (ctx->filter_params - 2) >> 6;
>         ctx->filter_length = ctx->filter_params - (ctx->filter_bits << 6) - 1;
>     }
265,266c267,268
<                 coeff -= 12 << add_bits;
<             coeff = t - coeff;
---
>                 coeff -= 12U << add_bits;
>             coeff = (unsigned)t - coeff;
289c291
<         code_vlc = set->long_codes + code_params - 15;
---
>         code_vlc = set->long_codes + (code_params - 15);
303,304c305,306
<         dst[i]     = extend_code(gb, code1, range, 0) << add_bits;
<         dst[i + 1] = extend_code(gb, code2, range, 0) << add_bits;
---
>         dst[i]     = extend_code(gb, code1, range, 0) * (1U << add_bits);
>         dst[i + 1] = extend_code(gb, code2, range, 0) * (1U << add_bits);
326c328
<             acc += ctx->filter[j] * audio[i - j - 1];
---
>             acc += (unsigned)ctx->filter[j] * audio[i - j - 1];
331c333
<             acc = (acc + bias) >> ctx->filter_bits;
---
>             acc = ((unsigned)acc + bias) >> ctx->filter_bits;
345c347,348
<     int i, t, t2;
---
>     int i;
>     unsigned int t, t2;
409,411c412,414
<             t2 = ((ch0[i] + ctx->bias[0]) << 1) | (t & 1);
<             dst0[i] = (t2 + t) / 2;
<             dst1[i] = (t2 - t) / 2;
---
>             t2 = ((ch0[i] + ctx->bias[0]) * 2) | (t & 1);
>             dst0[i] = (int)(t2 + t) / 2;
>             dst1[i] = (int)(t2 - t) / 2;
481a485,486
>         if (ctx->num_blocks >= FF_ARRAY_ELEMS(ctx->block_size))
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/rawdec.c /tmp/ffmpeg-x86/libavcodec/rawdec.c
224c224
<         context->is_lt_16bpp = av_get_bits_per_pixel(desc) == 16 && avctx->bits_per_coded_sample && avctx->bits_per_coded_sample < 16;
---
>         context->is_lt_16bpp = av_get_bits_per_pixel(desc) == 16 && avctx->bits_per_coded_sample > 8 && avctx->bits_per_coded_sample < 16;
468,471c468,474
<         int x;
<         for (x = 0; x >> 3 < avctx->width * avctx->height; x += 8) {
<             v = AV_RB64(&dst[x]);
<             AV_WB64(&dst[x], v << 16 | v >> 48);
---
>         int x, y;
>         for (y = 0; y < avctx->height; y++) {
>             for (x = 0; x >> 3 < avctx->width; x += 8) {
>                 v = AV_RB64(&dst[x]);
>                 AV_WB64(&dst[x], v << 16 | v >> 48);
>             }
>             dst += frame->linesize[0];
diff -r android/contrib/ffmpeg-x86/libavcodec/rl2.c /tmp/ffmpeg-x86/libavcodec/rl2.c
136a137
>     int ret;
139a141,144
> 
>     ret = ff_set_dimensions(avctx, 320, 200);
>     if (ret < 0)
>         return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/rpza.c /tmp/ffmpeg-x86/libavcodec/rpza.c
76,77c76
<     int stride = s->frame->linesize[0] / 2;
<     int row_inc = stride - 4;
---
>     int stride, row_inc, ret;
82c81
<     uint16_t *pixels = (uint16_t *)s->frame->data[0];
---
>     uint16_t *pixels;
108a108,116
>     if (total_blocks / 32 > bytestream2_get_bytes_left(&s->gb))
>         return AVERROR_INVALIDDATA;
> 
>     if ((ret = ff_reget_buffer(s->avctx, s->frame)) < 0)
>         return ret;
>     pixels = (uint16_t *)s->frame->data[0];
>     stride = s->frame->linesize[0] / 2;
>     row_inc = stride - 4;
> 
258,260d265
< 
<     if ((ret = ff_reget_buffer(avctx, s->frame)) < 0)
<         return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/rscc.c /tmp/ffmpeg-x86/libavcodec/rscc.c
184a185,190
> 
>             if (bytestream2_get_bytes_left(gbc) < packed_tiles_size) {
>                 ret = AVERROR_INVALIDDATA;
>                 goto end;
>             }
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/rv10.c /tmp/ffmpeg-x86/libavcodec/rv10.c
391c391
<             if (2 * new_w * s->height == new_h * s->width)
---
>             if (2 * (int64_t)new_w * s->height == (int64_t)new_h * s->width)
393c393
<             if (new_w * s->height == 2 * new_h * s->width)
---
>             if ((int64_t)new_w * s->height == 2 * (int64_t)new_h * s->width)
diff -r android/contrib/ffmpeg-x86/libavcodec/rv34.c /tmp/ffmpeg-x86/libavcodec/rv34.c
1588c1588
<     if (!s1->linesize)
---
>     if (!s1->context_initialized)
1735a1736,1737
>         if (faulty_b)
>             return AVERROR_INVALIDDATA;
1789,1790d1790
<     if (faulty_b)
<         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/rv40dsp.c /tmp/ffmpeg-x86/libavcodec/rv40dsp.c
388c388
<             dst[i] = (((w2 * src1[i]) >> 9) + ((w1 * src2[i]) >> 9) + 0x10) >> 5;\
---
>             dst[i] = ((((unsigned)w2 * src1[i]) >> 9) + (((unsigned)w1 * src2[i]) >> 9) + 0x10) >> 5;\
400c400
<             dst[i] = (w2 * src1[i] + w1 * src2[i] + 0x10) >> 5;\
---
>             dst[i] = ((unsigned)w2 * src1[i] + (unsigned)w1 * src2[i] + 0x10) >> 5;\
diff -r android/contrib/ffmpeg-x86/libavcodec/sanm.c /tmp/ffmpeg-x86/libavcodec/sanm.c
493a494,498
>     // early sanity check before allocations to avoid need for deallocation code.
>     if (!ctx->version && avctx->extradata_size < 1026) {
>         av_log(avctx, AV_LOG_ERROR, "Not enough extradata.\n");
>         return AVERROR_INVALIDDATA;
>     }
508,512d512
< 
<         if (avctx->extradata_size < 1026) {
<             av_log(avctx, AV_LOG_ERROR, "Not enough extradata.\n");
<             return AVERROR_INVALIDDATA;
<         }
diff -r android/contrib/ffmpeg-x86/libavcodec/sbrdsp_fixed.c /tmp/ffmpeg-x86/libavcodec/sbrdsp_fixed.c
37c37
<     uint64_t accu, round;
---
>     uint64_t accu = 0, round;
41a42
>     nz = 0;
43,44d43
<         // Larger values are inavlid and could cause overflows of accu.
<         av_assert2(FFABS(x[i + 0][0]) >> 30 == 0);
46d44
<         av_assert2(FFABS(x[i + 0][1]) >> 30 == 0);
48d45
<         av_assert2(FFABS(x[i + 1][0]) >> 30 == 0);
50d46
<         av_assert2(FFABS(x[i + 1][1]) >> 30 == 0);
51a48,63
>         if ((accu0|accu1|accu2|accu3) > UINT64_MAX - INT32_MIN*(int64_t)INT32_MIN || i+2>=n) {
>             accu0 >>= nz;
>             accu1 >>= nz;
>             accu2 >>= nz;
>             accu3 >>= nz;
>             while ((accu0|accu1|accu2|accu3) > (UINT64_MAX - accu) >> 2) {
>                 accu0 >>= 1;
>                 accu1 >>= 1;
>                 accu2 >>= 1;
>                 accu3 >>= 1;
>                 accu  >>= 1;
>                 nz ++;
>             }
>             accu += accu0 + accu1 + accu2 + accu3;
>             accu0 = accu1 = accu2 = accu3 = 0;
>         }
54,62c66
<     nz0 = 15;
<     while ((accu0|accu1|accu2|accu3) >> 62) {
<         accu0 >>= 1;
<         accu1 >>= 1;
<         accu2 >>= 1;
<         accu3 >>= 1;
<         nz0 --;
<     }
<     accu = accu0 + accu1 + accu2 + accu3;
---
>     nz0 = 15 - nz;
136c140
<         mant = (mant + 0x40)>>7;
---
>         mant = (mant + 0x40LL)>>7;
247,249c251,254
<         int64_t r = 1LL << (22-g_filt[m].exp);
<         accu = (int64_t)X_high[m][ixh][0] * ((g_filt[m].mant + 0x40)>>7);
<         Y[m][0] = (int)((accu + r) >> (23-g_filt[m].exp));
---
>         if (22 - g_filt[m].exp < 61) {
>             int64_t r = 1LL << (22-g_filt[m].exp);
>             accu = (int64_t)X_high[m][ixh][0] * ((g_filt[m].mant + 0x40)>>7);
>             Y[m][0] = (int)((accu + r) >> (23-g_filt[m].exp));
251,252c256,258
<         accu = (int64_t)X_high[m][ixh][1] * ((g_filt[m].mant + 0x40)>>7);
<         Y[m][1] = (int)((accu + r) >> (23-g_filt[m].exp));
---
>             accu = (int64_t)X_high[m][ixh][1] * ((g_filt[m].mant + 0x40)>>7);
>             Y[m][1] = (int)((accu + r) >> (23-g_filt[m].exp));
>         }
diff -r android/contrib/ffmpeg-x86/libavcodec/scpr.c /tmp/ffmpeg-x86/libavcodec/scpr.c
507c507
<     int ret, temp, min, max, x, y, cx = 0, cx1 = 0;
---
>     int ret, temp = 0, min, max, x, y, cx = 0, cx1 = 0;
524a525,527
>     if (min > max)
>         return AVERROR_INVALIDDATA;
> 
683a687,688
>                                 if (by < 2)
>                                     return AVERROR_INVALIDDATA;
712a718,719
>                                 if (by < 2)
>                                     return AVERROR_INVALIDDATA;
778c785
<         int x, y;
---
>         int y;
794,796c801,802
<             for (x = 0; x < avctx->width; x++) {
<                 dst[x] = clr;
<             }
---
>             dst[0] = clr;
>             av_memcpy_backptr((uint8_t*)(dst+1), 4, 4*avctx->width - 4);
diff -r android/contrib/ffmpeg-x86/libavcodec/shorten.c /tmp/ffmpeg-x86/libavcodec/shorten.c
180c180
<             buffer[i] <<= s->bitshift;
---
>             buffer[i] *= 1U << s->bitshift;
237,238c237
<         bytestream2_skip(&gb, len + (len & 1));
<         if (len < 0 || bytestream2_get_bytes_left(&gb) < 18) {
---
>         if (len < 0 || bytestream2_get_bytes_left(&gb) < 18LL + len + (len&1)) {
241a241
>         bytestream2_skip(&gb, len + (len & 1));
385c385
<             s->decoded[channel][i] -= coffset;
---
>             s->decoded[channel][i] -= (unsigned)coffset;
392c392
<             sum += coeffs[j] * s->decoded[channel][i - j - 1];
---
>             sum += coeffs[j] * (unsigned)s->decoded[channel][i - j - 1];
394c394
<                                  (sum >> qshift);
---
>                                  (unsigned)(sum >> qshift);
400c400
<             s->decoded[channel][i] += coffset;
---
>             s->decoded[channel][i] += (unsigned)coffset;
452a453,456
>         if (s->nmean > 32768U) {
>             av_log(s->avctx, AV_LOG_ERROR, "nmean is: %d\n", s->nmean);
>             return AVERROR_INVALIDDATA;
>         }
455c459
<         if ((unsigned)skip_bytes > get_bits_left(&s->gb)/8) {
---
>         if ((unsigned)skip_bytes > FFMAX(get_bits_left(&s->gb), 0)/8) {
621a626,630
>                 if (len < 0 || len > get_bits_left(&s->gb)) {
>                     av_log(avctx, AV_LOG_ERROR, "verbatim length %d invalid\n",
>                            len);
>                     return AVERROR_INVALIDDATA;
>                 }
681c690
<                     sum += s->offset[channel][i];
---
>                     sum += (unsigned)s->offset[channel][i];
699c708
<                 int32_t sum = (s->version < 2) ? 0 : s->blocksize / 2;
---
>                 int64_t sum = (s->version < 2) ? 0 : s->blocksize / 2;
709c718
<                     s->offset[channel][s->nmean - 1] = s->bitshift == 32 ? 0 : (sum / s->blocksize) << s->bitshift;
---
>                     s->offset[channel][s->nmean - 1] = s->bitshift == 32 ? 0 : (sum / s->blocksize) * (1LL << s->bitshift);
diff -r android/contrib/ffmpeg-x86/libavcodec/smacker.c /tmp/ffmpeg-x86/libavcodec/smacker.c
386a387,388
>         if (get_bits_left(gb) < 1)
>             return AVERROR_INVALIDDATA;
450a453,454
>         if (type < 0)
>             return type;
532c536
<                 col = mode * 0x01010101;
---
>                 col = mode * 0x01010101U;
730c734
<                 pred[1] += sign_extend(val, 16);
---
>                 pred[1] += (unsigned)sign_extend(val, 16);
751c755
<                 pred[0] += sign_extend(val, 16);
---
>                 pred[0] += (unsigned)sign_extend(val, 16);
diff -r android/contrib/ffmpeg-x86/libavcodec/smc.c /tmp/ffmpeg-x86/libavcodec/smc.c
440a441,444
>     int total_blocks = ((s->avctx->width + 3) / 4) * ((s->avctx->height + 3) / 4);
> 
>     if (total_blocks / 1024 > avpkt->size)
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/snappy.c /tmp/ffmpeg-x86/libavcodec/snappy.c
41a42,43
>         if (shift > 31 || ((tmp & 127LL) << shift) > INT_MAX)
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/snowdec.c /tmp/ffmpeg-x86/libavcodec/snowdec.c
120c120
<     const int qlog= av_clip(s->qlog + b->qlog, 0, QROOT*16);
---
>     const int qlog= av_clip(s->qlog + (int64_t)b->qlog, 0, QROOT*16);
186d185
< 
187a187
>             int ld, cbd, crd;
189c189,193
<             l += get_symbol(&s->c, &s->block_state[32], 1);
---
>             ld = get_symbol(&s->c, &s->block_state[32], 1);
>             if (ld < -255 || ld > 255) {
>                 return AVERROR_INVALIDDATA;
>             }
>             l += ld;
191,192c195,201
<                 cb+= get_symbol(&s->c, &s->block_state[64], 1);
<                 cr+= get_symbol(&s->c, &s->block_state[96], 1);
---
>                 cbd = get_symbol(&s->c, &s->block_state[64], 1);
>                 crd = get_symbol(&s->c, &s->block_state[96], 1);
>                 if (cbd < -255 || cbd > 255 || crd < -255 || crd > 255) {
>                     return AVERROR_INVALIDDATA;
>                 }
>                 cb += cbd;
>                 cr += crd;
202,203c211,212
<             mx+= get_symbol(&s->c, &s->block_state[128 + 32*(mx_context + 16*!!ref)], 1);
<             my+= get_symbol(&s->c, &s->block_state[128 + 32*(my_context + 16*!!ref)], 1);
---
>             mx+= (unsigned)get_symbol(&s->c, &s->block_state[128 + 32*(mx_context + 16*!!ref)], 1);
>             my+= (unsigned)get_symbol(&s->c, &s->block_state[128 + 32*(my_context + 16*!!ref)], 1);
218c227
<     const int qlog= av_clip(s->qlog + b->qlog, 0, QROOT*16);
---
>     const int qlog= av_clip(s->qlog + (int64_t)b->qlog, 0, QROOT*16);
357,358c366,367
<                 htaps= get_symbol(&s->c, s->header_state, 0)*2 + 2;
<                 if((unsigned)htaps >= HTAPS_MAX || htaps==0)
---
>                 htaps= get_symbol(&s->c, s->header_state, 0);
>                 if((unsigned)htaps >= HTAPS_MAX/2 - 1)
359a369
>                 htaps = htaps*2 + 2;
377c387
<     s->spatial_decomposition_type+= get_symbol(&s->c, s->header_state, 1);
---
>     s->spatial_decomposition_type+= (unsigned)get_symbol(&s->c, s->header_state, 1);
393,396c403,406
<     s->qlog           += get_symbol(&s->c, s->header_state, 1);
<     s->mv_scale       += get_symbol(&s->c, s->header_state, 1);
<     s->qbias          += get_symbol(&s->c, s->header_state, 1);
<     s->block_max_depth+= get_symbol(&s->c, s->header_state, 1);
---
>     s->qlog           += (unsigned)get_symbol(&s->c, s->header_state, 1);
>     s->mv_scale       += (unsigned)get_symbol(&s->c, s->header_state, 1);
>     s->qbias          += (unsigned)get_symbol(&s->c, s->header_state, 1);
>     s->block_max_depth+= (unsigned)get_symbol(&s->c, s->header_state, 1);
430a441,442
>             if (s->c.bytestream >= s->c.bytestream_end)
>                 return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/snowenc.c /tmp/ffmpeg-x86/libavcodec/snowenc.c
88a89
>     s->m.mb_num  = (avctx->width * avctx->height + 255) / 256; // For ratecontrol
314c315
<     if(P_TOPRIGHT[0] < (c->xmin<<shift)) P_TOPRIGHT[0]= (c->xmin<<shift);
---
>     if(P_TOPRIGHT[0] < (c->xmin * (1<<shift))) P_TOPRIGHT[0]= (c->xmin * (1<<shift));
1785c1786
<                         s->spatial_dwt_buffer[y*w + x]=s->spatial_idwt_buffer[y*w + x]<<ENCODER_EXTRA_BITS;
---
>                         s->spatial_dwt_buffer[y*w + x]= s->spatial_idwt_buffer[y*w + x] * (1 << ENCODER_EXTRA_BITS);
diff -r android/contrib/ffmpeg-x86/libavcodec/sonic.c /tmp/ffmpeg-x86/libavcodec/sonic.c
143c143,144
<         int i, e, a;
---
>         int i, e;
>         unsigned a;
146a148,149
>             if (e > 31)
>                 return AVERROR_INVALIDDATA;
475,476c478,479
<         x -= shift_down(k_value * state_value, LATTICE_SHIFT);
<         state_ptr[1] = state_value + shift_down(k_value * x, LATTICE_SHIFT);
---
>         x -= shift_down(k_value * (unsigned)state_value, LATTICE_SHIFT);
>         state_ptr[1] = state_value + shift_down(k_value * (unsigned)x, LATTICE_SHIFT);
1045c1048
<             s->int_samples[x] = predictor_calc_error(s->predictor_k, s->predictor_state[ch], s->num_taps, s->coded_samples[ch][i] * quant);
---
>             s->int_samples[x] = predictor_calc_error(s->predictor_k, s->predictor_state[ch], s->num_taps, s->coded_samples[ch][i] * (unsigned)quant);
diff -r android/contrib/ffmpeg-x86/libavcodec/sunrast.c /tmp/ffmpeg-x86/libavcodec/sunrast.c
75c75
<         return -1;
---
>         return AVERROR_PATCHWELCOME;
102a103,109
>     /* scanlines are aligned on 16 bit boundaries */
>     len  = (depth * w + 7) >> 3;
>     alen = len + (len & 1);
> 
>     if (buf_end - buf < maplength + (len * h) * 3 / 256)
>         return AVERROR_INVALIDDATA;
> 
108,110d114
<     if (buf_end - buf < maplength)
<         return AVERROR_INVALIDDATA;
< 
135,136c139,140
<     ptr    = p->data[0];
<     stride = p->linesize[0];
---
>         ptr    = p->data[0];
>         stride = p->linesize[0];
138,141d141
< 
<     /* scanlines are aligned on 16 bit boundaries */
<     len  = (depth * w + 7) >> 3;
<     alen = len + (len & 1);
diff -r android/contrib/ffmpeg-x86/libavcodec/svq1dec.c /tmp/ffmpeg-x86/libavcodec/svq1dec.c
604a605,606
>     if (get_bits_left(bitbuf) <= 0)
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/svq3.c /tmp/ffmpeg-x86/libavcodec/svq3.c
1067,1070d1066
<     if (get_bits1(&s->gb_slice)) {
<         avpriv_report_missing_feature(s->avctx, "Media key encryption");
<         return AVERROR_PATCHWELCOME;
<     }
1075c1071
<         i = (s->mb_num < 64) ? 5 : av_log2(s->mb_num - 1);
---
>         i = (s->mb_num < 64) ? 6 : (1 + av_log2(s->mb_num - 1));
1076a1073,1075
>     } else if (get_bits1(&s->gb_slice)) {
>         avpriv_report_missing_feature(s->avctx, "Media key encryption");
>         return AVERROR_PATCHWELCOME;
1186a1186
>         int w,h;
1199,1200c1199,1200
<             avctx->width  = 160;
<             avctx->height = 120;
---
>             w = 160;
>             h = 120;
1203,1204c1203,1204
<             avctx->width  = 128;
<             avctx->height =  96;
---
>             w = 128;
>             h =  96;
1207,1208c1207,1208
<             avctx->width  = 176;
<             avctx->height = 144;
---
>             w = 176;
>             h = 144;
1211,1212c1211,1212
<             avctx->width  = 352;
<             avctx->height = 288;
---
>             w = 352;
>             h = 288;
1215,1216c1215,1216
<             avctx->width  = 704;
<             avctx->height = 576;
---
>             w = 704;
>             h = 576;
1219,1220c1219,1220
<             avctx->width  = 240;
<             avctx->height = 180;
---
>             w = 240;
>             h = 180;
1223,1224c1223,1224
<             avctx->width  = 320;
<             avctx->height = 240;
---
>             w = 320;
>             h = 240;
1227,1228c1227,1228
<             avctx->width  = get_bits(&gb, 12);
<             avctx->height = get_bits(&gb, 12);
---
>             w = get_bits(&gb, 12);
>             h = get_bits(&gb, 12);
1230a1231,1233
>         ret = ff_set_dimensions(avctx, w, h);
>         if (ret < 0)
>             goto fail;
diff -r android/contrib/ffmpeg-x86/libavcodec/tableprint_vlc.h /tmp/ffmpeg-x86/libavcodec/tableprint_vlc.h
37a38,39
> #define AV_INPUT_BUFFER_PADDING_SIZE 64 // the value does not matter for this
> #define avpriv_request_sample(...)
diff -r android/contrib/ffmpeg-x86/libavcodec/takdec.c /tmp/ffmpeg-x86/libavcodec/takdec.c
179,180c179,180
<     s->uval           = FFALIGN(avctx->sample_rate + 511 >> 9, 4) << shift;
<     s->subframe_scale = FFALIGN(avctx->sample_rate + 511 >> 9, 4) << 1;
---
>     s->uval           = FFALIGN(avctx->sample_rate + 511LL >> 9, 4) << shift;
>     s->subframe_scale = FFALIGN(avctx->sample_rate + 511LL >> 9, 4) << 1;
656c656
<                 v = av_clip_intp2(v >> 10, 13) * (1 << dshift) - *p1;
---
>                 v = av_clip_intp2(v >> 10, 13) * (1U << dshift) - *p1;
diff -r android/contrib/ffmpeg-x86/libavcodec/targa.c /tmp/ffmpeg-x86/libavcodec/targa.c
135,140d134
<     if (bytestream2_get_bytes_left(&s->gb) <= idlen) {
<         av_log(avctx, AV_LOG_ERROR,
<                 "Not enough data to read header\n");
<         return AVERROR_INVALIDDATA;
<     }
< 
146a141,146
>     }
> 
>     if (bytestream2_get_bytes_left(&s->gb) < idlen + 2*colors) {
>         av_log(avctx, AV_LOG_ERROR,
>                 "Not enough data to read header\n");
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/tdsc.c /tmp/ffmpeg-x86/libavcodec/tdsc.c
190c190
<     int i, j, k, ret, bits, cursor_fmt;
---
>     int i, j, k, ret, cursor_fmt;
234c234
<                 bits = bytestream2_get_be32(&ctx->gbc);
---
>                 uint32_t bits = bytestream2_get_be32(&ctx->gbc);
247c247
<                 bits = bytestream2_get_be32(&ctx->gbc);
---
>                 uint32_t bits = bytestream2_get_be32(&ctx->gbc);
diff -r android/contrib/ffmpeg-x86/libavcodec/tests/rangecoder.c /tmp/ffmpeg-x86/libavcodec/tests/rangecoder.c
32c32
<     uint8_t b[9 * SIZE];
---
>     uint8_t b[9 * SIZE] = {0};
diff -r android/contrib/ffmpeg-x86/libavcodec/tiff.c /tmp/ffmpeg-x86/libavcodec/tiff.c
574c574
<         if (is_yuv)
---
>         if (is_yuv || p->format == AV_PIX_FMT_GRAY12)
diff -r android/contrib/ffmpeg-x86/libavcodec/truemotion1.c /tmp/ffmpeg-x86/libavcodec/truemotion1.c
446a447,448
>         if (s->avctx->width * s->avctx->height / 2048 + header.header_size > s->size)
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/truemotion2.c /tmp/ffmpeg-x86/libavcodec/truemotion2.c
65a66
>     int error;
400a402
>         ctx->error = 1;
444,445c446,447
<     CD[0] = CHR[1] - last[1];\
<     CD[1] = (int)CHR[stride + 1] - (int)CHR[1];\
---
>     CD[0] = (unsigned)CHR[         1] - (unsigned)last[1];\
>     CD[1] = (unsigned)CHR[stride + 1] - (unsigned) CHR[1];\
452c454
<     int ct, d;
---
>     unsigned ct, d;
481c483
< static inline void tm2_low_chroma(int *data, int stride, int *clast, int *CD, int *deltas, int bx)
---
> static inline void tm2_low_chroma(int *data, int stride, int *clast, unsigned *CD, int *deltas, int bx)
491,492c493,494
<     t        = (CD[0] + CD[1]) >> 1;
<     l        = (prev - CD[0] - CD[1] + clast[1]) >> 1;
---
>     t        = (int)(CD[0] + CD[1]) >> 1;
>     l        = (int)(prev - CD[0] - CD[1] + clast[1]) >> 1;
569c571
<         last[0] = (last[-1] - ctx->D[0] - ctx->D[1] - ctx->D[2] - ctx->D[3] + last[1]) >> 1;
---
>         last[0] = (int)((unsigned)last[-1] - ctx->D[0] - ctx->D[1] - ctx->D[2] - ctx->D[3] + last[1]) >> 1;
571,572c573,574
<         last[0] = (last[1]  - ctx->D[0] - ctx->D[1] - ctx->D[2] - ctx->D[3])>> 1;
<     last[2] = (last[1] + last[3]) >> 1;
---
>         last[0] = (int)((unsigned)last[1]  - ctx->D[0] - ctx->D[1] - ctx->D[2] - ctx->D[3])>> 1;
>     last[2] = (int)((unsigned)last[1] + last[3]) >> 1;
574c576
<     t1 = ctx->D[0] + ctx->D[1];
---
>     t1 = ctx->D[0] + (unsigned)ctx->D[1];
577c579
<     t2 = ctx->D[2] + ctx->D[3];
---
>     t2 = ctx->D[2] + (unsigned)ctx->D[3];
588c590,591
<     int left, right, diff;
---
>     unsigned left, right;
>     int diff;
606c609
<         left = last[-1] - ct;
---
>         left = last[-1] - (unsigned)ct;
617c620
<         int tp = left;
---
>         unsigned tp = left;
668c671
<     int d;
---
>     unsigned d;
674,675c677,678
<             U[i] = Uo[i] + GET_TOK(ctx, TM2_UPD);
<             V[i] = Vo[i] + GET_TOK(ctx, TM2_UPD);
---
>             U[i] = Uo[i] + (unsigned)GET_TOK(ctx, TM2_UPD);
>             V[i] = Vo[i] + (unsigned)GET_TOK(ctx, TM2_UPD);
688,691c691,694
<     ctx->D[0] = Yo[3] - last[3];
<     ctx->D[1] = Yo[3 + oYstride] - Yo[3];
<     ctx->D[2] = Yo[3 + oYstride * 2] - Yo[3 + oYstride];
<     ctx->D[3] = Yo[3 + oYstride * 3] - Yo[3 + oYstride * 2];
---
>     ctx->D[0] = (unsigned)Yo[3] - last[3];
>     ctx->D[1] = (unsigned)Yo[3 + oYstride] - Yo[3];
>     ctx->D[2] = (unsigned)Yo[3 + oYstride * 2] - Yo[3 + oYstride];
>     ctx->D[3] = (unsigned)Yo[3 + oYstride * 3] - Yo[3 + oYstride * 2];
696c699
<             Y[i]    = Yo[i] + GET_TOK(ctx, TM2_UPD);
---
>             Y[i]    = Yo[i] + (unsigned)GET_TOK(ctx, TM2_UPD);
751,754c754,757
<     ctx->D[0] = Y[3] - last[3];
<     ctx->D[1] = Y[3 + Ystride] - Y[3];
<     ctx->D[2] = Y[3 + Ystride * 2] - Y[3 + Ystride];
<     ctx->D[3] = Y[3 + Ystride * 3] - Y[3 + Ystride * 2];
---
>     ctx->D[0] = (unsigned)Y[3] - last[3];
>     ctx->D[1] = (unsigned)Y[3 + Ystride] - Y[3];
>     ctx->D[2] = (unsigned)Y[3 + Ystride * 2] - Y[3 + Ystride];
>     ctx->D[3] = (unsigned)Y[3 + Ystride * 3] - Y[3 + Ystride * 2];
811a815,816
>             if (ctx->error)
>                 return AVERROR_INVALIDDATA;
822c827
<             int y = Y[i], u = U[i >> 1], v = V[i >> 1];
---
>             unsigned y = Y[i], u = U[i >> 1], v = V[i >> 1];
890a896,897
> 
>     l->error = 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/truemotion2rt.c /tmp/ffmpeg-x86/libavcodec/truemotion2rt.c
118a119,121
>     if ((avctx->width + s->hscale - 1)/ s->hscale * avctx->height * s->delta_size > avpkt->size * 8LL * 4)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/tta.c /tmp/ffmpeg-x86/libavcodec/tta.c
230c230
<     int32_t *p;
---
>     uint32_t *p;
264c264
<     for (p = s->decode_buffer; p < s->decode_buffer + (framelen * s->channels); p++) {
---
>     for (p = s->decode_buffer; (int32_t*)p < s->decode_buffer + (framelen * s->channels); p++) {
337c337
<                 for (*p += *r / 2; r > p - s->channels; r--)
---
>                 for (*p += *r / 2; r > (int32_t*)p - s->channels; r--)
361c361
<         for (p = s->decode_buffer; p < s->decode_buffer + (framelen * s->channels); p++)
---
>         for (p = s->decode_buffer; (int32_t*)p < s->decode_buffer + (framelen * s->channels); p++)
367c367
<         for (p = s->decode_buffer; p < s->decode_buffer + (framelen * s->channels); p++)
---
>         for (p = s->decode_buffer; (int32_t*)p < s->decode_buffer + (framelen * s->channels); p++)
375c375
<             *samples++ <<= 8;
---
>             *samples++ *= 256;
diff -r android/contrib/ffmpeg-x86/libavcodec/ttadsp.c /tmp/ffmpeg-x86/libavcodec/ttadsp.c
23c23
< static void tta_filter_process_c(int32_t *qm, int32_t *dx, int32_t *dl,
---
> static void tta_filter_process_c(int32_t *qmi, int32_t *dx, int32_t *dl,
25a26,27
>     uint32_t *qm = qmi;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/ttaenc.c /tmp/ffmpeg-x86/libavcodec/ttaenc.c
167c167
<                     put_bits(&pb, unary, (1 << unary) - 1);
---
>                     put_bits(&pb, unary, (1U << unary) - 1);
diff -r android/contrib/ffmpeg-x86/libavcodec/twinvq.c /tmp/ffmpeg-x86/libavcodec/twinvq.c
773a774
>     int64_t frames_per_packet;
780,782c781,785
<     } else if (avctx->block_align * 8 < tctx->frame_size) {
<         av_log(avctx, AV_LOG_ERROR, "Block align is %d bits, expected %d\n",
<                avctx->block_align * 8, tctx->frame_size);
---
>     }
>     frames_per_packet = avctx->block_align * 8LL / tctx->frame_size;
>     if (frames_per_packet <= 0) {
>         av_log(avctx, AV_LOG_ERROR, "Block align is %"PRId64" bits, expected %d\n",
>                avctx->block_align * (int64_t)8, tctx->frame_size);
785,788c788,790
<     tctx->frames_per_packet = avctx->block_align * 8 / tctx->frame_size;
<     if (tctx->frames_per_packet > TWINVQ_MAX_FRAMES_PER_PACKET) {
<         av_log(avctx, AV_LOG_ERROR, "Too many frames per packet (%d)\n",
<                tctx->frames_per_packet);
---
>     if (frames_per_packet > TWINVQ_MAX_FRAMES_PER_PACKET) {
>         av_log(avctx, AV_LOG_ERROR, "Too many frames per packet (%"PRId64")\n",
>                frames_per_packet);
790a793
>     tctx->frames_per_packet = frames_per_packet;
diff -r android/contrib/ffmpeg-x86/libavcodec/twinvqdec.c /tmp/ffmpeg-x86/libavcodec/twinvqdec.c
407c407
<     if (avctx->block_align && avctx->block_align * 8 / tctx->frame_size > 1) {
---
>     if (avctx->block_align && avctx->block_align * 8LL / tctx->frame_size > 1) {
diff -r android/contrib/ffmpeg-x86/libavcodec/txd.c /tmp/ffmpeg-x86/libavcodec/txd.c
45a46,48
>     if (avpkt->size < 88)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/ulti.c /tmp/ffmpeg-x86/libavcodec/ulti.c
52a53,54
>     if (s->blocks == 0)
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/unary.h /tmp/ffmpeg-x86/libavcodec/unary.h
31c31,44
<  * @return Unary length/index
---
>  * @return unary 0 based code index. This is also the length in bits of the
>  * code excluding the stop bit.
>  * (in case len=1)
>  * 1            0
>  * 0            1
>  * (in case len=2)
>  * 1            0
>  * 01           1
>  * 00           2
>  * (in case len=3)
>  * 1            0
>  * 01           1
>  * 001          2
>  * 000          3
diff -r android/contrib/ffmpeg-x86/libavcodec/utils.c /tmp/ffmpeg-x86/libavcodec/utils.c
422c422,425
<     if (s->codec_id == AV_CODEC_ID_H264 || s->lowres) {
---
>     if (s->codec_id == AV_CODEC_ID_H264 || s->lowres ||
>         s->codec_id == AV_CODEC_ID_VP5  || s->codec_id == AV_CODEC_ID_VP6 ||
>         s->codec_id == AV_CODEC_ID_VP6F || s->codec_id == AV_CODEC_ID_VP6A
>     ) {
515c518
<     int p, y, x;
---
>     int p, y;
524,529c527,529
<         for (y = 0; y < height; y++) {
<             if (desc->comp[0].depth >= 9) {
<                 for (x = 0; x<bytes; x++)
<                     ((uint16_t*)dst)[x] = c[p];
<             }else
<                 memset(dst, c[p], bytes);
---
>         if (desc->comp[0].depth >= 9) {
>             ((uint16_t*)dst)[0] = c[p];
>             av_memcpy_backptr(dst + 2, 2, bytes - 2);
530a531,539
>             for (y = 1; y < height; y++) {
>                 memcpy(dst, frame->data[p], 2*bytes);
>                 dst += frame->linesize[p];
>             }
>         } else {
>             for (y = 0; y < height; y++) {
>                 memset(dst, c[p], bytes);
>                 dst += frame->linesize[p];
>             }
629a639
>     int codec_init_ok = 0;
658c668
<     avctx->internal = av_mallocz(sizeof(AVCodecInternal));
---
>     avctx->internal = av_mallocz(sizeof(*avctx->internal));
770a781,790
>     if (avctx->sample_rate < 0) {
>         av_log(avctx, AV_LOG_ERROR, "Invalid sample rate: %d\n", avctx->sample_rate);
>         ret = AVERROR(EINVAL);
>         goto free_and_end;
>     }
>     if (avctx->block_align < 0) {
>         av_log(avctx, AV_LOG_ERROR, "Invalid block align: %d\n", avctx->block_align);
>         ret = AVERROR(EINVAL);
>         goto free_and_end;
>     }
1023a1044
>         codec_init_ok = 1;
1055a1077,1080
>         if (avctx->bits_per_coded_sample < 0) {
>             ret = AVERROR(EINVAL);
>             goto free_and_end;
>         }
1112,1113c1137,1139
<     if (avctx->codec &&
<         (avctx->codec->caps_internal & FF_CODEC_CAP_INIT_CLEANUP))
---
>     if (avctx->codec && avctx->codec->close &&
>         (codec_init_ok ||
>          (avctx->codec->caps_internal & FF_CODEC_CAP_INIT_CLEANUP)))
1115a1142,1144
>     if (HAVE_THREADS && avctx->internal->thread_ctx)
>         ff_thread_free(avctx);
> 
1127a1157
>     av_freep(&avctx->subtitle_header);
1160c1190
<     memset(sub, 0, sizeof(AVSubtitle));
---
>     memset(sub, 0, sizeof(*sub));
diff -r android/contrib/ffmpeg-x86/libavcodec/utvideodec.c /tmp/ffmpeg-x86/libavcodec/utvideodec.c
32a33
> #include "libavutil/pixdesc.h"
262c263
<                         prev += pix;
---
>                         prev += (unsigned)pix;
564c565
<                     bytestream2_get_bytes_left(&gb) < slice_end) {
---
>                     bytestream2_get_bytes_left(&gb) < slice_end + 1024LL) {
791a793
>     int h_shift, v_shift;
799,829d800
<     if (avctx->extradata_size >= 16) {
<         av_log(avctx, AV_LOG_DEBUG, "Encoder version %d.%d.%d.%d\n",
<                avctx->extradata[3], avctx->extradata[2],
<                avctx->extradata[1], avctx->extradata[0]);
<         av_log(avctx, AV_LOG_DEBUG, "Original format %"PRIX32"\n",
<                AV_RB32(avctx->extradata + 4));
<         c->frame_info_size = AV_RL32(avctx->extradata + 8);
<         c->flags           = AV_RL32(avctx->extradata + 12);
< 
<         if (c->frame_info_size != 4)
<             avpriv_request_sample(avctx, "Frame info not 4 bytes");
<         av_log(avctx, AV_LOG_DEBUG, "Encoding parameters %08"PRIX32"\n", c->flags);
<         c->slices      = (c->flags >> 24) + 1;
<         c->compression = c->flags & 1;
<         c->interlaced  = c->flags & 0x800;
<     } else if (avctx->extradata_size == 8) {
<         av_log(avctx, AV_LOG_DEBUG, "Encoder version %d.%d.%d.%d\n",
<                avctx->extradata[3], avctx->extradata[2],
<                avctx->extradata[1], avctx->extradata[0]);
<         av_log(avctx, AV_LOG_DEBUG, "Original format %"PRIX32"\n",
<                AV_RB32(avctx->extradata + 4));
<         c->interlaced  = 0;
<         c->pro         = 1;
<         c->frame_info_size = 4;
<     } else {
<         av_log(avctx, AV_LOG_ERROR,
<                "Insufficient extradata size %d, should be at least 16\n",
<                avctx->extradata_size);
<         return AVERROR_INVALIDDATA;
<     }
< 
857a829
>         c->pro         = 1;
861a834
>         c->pro         = 1;
865a839
>         c->pro         = 1;
885a860,896
>         return AVERROR_INVALIDDATA;
>     }
> 
>     av_pix_fmt_get_chroma_sub_sample(avctx->pix_fmt, &h_shift, &v_shift);
>     if ((avctx->width  & ((1<<h_shift)-1)) ||
>         (avctx->height & ((1<<v_shift)-1))) {
>         avpriv_request_sample(avctx, "Odd dimensions");
>         return AVERROR_PATCHWELCOME;
>     }
> 
>     if (!c->pro && avctx->extradata_size >= 16) {
>         av_log(avctx, AV_LOG_DEBUG, "Encoder version %d.%d.%d.%d\n",
>                avctx->extradata[3], avctx->extradata[2],
>                avctx->extradata[1], avctx->extradata[0]);
>         av_log(avctx, AV_LOG_DEBUG, "Original format %"PRIX32"\n",
>                AV_RB32(avctx->extradata + 4));
>         c->frame_info_size = AV_RL32(avctx->extradata + 8);
>         c->flags           = AV_RL32(avctx->extradata + 12);
> 
>         if (c->frame_info_size != 4)
>             avpriv_request_sample(avctx, "Frame info not 4 bytes");
>         av_log(avctx, AV_LOG_DEBUG, "Encoding parameters %08"PRIX32"\n", c->flags);
>         c->slices      = (c->flags >> 24) + 1;
>         c->compression = c->flags & 1;
>         c->interlaced  = c->flags & 0x800;
>     } else if (c->pro && avctx->extradata_size == 8) {
>         av_log(avctx, AV_LOG_DEBUG, "Encoder version %d.%d.%d.%d\n",
>                avctx->extradata[3], avctx->extradata[2],
>                avctx->extradata[1], avctx->extradata[0]);
>         av_log(avctx, AV_LOG_DEBUG, "Original format %"PRIX32"\n",
>                AV_RB32(avctx->extradata + 4));
>         c->interlaced  = 0;
>         c->frame_info_size = 4;
>     } else {
>         av_log(avctx, AV_LOG_ERROR,
>                "Insufficient extradata size %d, should be at least 16\n",
>                avctx->extradata_size);
diff -r android/contrib/ffmpeg-x86/libavcodec/v4l2_m2m.h /tmp/ffmpeg-x86/libavcodec/v4l2_m2m.h
86c86
<  * Reinitializes the V4L2m2mContext when the driver cant continue processing
---
>  * Reinitializes the V4L2m2mContext when the driver cannot continue processing
96c96
<  * Reinitializes the V4L2m2mContext when the driver cant continue processing
---
>  * Reinitializes the V4L2m2mContext when the driver cannot continue processing
diff -r android/contrib/ffmpeg-x86/libavcodec/vb.c /tmp/ffmpeg-x86/libavcodec/vb.c
109a110,113
>             if (bytestream2_get_bytes_left(&g) < 1) {
>                 av_log(c->avctx, AV_LOG_ERROR, "Insufficient data\n");
>                 return AVERROR_INVALIDDATA;
>             }
196a201,203
> 
>     if (avpkt->size < 2)
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/vc1_block.c /tmp/ffmpeg-x86/libavcodec/vc1_block.c
414c414
<             c = (c * s->y_dc_scale_table[q2] * ff_vc1_dqscale[dqscale_index] + 0x20000) >> 18;
---
>             c = (int)((unsigned)c * s->y_dc_scale_table[q2] * ff_vc1_dqscale[dqscale_index] + 0x20000) >> 18;
419c419
<             a = (a * s->y_dc_scale_table[q2] * ff_vc1_dqscale[dqscale_index] + 0x20000) >> 18;
---
>             a = (int)((unsigned)a * s->y_dc_scale_table[q2] * ff_vc1_dqscale[dqscale_index] + 0x20000) >> 18;
429c429
<             b = (b * s->y_dc_scale_table[q2] * ff_vc1_dqscale[dqscale_index] + 0x20000) >> 18;
---
>             b = (int)((unsigned)b * s->y_dc_scale_table[q2] * ff_vc1_dqscale[dqscale_index] + 0x20000) >> 18;
492c492
< static void vc1_decode_ac_coeff(VC1Context *v, int *last, int *skip,
---
> static int vc1_decode_ac_coeff(VC1Context *v, int *last, int *skip,
498a499,500
>     if (index < 0)
>         return index;
507a510,511
>             if (index >= ff_vc1_ac_sizes[codingset] - 1U)
>                 return AVERROR_INVALIDDATA;
543a548,549
> 
>     return 0;
597c603
<     ac_val  = s->ac_val[0][0] + s->block_index[n] * 16;
---
>     ac_val  = s->ac_val[0][s->block_index[n]];
623c629,631
<             vc1_decode_ac_coeff(v, &last, &skip, &value, codingset);
---
>             int ret = vc1_decode_ac_coeff(v, &last, &skip, &value, codingset);
>             if (ret < 0)
>                 return ret;
748c756
<     ac_val  = s->ac_val[0][0] + s->block_index[n] * 16;
---
>     ac_val  = s->ac_val[0][s->block_index[n]];
795c803,805
<             vc1_decode_ac_coeff(v, &last, &skip, &value, codingset);
---
>             int ret = vc1_decode_ac_coeff(v, &last, &skip, &value, codingset);
>             if (ret < 0)
>                 return ret;
818c828
<                     block[k << sh] += (ac_val[k] * q2 * ff_vc1_dqscale[q1 - 1] + 0x20000) >> 18;
---
>                     block[k << sh] += (int)(ac_val[k] * (unsigned)q2 * ff_vc1_dqscale[q1 - 1] + 0x20000) >> 18;
860c870
<                     ac_val2[k] = (ac_val2[k] * q2 * ff_vc1_dqscale[q1 - 1] + 0x20000) >> 18;
---
>                     ac_val2[k] = (int)(ac_val2[k] * q2 * (unsigned)ff_vc1_dqscale[q1 - 1] + 0x20000) >> 18;
949c959
<     ac_val = s->ac_val[0][0] + s->block_index[n] * 16;
---
>     ac_val = s->ac_val[0][s->block_index[n]];
975c985,987
<             vc1_decode_ac_coeff(v, &last, &skip, &value, codingset);
---
>             int ret = vc1_decode_ac_coeff(v, &last, &skip, &value, codingset);
>             if (ret < 0)
>                 return ret;
1004c1016
<                         block[k << v->left_blk_sh] += (ac_val[k] * q2 * ff_vc1_dqscale[q1 - 1] + 0x20000) >> 18;
---
>                         block[k << v->left_blk_sh] += (int)(ac_val[k] * q2 * (unsigned)ff_vc1_dqscale[q1 - 1] + 0x20000) >> 18;
1007c1019
<                         block[k << v->top_blk_sh] += (ac_val[k + 8] * q2 * ff_vc1_dqscale[q1 - 1] + 0x20000) >> 18;
---
>                         block[k << v->top_blk_sh] += (int)(ac_val[k + 8] * q2 * (unsigned)ff_vc1_dqscale[q1 - 1] + 0x20000) >> 18;
1138c1150,1152
<             vc1_decode_ac_coeff(v, &last, &skip, &value, v->codingset2);
---
>             int ret = vc1_decode_ac_coeff(v, &last, &skip, &value, v->codingset2);
>             if (ret < 0)
>                 return ret;
1166c1180,1182
<                 vc1_decode_ac_coeff(v, &last, &skip, &value, v->codingset2);
---
>                 int ret = vc1_decode_ac_coeff(v, &last, &skip, &value, v->codingset2);
>                 if (ret < 0)
>                     return ret;
1193c1209,1211
<                 vc1_decode_ac_coeff(v, &last, &skip, &value, v->codingset2);
---
>                 int ret = vc1_decode_ac_coeff(v, &last, &skip, &value, v->codingset2);
>                 if (ret < 0)
>                     return ret;
1220c1238,1240
<                 vc1_decode_ac_coeff(v, &last, &skip, &value, v->codingset2);
---
>                 int ret = vc1_decode_ac_coeff(v, &last, &skip, &value, v->codingset2);
>                 if (ret < 0)
>                     return ret;
1961c1981
<                     s->block[i][j] <<= 1;
---
>                     s->block[i][j] *= 2;
diff -r android/contrib/ffmpeg-x86/libavcodec/vc1.c /tmp/ffmpeg-x86/libavcodec/vc1.c
459c459,463
<             av_reduce(&v->s.avctx->sample_aspect_ratio.num,
---
>             if (v->s.avctx->width  > v->max_coded_width ||
>                 v->s.avctx->height > v->max_coded_height) {
>                 avpriv_request_sample(v->s.avctx, "Huge resolution");
>             } else
>                 av_reduce(&v->s.avctx->sample_aspect_ratio.num,
940c944,946
<                 v->refdist += get_unary(gb, 0, 16);
---
>                 v->refdist += get_unary(gb, 0, 14);
>             if (v->refdist > 16)
>                 return AVERROR_INVALIDDATA;
1314,1317d1319
<     if (v->fcm != PROGRESSIVE && !v->s.quarter_sample) {
<         v->range_x <<= 1;
<         v->range_y <<= 1;
<     }
1323a1326,1330
>     else if (v->fcm != PROGRESSIVE && !v->s.quarter_sample) {
>         v->range_x <<= 1;
>         v->range_y <<= 1;
>     }
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/vc1dec.c /tmp/ffmpeg-x86/libavcodec/vc1dec.c
434c434
<         return -1;
---
>         return AVERROR_INVALIDDATA;
452a453,457
>         if (avctx->codec_id == AV_CODEC_ID_WMV3IMAGE && !v->res_sprite) {
>             avpriv_request_sample(avctx, "Non sprite WMV3IMAGE");
>             return AVERROR_PATCHWELCOME;
>         }
> 
470c475
<             return -1;
---
>             return AVERROR_INVALIDDATA;
506c511
<             return -1;
---
>             return AVERROR_INVALIDDATA;
574c579,582
<             v->output_height > 1 << 14) return -1;
---
>             v->output_height > 1 << 14) {
>             ret = AVERROR_INVALIDDATA;
>             goto error;
>         }
578c586,587
<             return AVERROR_PATCHWELCOME;
---
>             ret = AVERROR_PATCHWELCOME;
>             goto error;
581a591,593
> error:
>     av_frame_free(&v->sprite_output_frame);
>     return ret;
868c880,885
< 
---
>     if ((avctx->codec_id == AV_CODEC_ID_WMV3IMAGE || avctx->codec_id == AV_CODEC_ID_VC1IMAGE)
>         && v->field_mode) {
>         av_log(v->s.avctx, AV_LOG_ERROR, "Sprite decoder: expected Frames not Fields\n");
>         ret = AVERROR_INVALIDDATA;
>         goto err;
>     }
1003c1020
<         v->bits = buf_size * 8;
---
>         v->bits = FFMIN(buf_size * 8, s->gb.size_in_bits);
1075c1092
<             if (i != n_slices)
---
>             if (i != n_slices) {
1076a1094,1095
>                 v->bits = FFMIN(buf_size * 8, s->gb.size_in_bits);
>             }
diff -r android/contrib/ffmpeg-x86/libavcodec/vc1dsp.c /tmp/ffmpeg-x86/libavcodec/vc1dsp.c
98,101c98,101
<         top[48]   = ((a << 3) - d1 + rnd1) >> 3;
<         top[56]   = ((b << 3) - d2 + rnd2) >> 3;
<         bottom[0] = ((c << 3) + d2 + rnd1) >> 3;
<         bottom[8] = ((d << 3) + d1 + rnd2) >> 3;
---
>         top[48]   = ((a * 8) - d1 + rnd1) >> 3;
>         top[56]   = ((b * 8) - d2 + rnd2) >> 3;
>         bottom[0] = ((c * 8) + d2 + rnd1) >> 3;
>         bottom[8] = ((d * 8) + d1 + rnd2) >> 3;
124,127c124,127
<         left[6]  = ((a << 3) - d1 + rnd1) >> 3;
<         left[7]  = ((b << 3) - d2 + rnd2) >> 3;
<         right[0] = ((c << 3) + d2 + rnd1) >> 3;
<         right[1] = ((d << 3) + d1 + rnd2) >> 3;
---
>         left[6]  = ((a * 8) - d1 + rnd1) >> 3;
>         left[7]  = ((b * 8) - d2 + rnd2) >> 3;
>         right[0] = ((c * 8) + d2 + rnd1) >> 3;
>         right[1] = ((d * 8) + d1 + rnd2) >> 3;
diff -r android/contrib/ffmpeg-x86/libavcodec/vc1_pred.c /tmp/ffmpeg-x86/libavcodec/vc1_pred.c
181c181
<     n = (n * scalesame >> 8) << hpel;
---
>     n = (n * scalesame >> 8) * (1 << hpel);
194c194
<             n = scaleforopp_y(v, n, dir) << hpel;
---
>             n = scaleforopp_y(v, n, dir) * (1 << hpel);
196c196
<             n = scaleforopp_x(v, n) << hpel;
---
>             n = scaleforopp_x(v, n)      * (1 << hpel);
200c200
<         refdist = FFMIN(v->refdist, 3);
---
>         refdist = v->refdist;
202a203
>     refdist = FFMIN(refdist, 3);
diff -r android/contrib/ffmpeg-x86/libavcodec/vc2enc.c /tmp/ffmpeg-x86/libavcodec/vc2enc.c
1174c1174
<         p->coef_buf = av_malloc(p->coef_stride*p->dwt_height*sizeof(dwtcoef));
---
>         p->coef_buf = av_mallocz(p->coef_stride*p->dwt_height*sizeof(dwtcoef));
1193c1193,1194
<                                       s->plane[i].dwt_height))
---
>                                       s->plane[i].dwt_height,
>                                       s->slice_width, s->slice_height))
diff -r android/contrib/ffmpeg-x86/libavcodec/vc2enc_dwt.c /tmp/ffmpeg-x86/libavcodec/vc2enc_dwt.c
258c258,259
< av_cold int ff_vc2enc_init_transforms(VC2TransformContext *s, int p_width, int p_height)
---
> av_cold int ff_vc2enc_init_transforms(VC2TransformContext *s, int p_stride,
>                                       int p_height, int slice_w, int slice_h)
265c266,267
<     s->buffer = av_malloc(2*p_width*p_height*sizeof(dwtcoef));
---
>     /* Pad by the slice size, only matters for non-Haar wavelets */
>     s->buffer = av_calloc((p_stride + slice_w)*(p_height + slice_h), sizeof(dwtcoef));
268a271,273
>     s->padding = (slice_h >> 1)*p_stride + (slice_w >> 1);
>     s->buffer += s->padding;
> 
274c279,280
<     av_freep(&s->buffer);
---
>     av_free(s->buffer - s->padding);
>     s->buffer = NULL;
diff -r android/contrib/ffmpeg-x86/libavcodec/vc2enc_dwt.h /tmp/ffmpeg-x86/libavcodec/vc2enc_dwt.h
43a44
>     int padding;
49c50,51
< int  ff_vc2enc_init_transforms(VC2TransformContext *t, int p_width, int p_height);
---
> int  ff_vc2enc_init_transforms(VC2TransformContext *t, int p_stride, int p_height,
>                                int slice_w, int slice_h);
diff -r android/contrib/ffmpeg-x86/libavcodec/videodsp_template.c /tmp/ffmpeg-x86/libavcodec/videodsp_template.c
47c47,48
<         src  += (w - 1 - src_x) * sizeof(pixel);
---
>         // The subtracted expression has an unsigned type and must thus not be negative
>         src  -= (1 + src_x - w) * sizeof(pixel);
diff -r android/contrib/ffmpeg-x86/libavcodec/vmdaudio.c /tmp/ffmpeg-x86/libavcodec/vmdaudio.c
79c79,81
<     if (avctx->block_align < 1 || avctx->block_align % avctx->channels) {
---
>     if (avctx->block_align < 1 || avctx->block_align % avctx->channels ||
>         avctx->block_align > INT_MAX - avctx->channels
>     ) {
180a183,185
> 
>     if (silent_chunks + audio_chunks >= INT_MAX / avctx->block_align)
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/vmnc.c /tmp/ffmpeg-x86/libavcodec/vmnc.c
335a336,341
>     bytestream2_init(gb, buf, buf_size);
>     bytestream2_skip(gb, 2);
>     chunks = bytestream2_get_be16(gb);
>     if (12LL * chunks > bytestream2_get_bytes_left(gb))
>         return AVERROR_INVALIDDATA;
> 
339,340d344
<     bytestream2_init(gb, buf, buf_size);
< 
372,373c376
<     bytestream2_skip(gb, 2);
<     chunks = bytestream2_get_be16(gb);
---
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/vorbis.c /tmp/ffmpeg-x86/libavcodec/vorbis.c
70c70
<         exit_at_level[i+1] = 1 << i;
---
>         exit_at_level[i+1] = 1u << i;
94c94
<             exit_at_level[j] = code + (1 << (j - 1));
---
>             exit_at_level[j] = code + (1u << (j - 1));
diff -r android/contrib/ffmpeg-x86/libavcodec/vorbisdec.c /tmp/ffmpeg-x86/libavcodec/vorbisdec.c
1100c1100,1101
<     unsigned amplitude, book_idx;
---
>     unsigned book_idx;
>     uint64_t amplitude;
1106c1107
<     amplitude = get_bits(&vc->gb, vf->amplitude_bits);
---
>     amplitude = get_bits64(&vc->gb, vf->amplitude_bits);
1130,1131c1131,1134
<                                codebook.nb_bits, codebook.maxdepth)
<                       * codebook.dimensions;
---
>                                codebook.nb_bits, codebook.maxdepth);
>             if (vec_off < 0)
>                 return AVERROR_INVALIDDATA;
>             vec_off *= codebook.dimensions;
1181a1185,1187
>                 if (p + q == 0.0)
>                     return AVERROR_INVALIDDATA;
> 
1184c1190
<                           (((1 << vf->amplitude_bits) - 1) * sqrt(p + q)))
---
>                           (((1ULL << vf->amplitude_bits) - 1) * sqrt(p + q)))
1358,1359c1364,1369
<             av_assert0(vr->classifications > 1); //needed for inverse[]
< 
---
>             if (vr->classifications == 1) {
>                 for (i = partition_count + c_p_c - 1; i >= partition_count; i--) {
>                     if (i < ptns_to_read)
>                         vr->classifs[p + i] = 0;
>                 }
>             } else {
1366a1377
>             }
1434c1445
<                             unsigned coffs;
---
>                             int coffs;
1443c1454,1457
<                                     coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3) * dim;
---
>                                     coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3);
>                                     if (coffs < 0)
>                                         return coffs;
>                                     coffs *= dim;
1450c1464,1467
<                                     coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3) * dim;
---
>                                     coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3);
>                                     if (coffs < 0)
>                                         return coffs;
>                                     coffs *= dim;
1463c1480,1483
<                                         coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3) * 2;
---
>                                         coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3);
>                                         if (coffs < 0)
>                                             return coffs;
>                                         coffs *= 2;
1469c1489,1492
<                                         coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3) * 4;
---
>                                         coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3);
>                                         if (coffs < 0)
>                                             return coffs;
>                                         coffs *= 4;
1477c1500,1503
<                                     coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3) * dim;
---
>                                     coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3);
>                                     if (coffs < 0)
>                                         return coffs;
>                                     coffs *= dim;
1490c1516
<                                 unsigned voffs_div = FASTDIV(voffset << 1, ch <<1);
---
>                                 unsigned voffs_div = ch == 1 ? voffset : FASTDIV(voffset, ch);
1494c1520,1523
<                                     coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3) * dim;
---
>                                     coffs = get_vlc2(gb, codebook.vlc.table, codebook.nb_bits, 3);
>                                     if (coffs < 0)
>                                         return coffs;
>                                     coffs *= dim;
diff -r android/contrib/ffmpeg-x86/libavcodec/vp3.c /tmp/ffmpeg-x86/libavcodec/vp3.c
954c954
<     if (num_coeffs < 0)
---
>     if (num_coeffs < 0) {
956a957,958
>         return AVERROR_INVALIDDATA;
>     }
980a983,985
>             if (!eob_run)
>                 eob_run = INT_MAX;
> 
2273a2279,2282
>     if (!s->theora) {
>         s->theora = 1;
>         avpriv_request_sample(s->avctx, "theora 0");
>     }
diff -r android/contrib/ffmpeg-x86/libavcodec/vp56.c /tmp/ffmpeg-x86/libavcodec/vp56.c
551c551
<     int av_uninit(alpha_offset);
---
>     int alpha_offset = remaining_buf_size;
564c564
<     res = s->parse_header(s, buf, remaining_buf_size);
---
>     res = s->parse_header(s, buf, alpha_offset);
diff -r android/contrib/ffmpeg-x86/libavcodec/vp56.h /tmp/ffmpeg-x86/libavcodec/vp56.h
91a92
>     int end_reached;
228a230,239
> 
> /**
>  * vp5689 returns 1 if the end of the stream has been reached, 0 otherwise.
>  */
> static av_always_inline int vpX_rac_is_end(VP56RangeCoder *c)
> {
>     if (c->end <= c->buffer && c->bits >= 0)
>         c->end_reached ++;
>     return c->end_reached > 10;
> }
diff -r android/contrib/ffmpeg-x86/libavcodec/vp56rac.c /tmp/ffmpeg-x86/libavcodec/vp56rac.c
45a46
>     c->end_reached = 0;
diff -r android/contrib/ffmpeg-x86/libavcodec/vp5.c /tmp/ffmpeg-x86/libavcodec/vp5.c
50a51,52
>         int render_x, render_y;
> 
66,67c68,72
<         vp56_rac_gets(c, 8);  /* number of displayed macroblock rows */
<         vp56_rac_gets(c, 8);  /* number of displayed macroblock cols */
---
>         render_y = vp56_rac_gets(c, 8);  /* number of displayed macroblock rows */
>         render_x = vp56_rac_gets(c, 8);  /* number of displayed macroblock cols */
>         if (render_x == 0 || render_x > cols ||
>             render_y == 0 || render_y > rows)
>             return AVERROR_INVALIDDATA;
186c191
<     if (c->end <= c->buffer && c->bits >= 0) {
---
>     if (vpX_rac_is_end(c)) {
diff -r android/contrib/ffmpeg-x86/libavcodec/vp6.c /tmp/ffmpeg-x86/libavcodec/vp6.c
463c463
<     if (c->end <= c->buffer && c->bits >= 0) {
---
>     if (vpX_rac_is_end(c)) {
diff -r android/contrib/ffmpeg-x86/libavcodec/vp8.c /tmp/ffmpeg-x86/libavcodec/vp8.c
608a609,610
>     if (vpX_rac_is_end(c))
>         return AVERROR_INVALIDDATA;
2302c2304
<     if (c->end <= c->buffer && c->bits >= 0)
---
>     if (vpX_rac_is_end(c))
2333c2335
<         if (c->end <= c->buffer && c->bits >= 0)
---
>         if (vpX_rac_is_end(c))
diff -r android/contrib/ffmpeg-x86/libavcodec/vp8_parser.c /tmp/ffmpeg-x86/libavcodec/vp8_parser.c
30a31,33
>     *poutbuf      = buf;
>     *poutbuf_size = buf_size;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/vp9.c /tmp/ffmpeg-x86/libavcodec/vp9.c
1637c1637,1638
<             if (ret < 0)
---
>             if (ret < 0) {
>                 ff_thread_report_progress(&s->s.frames[CUR_FRAME].tf, INT_MAX, 0);
1638a1640
>             }
diff -r android/contrib/ffmpeg-x86/libavcodec/vp9dsp_template.c /tmp/ffmpeg-x86/libavcodec/vp9dsp_template.c
1381,1422c1381,1422
<     t0  = IN(15) * 16364 + IN(0)  *   804;
<     t1  = IN(15) *   804 - IN(0)  * 16364;
<     t2  = IN(13) * 15893 + IN(2)  *  3981;
<     t3  = IN(13) *  3981 - IN(2)  * 15893;
<     t4  = IN(11) * 14811 + IN(4)  *  7005;
<     t5  = IN(11) *  7005 - IN(4)  * 14811;
<     t6  = IN(9)  * 13160 + IN(6)  *  9760;
<     t7  = IN(9)  *  9760 - IN(6)  * 13160;
<     t8  = IN(7)  * 11003 + IN(8)  * 12140;
<     t9  = IN(7)  * 12140 - IN(8)  * 11003;
<     t10 = IN(5)  *  8423 + IN(10) * 14053;
<     t11 = IN(5)  * 14053 - IN(10) *  8423;
<     t12 = IN(3)  *  5520 + IN(12) * 15426;
<     t13 = IN(3)  * 15426 - IN(12) *  5520;
<     t14 = IN(1)  *  2404 + IN(14) * 16207;
<     t15 = IN(1)  * 16207 - IN(14) *  2404;
< 
<     t0a  = (t0 + t8  + (1 << 13)) >> 14;
<     t1a  = (t1 + t9  + (1 << 13)) >> 14;
<     t2a  = (t2 + t10 + (1 << 13)) >> 14;
<     t3a  = (t3 + t11 + (1 << 13)) >> 14;
<     t4a  = (t4 + t12 + (1 << 13)) >> 14;
<     t5a  = (t5 + t13 + (1 << 13)) >> 14;
<     t6a  = (t6 + t14 + (1 << 13)) >> 14;
<     t7a  = (t7 + t15 + (1 << 13)) >> 14;
<     t8a  = (t0 - t8  + (1 << 13)) >> 14;
<     t9a  = (t1 - t9  + (1 << 13)) >> 14;
<     t10a = (t2 - t10 + (1 << 13)) >> 14;
<     t11a = (t3 - t11 + (1 << 13)) >> 14;
<     t12a = (t4 - t12 + (1 << 13)) >> 14;
<     t13a = (t5 - t13 + (1 << 13)) >> 14;
<     t14a = (t6 - t14 + (1 << 13)) >> 14;
<     t15a = (t7 - t15 + (1 << 13)) >> 14;
< 
<     t8   = t8a  * 16069 + t9a  *  3196;
<     t9   = t8a  *  3196 - t9a  * 16069;
<     t10  = t10a *  9102 + t11a * 13623;
<     t11  = t10a * 13623 - t11a *  9102;
<     t12  = t13a * 16069 - t12a *  3196;
<     t13  = t13a *  3196 + t12a * 16069;
<     t14  = t15a *  9102 - t14a * 13623;
<     t15  = t15a * 13623 + t14a *  9102;
---
>     t0  = IN(15) * 16364U + IN(0)  *   804U;
>     t1  = IN(15) *   804U - IN(0)  * 16364U;
>     t2  = IN(13) * 15893U + IN(2)  *  3981U;
>     t3  = IN(13) *  3981U - IN(2)  * 15893U;
>     t4  = IN(11) * 14811U + IN(4)  *  7005U;
>     t5  = IN(11) *  7005U - IN(4)  * 14811U;
>     t6  = IN(9)  * 13160U + IN(6)  *  9760U;
>     t7  = IN(9)  *  9760U - IN(6)  * 13160U;
>     t8  = IN(7)  * 11003U + IN(8)  * 12140U;
>     t9  = IN(7)  * 12140U - IN(8)  * 11003U;
>     t10 = IN(5)  *  8423U + IN(10) * 14053U;
>     t11 = IN(5)  * 14053U - IN(10) *  8423U;
>     t12 = IN(3)  *  5520U + IN(12) * 15426U;
>     t13 = IN(3)  * 15426U - IN(12) *  5520U;
>     t14 = IN(1)  *  2404U + IN(14) * 16207U;
>     t15 = IN(1)  * 16207U - IN(14) *  2404U;
> 
>     t0a  = (dctint)((1U << 13) + t0 + t8 ) >> 14;
>     t1a  = (dctint)((1U << 13) + t1 + t9 ) >> 14;
>     t2a  = (dctint)((1U << 13) + t2 + t10) >> 14;
>     t3a  = (dctint)((1U << 13) + t3 + t11) >> 14;
>     t4a  = (dctint)((1U << 13) + t4 + t12) >> 14;
>     t5a  = (dctint)((1U << 13) + t5 + t13) >> 14;
>     t6a  = (dctint)((1U << 13) + t6 + t14) >> 14;
>     t7a  = (dctint)((1U << 13) + t7 + t15) >> 14;
>     t8a  = (dctint)((1U << 13) + t0 - t8 ) >> 14;
>     t9a  = (dctint)((1U << 13) + t1 - t9 ) >> 14;
>     t10a = (dctint)((1U << 13) + t2 - t10) >> 14;
>     t11a = (dctint)((1U << 13) + t3 - t11) >> 14;
>     t12a = (dctint)((1U << 13) + t4 - t12) >> 14;
>     t13a = (dctint)((1U << 13) + t5 - t13) >> 14;
>     t14a = (dctint)((1U << 13) + t6 - t14) >> 14;
>     t15a = (dctint)((1U << 13) + t7 - t15) >> 14;
> 
>     t8   = t8a  * 16069U + t9a  *  3196U;
>     t9   = t8a  *  3196U - t9a  * 16069U;
>     t10  = t10a *  9102U + t11a * 13623U;
>     t11  = t10a * 13623U - t11a *  9102U;
>     t12  = t13a * 16069U - t12a *  3196U;
>     t13  = t13a *  3196U + t12a * 16069U;
>     t14  = t15a *  9102U - t14a * 13623U;
>     t15  = t15a * 13623U + t14a *  9102U;
1432,1448c1432,1448
<     t8a  = (t8  + t12 + (1 << 13)) >> 14;
<     t9a  = (t9  + t13 + (1 << 13)) >> 14;
<     t10a = (t10 + t14 + (1 << 13)) >> 14;
<     t11a = (t11 + t15 + (1 << 13)) >> 14;
<     t12a = (t8  - t12 + (1 << 13)) >> 14;
<     t13a = (t9  - t13 + (1 << 13)) >> 14;
<     t14a = (t10 - t14 + (1 << 13)) >> 14;
<     t15a = (t11 - t15 + (1 << 13)) >> 14;
< 
<     t4a  = t4 * 15137 + t5 *  6270;
<     t5a  = t4 *  6270 - t5 * 15137;
<     t6a  = t7 * 15137 - t6 *  6270;
<     t7a  = t7 *  6270 + t6 * 15137;
<     t12  = t12a * 15137 + t13a *  6270;
<     t13  = t12a *  6270 - t13a * 15137;
<     t14  = t15a * 15137 - t14a *  6270;
<     t15  = t15a *  6270 + t14a * 15137;
---
>     t8a  = (dctint)((1U << 13) + t8  + t12) >> 14;
>     t9a  = (dctint)((1U << 13) + t9  + t13) >> 14;
>     t10a = (dctint)((1U << 13) + t10 + t14) >> 14;
>     t11a = (dctint)((1U << 13) + t11 + t15) >> 14;
>     t12a = (dctint)((1U << 13) + t8  - t12) >> 14;
>     t13a = (dctint)((1U << 13) + t9  - t13) >> 14;
>     t14a = (dctint)((1U << 13) + t10 - t14) >> 14;
>     t15a = (dctint)((1U << 13) + t11 - t15) >> 14;
> 
>     t4a  = t4 * 15137U + t5 *  6270U;
>     t5a  = t4 *  6270U - t5 * 15137U;
>     t6a  = t7 * 15137U - t6 *  6270U;
>     t7a  = t7 *  6270U + t6 * 15137U;
>     t12  = t12a * 15137U + t13a *  6270U;
>     t13  = t12a *  6270U - t13a * 15137U;
>     t14  = t15a * 15137U - t14a *  6270U;
>     t15  = t15a *  6270U + t14a * 15137U;
1454,1457c1454,1457
<     out[ 3] = -((t4a + t6a + (1 << 13)) >> 14);
<     out[12] =   (t5a + t7a + (1 << 13)) >> 14;
<     t6      =   (t4a - t6a + (1 << 13)) >> 14;
<     t7      =   (t5a - t7a + (1 << 13)) >> 14;
---
>     out[ 3] = -((dctint)((1U << 13) + t4a + t6a) >> 14);
>     out[12] =   (dctint)((1U << 13) + t5a + t7a) >> 14;
>     t6      =   (dctint)((1U << 13) + t4a - t6a) >> 14;
>     t7      =   (dctint)((1U << 13) + t5a - t7a) >> 14;
1462,1474c1462,1474
<     out[ 2] =   (t12 + t14 + (1 << 13)) >> 14;
<     out[13] = -((t13 + t15 + (1 << 13)) >> 14);
<     t14a    =   (t12 - t14 + (1 << 13)) >> 14;
<     t15a    =   (t13 - t15 + (1 << 13)) >> 14;
< 
<     out[ 7] = ((t2a  + t3a)  * -11585 + (1 << 13)) >> 14;
<     out[ 8] = ((t2a  - t3a)  *  11585 + (1 << 13)) >> 14;
<     out[ 4] = ((t7   + t6)   *  11585 + (1 << 13)) >> 14;
<     out[11] = ((t7   - t6)   *  11585 + (1 << 13)) >> 14;
<     out[ 6] = ((t11  + t10)  *  11585 + (1 << 13)) >> 14;
<     out[ 9] = ((t11  - t10)  *  11585 + (1 << 13)) >> 14;
<     out[ 5] = ((t14a + t15a) * -11585 + (1 << 13)) >> 14;
<     out[10] = ((t14a - t15a) *  11585 + (1 << 13)) >> 14;
---
>     out[ 2] =   (dctint)((1U << 13) + t12 + t14) >> 14;
>     out[13] = -((dctint)((1U << 13) + t13 + t15) >> 14);
>     t14a    =   (dctint)((1U << 13) + t12 - t14) >> 14;
>     t15a    =   (dctint)((1U << 13) + t13 - t15) >> 14;
> 
>     out[ 7] = (dctint)(-(t2a  + t3a)  * 11585U  + (1 << 13)) >> 14;
>     out[ 8] = (dctint)( (t2a  - t3a)  * 11585U  + (1 << 13)) >> 14;
>     out[ 4] = (dctint)( (t7   + t6)   * 11585U  + (1 << 13)) >> 14;
>     out[11] = (dctint)( (t7   - t6)   * 11585U  + (1 << 13)) >> 14;
>     out[ 6] = (dctint)( (t11  + t10)  * 11585U  + (1 << 13)) >> 14;
>     out[ 9] = (dctint)( (t11  - t10)  * 11585U  + (1 << 13)) >> 14;
>     out[ 5] = (dctint)(-(t14a + t15a) * 11585U  + (1 << 13)) >> 14;
>     out[10] = (dctint)( (t14a - t15a) * 11585U  + (1 << 13)) >> 14;
1482,1513c1482,1513
<     dctint t0a  = ((IN(0) + IN(16)) * 11585 + (1 << 13)) >> 14;
<     dctint t1a  = ((IN(0) - IN(16)) * 11585 + (1 << 13)) >> 14;
<     dctint t2a  = (IN( 8) *  6270 - IN(24) * 15137 + (1 << 13)) >> 14;
<     dctint t3a  = (IN( 8) * 15137 + IN(24) *  6270 + (1 << 13)) >> 14;
<     dctint t4a  = (IN( 4) *  3196 - IN(28) * 16069 + (1 << 13)) >> 14;
<     dctint t7a  = (IN( 4) * 16069 + IN(28) *  3196 + (1 << 13)) >> 14;
<     dctint t5a  = (IN(20) * 13623 - IN(12) *  9102 + (1 << 13)) >> 14;
<     dctint t6a  = (IN(20) *  9102 + IN(12) * 13623 + (1 << 13)) >> 14;
<     dctint t8a  = (IN( 2) *  1606 - IN(30) * 16305 + (1 << 13)) >> 14;
<     dctint t15a = (IN( 2) * 16305 + IN(30) *  1606 + (1 << 13)) >> 14;
<     dctint t9a  = (IN(18) * 12665 - IN(14) * 10394 + (1 << 13)) >> 14;
<     dctint t14a = (IN(18) * 10394 + IN(14) * 12665 + (1 << 13)) >> 14;
<     dctint t10a = (IN(10) *  7723 - IN(22) * 14449 + (1 << 13)) >> 14;
<     dctint t13a = (IN(10) * 14449 + IN(22) *  7723 + (1 << 13)) >> 14;
<     dctint t11a = (IN(26) * 15679 - IN( 6) *  4756 + (1 << 13)) >> 14;
<     dctint t12a = (IN(26) *  4756 + IN( 6) * 15679 + (1 << 13)) >> 14;
<     dctint t16a = (IN( 1) *   804 - IN(31) * 16364 + (1 << 13)) >> 14;
<     dctint t31a = (IN( 1) * 16364 + IN(31) *   804 + (1 << 13)) >> 14;
<     dctint t17a = (IN(17) * 12140 - IN(15) * 11003 + (1 << 13)) >> 14;
<     dctint t30a = (IN(17) * 11003 + IN(15) * 12140 + (1 << 13)) >> 14;
<     dctint t18a = (IN( 9) *  7005 - IN(23) * 14811 + (1 << 13)) >> 14;
<     dctint t29a = (IN( 9) * 14811 + IN(23) *  7005 + (1 << 13)) >> 14;
<     dctint t19a = (IN(25) * 15426 - IN( 7) *  5520 + (1 << 13)) >> 14;
<     dctint t28a = (IN(25) *  5520 + IN( 7) * 15426 + (1 << 13)) >> 14;
<     dctint t20a = (IN( 5) *  3981 - IN(27) * 15893 + (1 << 13)) >> 14;
<     dctint t27a = (IN( 5) * 15893 + IN(27) *  3981 + (1 << 13)) >> 14;
<     dctint t21a = (IN(21) * 14053 - IN(11) *  8423 + (1 << 13)) >> 14;
<     dctint t26a = (IN(21) *  8423 + IN(11) * 14053 + (1 << 13)) >> 14;
<     dctint t22a = (IN(13) *  9760 - IN(19) * 13160 + (1 << 13)) >> 14;
<     dctint t25a = (IN(13) * 13160 + IN(19) *  9760 + (1 << 13)) >> 14;
<     dctint t23a = (IN(29) * 16207 - IN( 3) *  2404 + (1 << 13)) >> 14;
<     dctint t24a = (IN(29) *  2404 + IN( 3) * 16207 + (1 << 13)) >> 14;
---
>     dctint t0a  = (dctint)((IN(0) + IN(16)) * 11585U         + (1 << 13)) >> 14;
>     dctint t1a  = (dctint)((IN(0) - IN(16)) * 11585U         + (1 << 13)) >> 14;
>     dctint t2a  = (dctint)(IN( 8) *  6270U - IN(24) * 15137U + (1 << 13)) >> 14;
>     dctint t3a  = (dctint)(IN( 8) * 15137U + IN(24) *  6270U + (1 << 13)) >> 14;
>     dctint t4a  = (dctint)(IN( 4) *  3196U - IN(28) * 16069U + (1 << 13)) >> 14;
>     dctint t7a  = (dctint)(IN( 4) * 16069U + IN(28) *  3196U + (1 << 13)) >> 14;
>     dctint t5a  = (dctint)(IN(20) * 13623U - IN(12) *  9102U + (1 << 13)) >> 14;
>     dctint t6a  = (dctint)(IN(20) *  9102U + IN(12) * 13623U + (1 << 13)) >> 14;
>     dctint t8a  = (dctint)(IN( 2) *  1606U - IN(30) * 16305U + (1 << 13)) >> 14;
>     dctint t15a = (dctint)(IN( 2) * 16305U + IN(30) *  1606U + (1 << 13)) >> 14;
>     dctint t9a  = (dctint)(IN(18) * 12665U - IN(14) * 10394U + (1 << 13)) >> 14;
>     dctint t14a = (dctint)(IN(18) * 10394U + IN(14) * 12665U + (1 << 13)) >> 14;
>     dctint t10a = (dctint)(IN(10) *  7723U - IN(22) * 14449U + (1 << 13)) >> 14;
>     dctint t13a = (dctint)(IN(10) * 14449U + IN(22) *  7723U + (1 << 13)) >> 14;
>     dctint t11a = (dctint)(IN(26) * 15679U - IN( 6) *  4756U + (1 << 13)) >> 14;
>     dctint t12a = (dctint)(IN(26) *  4756U + IN( 6) * 15679U + (1 << 13)) >> 14;
>     dctint t16a = (dctint)(IN( 1) *   804U - IN(31) * 16364U + (1 << 13)) >> 14;
>     dctint t31a = (dctint)(IN( 1) * 16364U + IN(31) *   804U + (1 << 13)) >> 14;
>     dctint t17a = (dctint)(IN(17) * 12140U - IN(15) * 11003U + (1 << 13)) >> 14;
>     dctint t30a = (dctint)(IN(17) * 11003U + IN(15) * 12140U + (1 << 13)) >> 14;
>     dctint t18a = (dctint)(IN( 9) *  7005U - IN(23) * 14811U + (1 << 13)) >> 14;
>     dctint t29a = (dctint)(IN( 9) * 14811U + IN(23) *  7005U + (1 << 13)) >> 14;
>     dctint t19a = (dctint)(IN(25) * 15426U - IN( 7) *  5520U + (1 << 13)) >> 14;
>     dctint t28a = (dctint)(IN(25) *  5520U + IN( 7) * 15426U + (1 << 13)) >> 14;
>     dctint t20a = (dctint)(IN( 5) *  3981U - IN(27) * 15893U + (1 << 13)) >> 14;
>     dctint t27a = (dctint)(IN( 5) * 15893U + IN(27) *  3981U + (1 << 13)) >> 14;
>     dctint t21a = (dctint)(IN(21) * 14053U - IN(11) *  8423U + (1 << 13)) >> 14;
>     dctint t26a = (dctint)(IN(21) *  8423U + IN(11) * 14053U + (1 << 13)) >> 14;
>     dctint t22a = (dctint)(IN(13) *  9760U - IN(19) * 13160U + (1 << 13)) >> 14;
>     dctint t25a = (dctint)(IN(13) * 13160U + IN(19) *  9760U + (1 << 13)) >> 14;
>     dctint t23a = (dctint)(IN(29) * 16207U - IN( 3) *  2404U + (1 << 13)) >> 14;
>     dctint t24a = (dctint)(IN(29) *  2404U + IN( 3) * 16207U + (1 << 13)) >> 14;
1548,1561c1548,1561
<     t5a = ((t6 - t5) * 11585 + (1 << 13)) >> 14;
<     t6a = ((t6 + t5) * 11585 + (1 << 13)) >> 14;
<     t9a  = (  t14 *  6270 - t9  * 15137  + (1 << 13)) >> 14;
<     t14a = (  t14 * 15137 + t9  *  6270  + (1 << 13)) >> 14;
<     t10a = (-(t13 * 15137 + t10 *  6270) + (1 << 13)) >> 14;
<     t13a = (  t13 *  6270 - t10 * 15137  + (1 << 13)) >> 14;
<     t17a = (  t30 *  3196 - t17 * 16069  + (1 << 13)) >> 14;
<     t30a = (  t30 * 16069 + t17 *  3196  + (1 << 13)) >> 14;
<     t18a = (-(t29 * 16069 + t18 *  3196) + (1 << 13)) >> 14;
<     t29a = (  t29 *  3196 - t18 * 16069  + (1 << 13)) >> 14;
<     t21a = (  t26 * 13623 - t21 *  9102  + (1 << 13)) >> 14;
<     t26a = (  t26 *  9102 + t21 * 13623  + (1 << 13)) >> 14;
<     t22a = (-(t25 *  9102 + t22 * 13623) + (1 << 13)) >> 14;
<     t25a = (  t25 * 13623 - t22 *  9102  + (1 << 13)) >> 14;
---
>     t5a  = (dctint)((t6 - t5) * 11585U             + (1 << 13)) >> 14;
>     t6a  = (dctint)((t6 + t5) * 11585U             + (1 << 13)) >> 14;
>     t9a  = (dctint)(  t14 *  6270U - t9  * 15137U  + (1 << 13)) >> 14;
>     t14a = (dctint)(  t14 * 15137U + t9  *  6270U  + (1 << 13)) >> 14;
>     t10a = (dctint)(-(t13 * 15137U + t10 *  6270U) + (1 << 13)) >> 14;
>     t13a = (dctint)(  t13 *  6270U - t10 * 15137U  + (1 << 13)) >> 14;
>     t17a = (dctint)(  t30 *  3196U - t17 * 16069U  + (1 << 13)) >> 14;
>     t30a = (dctint)(  t30 * 16069U + t17 *  3196U  + (1 << 13)) >> 14;
>     t18a = (dctint)(-(t29 * 16069U + t18 *  3196U) + (1 << 13)) >> 14;
>     t29a = (dctint)(  t29 *  3196U - t18 * 16069U  + (1 << 13)) >> 14;
>     t21a = (dctint)(  t26 * 13623U - t21 *  9102U  + (1 << 13)) >> 14;
>     t26a = (dctint)(  t26 *  9102U + t21 * 13623U  + (1 << 13)) >> 14;
>     t22a = (dctint)(-(t25 *  9102U + t22 * 13623U) + (1 << 13)) >> 14;
>     t25a = (dctint)(  t25 * 13623U - t22 *  9102U  + (1 << 13)) >> 14;
1596,1607c1596,1607
<     t10a = ((t13  - t10)  * 11585 + (1 << 13)) >> 14;
<     t13a = ((t13  + t10)  * 11585 + (1 << 13)) >> 14;
<     t11  = ((t12a - t11a) * 11585 + (1 << 13)) >> 14;
<     t12  = ((t12a + t11a) * 11585 + (1 << 13)) >> 14;
<     t18a = (  t29  *  6270 - t18  * 15137  + (1 << 13)) >> 14;
<     t29a = (  t29  * 15137 + t18  *  6270  + (1 << 13)) >> 14;
<     t19  = (  t28a *  6270 - t19a * 15137  + (1 << 13)) >> 14;
<     t28  = (  t28a * 15137 + t19a *  6270  + (1 << 13)) >> 14;
<     t20  = (-(t27a * 15137 + t20a *  6270) + (1 << 13)) >> 14;
<     t27  = (  t27a *  6270 - t20a * 15137  + (1 << 13)) >> 14;
<     t21a = (-(t26  * 15137 + t21  *  6270) + (1 << 13)) >> 14;
<     t26a = (  t26  *  6270 - t21  * 15137  + (1 << 13)) >> 14;
---
>     t10a = (dctint)((t13  - t10)  * 11585U           + (1 << 13)) >> 14;
>     t13a = (dctint)((t13  + t10)  * 11585U           + (1 << 13)) >> 14;
>     t11  = (dctint)((t12a - t11a) * 11585U           + (1 << 13)) >> 14;
>     t12  = (dctint)((t12a + t11a) * 11585U           + (1 << 13)) >> 14;
>     t18a = (dctint)(  t29  *  6270U - t18  * 15137U  + (1 << 13)) >> 14;
>     t29a = (dctint)(  t29  * 15137U + t18  *  6270U  + (1 << 13)) >> 14;
>     t19  = (dctint)(  t28a *  6270U - t19a * 15137U  + (1 << 13)) >> 14;
>     t28  = (dctint)(  t28a * 15137U + t19a *  6270U  + (1 << 13)) >> 14;
>     t20  = (dctint)(-(t27a * 15137U + t20a *  6270U) + (1 << 13)) >> 14;
>     t27  = (dctint)(  t27a *  6270U - t20a * 15137U  + (1 << 13)) >> 14;
>     t21a = (dctint)(-(t26  * 15137U + t21  *  6270U) + (1 << 13)) >> 14;
>     t26a = (dctint)(  t26  *  6270U - t21  * 15137U  + (1 << 13)) >> 14;
1642,1649c1642,1649
<     t20  = ((t27a - t20a) * 11585 + (1 << 13)) >> 14;
<     t27  = ((t27a + t20a) * 11585 + (1 << 13)) >> 14;
<     t21a = ((t26  - t21 ) * 11585 + (1 << 13)) >> 14;
<     t26a = ((t26  + t21 ) * 11585 + (1 << 13)) >> 14;
<     t22  = ((t25a - t22a) * 11585 + (1 << 13)) >> 14;
<     t25  = ((t25a + t22a) * 11585 + (1 << 13)) >> 14;
<     t23a = ((t24  - t23 ) * 11585 + (1 << 13)) >> 14;
<     t24a = ((t24  + t23 ) * 11585 + (1 << 13)) >> 14;
---
>     t20  = (dctint)((t27a - t20a) * 11585U + (1 << 13)) >> 14;
>     t27  = (dctint)((t27a + t20a) * 11585U + (1 << 13)) >> 14;
>     t21a = (dctint)((t26  - t21 ) * 11585U + (1 << 13)) >> 14;
>     t26a = (dctint)((t26  + t21 ) * 11585U + (1 << 13)) >> 14;
>     t22  = (dctint)((t25a - t22a) * 11585U + (1 << 13)) >> 14;
>     t25  = (dctint)((t25a + t22a) * 11585U + (1 << 13)) >> 14;
>     t23a = (dctint)((t24  - t23 ) * 11585U + (1 << 13)) >> 14;
>     t24a = (dctint)((t24  + t23 ) * 11585U + (1 << 13)) >> 14;
diff -r android/contrib/ffmpeg-x86/libavcodec/vp9_superframe_split_bsf.c /tmp/ffmpeg-x86/libavcodec/vp9_superframe_split_bsf.c
62c62
<                 int total_size = 0;
---
>                 int64_t total_size = 0;
73c73
<                     if (total_size > in->size - idx_size) {
---
>                     if (frame_size < 0 || total_size > in->size - idx_size) {
diff -r android/contrib/ffmpeg-x86/libavcodec/vqavideo.c /tmp/ffmpeg-x86/libavcodec/vqavideo.c
150c150
<     if ((ret = av_image_check_size(s->width, s->height, 0, avctx)) < 0) {
---
>     if ((ret = ff_set_dimensions(avctx, s->width, s->height)) < 0) {
diff -r android/contrib/ffmpeg-x86/libavcodec/wavpack.c /tmp/ffmpeg-x86/libavcodec/wavpack.c
88c88
< static av_always_inline int get_tail(GetBitContext *gb, int k)
---
> static av_always_inline unsigned get_tail(GetBitContext *gb, int k)
436,437c436,437
<                     L2 = L + ((int)(s->decorr[i].weightA * (unsigned)A + 512) >> 10);
<                     R2 = R + ((int)(s->decorr[i].weightB * (unsigned)B + 512) >> 10);
---
>                     L2 = L + (unsigned)((int)(s->decorr[i].weightA * (unsigned)A + 512) >> 10);
>                     R2 = R + (unsigned)((int)(s->decorr[i].weightB * (unsigned)B + 512) >> 10);
449c449
<                     L2 = L + ((int)(s->decorr[i].weightA * (unsigned)s->decorr[i].samplesA[0] + 512) >> 10);
---
>                     L2 = L + (unsigned)((int)(s->decorr[i].weightA * (unsigned)s->decorr[i].samplesA[0] + 512) >> 10);
455c455
<                     R2 = R + ((int)(s->decorr[i].weightB * (unsigned)L2 + 512) >> 10);
---
>                     R2 = R + (unsigned)((int)(s->decorr[i].weightB * (unsigned)L2 + 512) >> 10);
463c463
<                     R2 = R + ((int)(s->decorr[i].weightB * (unsigned)s->decorr[i].samplesB[0] + 512) >> 10);
---
>                     R2 = R + (unsigned)((int)(s->decorr[i].weightB * (unsigned)s->decorr[i].samplesB[0] + 512) >> 10);
475c475
<                     L2 = L + ((int)(s->decorr[i].weightA * (unsigned)R2 + 512) >> 10);
---
>                     L2 = L + (unsigned)((int)(s->decorr[i].weightA * (unsigned)R2 + 512) >> 10);
483c483
<             if (FFABS(L) + (unsigned)FFABS(R) > (1<<19)) {
---
>             if (FFABS((int64_t)L) + FFABS((int64_t)R) > (1<<19)) {
557c557
<                 S = T + ((int)(s->decorr[i].weightA * (unsigned)A + 512) >> 10);
---
>                 S = T + (unsigned)((int)(s->decorr[i].weightA * (unsigned)A + 512) >> 10);
diff -r android/contrib/ffmpeg-x86/libavcodec/wavpackenc.c /tmp/ffmpeg-x86/libavcodec/wavpackenc.c
532c532
<     int result;
---
>     int result = 8 * weight;
534c534
<     if ((result = (int) weight << 3) > 0)
---
>     if (result > 0)
2574c2574
<             crc += (crc << 3) + (samples_l[i] << 1) + samples_l[i] + samples_r[i];
---
>             crc += (crc << 3) + ((uint32_t)samples_l[i] << 1) + samples_l[i] + samples_r[i];
diff -r android/contrib/ffmpeg-x86/libavcodec/wavpack.h /tmp/ffmpeg-x86/libavcodec/wavpack.h
102,103c102,103
< #define DEC_MED(n) c->median[n] -= ((c->median[n] + (128 >> (n)) - 2) / (128 >> (n))) * 2U
< #define INC_MED(n) c->median[n] += ((c->median[n] + (128 >> (n))    ) / (128 >> (n))) * 5U
---
> #define DEC_MED(n) c->median[n] -= ((int)(c->median[n] + (128U >> (n)) - 2) / (128 >> (n))) * 2U
> #define INC_MED(n) c->median[n] += ((int)(c->median[n] + (128U >> (n))    ) / (128 >> (n))) * 5U
diff -r android/contrib/ffmpeg-x86/libavcodec/wmadec.c /tmp/ffmpeg-x86/libavcodec/wmadec.c
587a588
>                 s->exponents_initialized[ch] = 1;
589a591,595
>     }
> 
>     for (ch = 0; ch < s->avctx->channels; ch++) {
>         if (s->channel_coded[ch] && !s->exponents_initialized[ch])
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/wma.h /tmp/ffmpeg-x86/libavcodec/wma.h
125a126
>     int exponents_initialized[MAX_CHANNELS];
diff -r android/contrib/ffmpeg-x86/libavcodec/wmalosslessdec.c /tmp/ffmpeg-x86/libavcodec/wmalosslessdec.c
167c167
<     int ave_sum[WMALL_MAX_CHANNELS];
---
>     unsigned ave_sum[WMALL_MAX_CHANNELS];
187,188c187,188
<     if (!avctx->block_align) {
<         av_log(avctx, AV_LOG_ERROR, "block_align is not set\n");
---
>     if (avctx->block_align <= 0 || avctx->block_align > (1<<21)) {
>         av_log(avctx, AV_LOG_ERROR, "block_align is not set or invalid\n");
191a192,201
>     if (avctx->channels < 0) {
>         av_log(avctx, AV_LOG_ERROR, "invalid number of channels %d\n",
>                avctx->channels);
>         return AVERROR_INVALIDDATA;
>     } else if (avctx->channels > WMALL_MAX_CHANNELS) {
>         avpriv_request_sample(avctx,
>                               "More than %d channels", WMALL_MAX_CHANNELS);
>         return AVERROR_PATCHWELCOME;
>     }
> 
270,279d279
<     if (s->num_channels < 0) {
<         av_log(avctx, AV_LOG_ERROR, "invalid number of channels %"PRId8"\n",
<                s->num_channels);
<         return AVERROR_INVALIDDATA;
<     } else if (s->num_channels > WMALL_MAX_CHANNELS) {
<         avpriv_request_sample(avctx,
<                               "More than %d channels", WMALL_MAX_CHANNELS);
<         return AVERROR_PATCHWELCOME;
<     }
< 
538c538,539
<         int quo = 0, rem, rem_bits, residue;
---
>         int rem, rem_bits;
>         unsigned quo = 0, residue;
631c632
<         pred_error = s->channel_residues[ich][icoef] - pred[ich];
---
>         pred_error = s->channel_residues[ich][icoef] - (unsigned)pred[ich];
681c682
<         pred[ich] += 1 << s->mclms_scaling - 1;
---
>         pred[ich] += (1U << s->mclms_scaling) >> 1;
683c684
<         s->channel_residues[ich][icoef] += pred[ich];
---
>         s->channel_residues[ich][icoef] += (unsigned)pred[ich];
763c764,765
<     int icoef, pred, ilms, num_lms, residue, input; \
---
>     int icoef, ilms, num_lms, residue, input; \
>     unsigned pred;\
769c771
<             pred = 1 << (s->cdlms[ch][ilms].scaling - 1); \
---
>             pred = (1 << s->cdlms[ch][ilms].scaling) >> 1; \
777c779
<             input = residue + (pred >> s->cdlms[ch][ilms].scaling); \
---
>             input = residue + (unsigned)((int)pred >> s->cdlms[ch][ilms].scaling); \
795,796c797,798
<             s->channel_residues[0][icoef] -= s->channel_residues[1][icoef] >> 1;
<             s->channel_residues[1][icoef] += s->channel_residues[0][icoef];
---
>             s->channel_residues[0][icoef] -= (unsigned)(s->channel_residues[1][icoef] >> 1);
>             s->channel_residues[1][icoef] += (unsigned) s->channel_residues[0][icoef];
814c816
<                     pred += filter_coeffs[j] * prevvalues[j - i];
---
>                     pred += (uint32_t)filter_coeffs[j] * prevvalues[j - i];
816c818
<                     pred += s->channel_residues[ich][i - j - 1] * filter_coeffs[j];
---
>                     pred += (uint32_t)s->channel_residues[ich][i - j - 1] * filter_coeffs[j];
819c821
<             s->channel_residues[ich][i] += pred;
---
>             s->channel_residues[ich][i] += (unsigned)pred;
826c828
<             s->channel_residues[ich][i] += pred;
---
>             s->channel_residues[ich][i] += (unsigned)pred;
828,829c830,834
<         for (j = 0; j < order; j++)
<             prevvalues[j] = s->channel_residues[ich][tile_size - j - 1];
---
>         for (j = order - 1; j >= 0; j--)
>             if (tile_size <= j) {
>                 prevvalues[j] = prevvalues[j - tile_size];
>             }else
>                 prevvalues[j] = s->channel_residues[ich][tile_size - j - 1];
952a958,959
>         if (s->bits_per_sample < padding_zeroes)
>             return AVERROR_INVALIDDATA;
980c987
<                     s->channel_residues[i][j] *= s->quant_stepsize;
---
>                     s->channel_residues[i][j] *= (unsigned)s->quant_stepsize;
990c997
<                 *s->samples_16[c]++ = (int16_t) s->channel_residues[c][j] << padding_zeroes;
---
>                 *s->samples_16[c]++ = (int16_t) s->channel_residues[c][j] * (1 << padding_zeroes);
992c999
<                 *s->samples_32[c]++ = s->channel_residues[c][j] << (padding_zeroes + 8);
---
>                 *s->samples_32[c]++ = s->channel_residues[c][j] * (256U << padding_zeroes);
1150a1158
>         s->num_saved_bits = 0;
1258c1266,1268
<             s->packet_done = !decode_frame(s);
---
> 
>             if (!s->packet_loss)
>                 s->packet_done = !decode_frame(s);
diff -r android/contrib/ffmpeg-x86/libavcodec/wmaprodec.c /tmp/ffmpeg-x86/libavcodec/wmaprodec.c
439c439
<     } else if (s->nb_channels > WMAPRO_MAX_CHANNELS) {
---
>     } else if (s->nb_channels > WMAPRO_MAX_CHANNELS || s->nb_channels > avctx->channels) {
546c546
<                      / (1 << (s->bits_per_sample - 1)));
---
>                      / (1ll << (s->bits_per_sample - 1)));
1567,1569c1567,1569
<     }
< 
<     buflen = (put_bits_count(&s->pb) + len + 8) >> 3;
---
>         buflen = (s->num_saved_bits      + len + 7) >> 3;
>     } else
>         buflen = (put_bits_count(&s->pb) + len + 7) >> 3;
1618a1619
>             s->packet_loss = 1;
1767a1769,1774
>     if (!s->frames[s->current_stream]->data[0]) {
>         s->frames[s->current_stream]->nb_samples = 512;
>         if ((ret = ff_get_buffer(avctx, s->frames[s->current_stream], 0)) < 0) {
>             return ret;
>         }
>     }
1771a1779,1783
>     if (got_stream_frame_ptr && s->offset[s->current_stream] >= 64) {
>         got_stream_frame_ptr = 0;
>         ret = AVERROR_INVALIDDATA;
>     }
> 
1877c1889,1891
<     if (avctx->channels > XMA_MAX_CHANNELS || s->num_streams > XMA_MAX_STREAMS) {
---
>     if (avctx->channels > XMA_MAX_CHANNELS || s->num_streams > XMA_MAX_STREAMS ||
>         s->num_streams <= 0
>     ) {
1890,1893d1903
<         s->frames[i]->nb_samples = 512;
<         if ((ret = ff_get_buffer(avctx, s->frames[i], 0)) < 0) {
<             return AVERROR(ENOMEM);
<         }
1897a1908,1909
>     if (start_channels != avctx->channels)
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/wmavoice.c /tmp/ffmpeg-x86/libavcodec/wmavoice.c
385c385
<     if (ctx->block_align <= 0) {
---
>     if (ctx->block_align <= 0 || ctx->block_align > (1<<22)) {
431a432,434
>     if (ctx->sample_rate >= INT_MAX / (256 * 37))
>         return AVERROR_INVALIDDATA;
> 
632c635,636
<         idx = FFMAX(0, lrint((max - lpcs[n]) * irange) - 1);
---
>         idx = lrint((max - lpcs[n]) * irange - 1);
>         idx = FFMAX(0, idx);
637c641,642
<         idx = (pwr * gain_mul - 0.0295) * 70.570526123;
---
>         idx = av_clipf((pwr * gain_mul - 0.0295) * 70.570526123, 0, INT_MAX / 2);
> 
1519c1524
<             ((cur_pitch_val - s->last_pitch_val) << 16) / MAX_FRAMESIZE;
---
>             (cur_pitch_val - s->last_pitch_val) * (1 << 16) / MAX_FRAMESIZE;
1834a1840,1842
>         if (get_bits_left(gb) < 6 + s->spillover_bitsize)
>             return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavcodec/wmv2dec.c /tmp/ffmpeg-x86/libavcodec/wmv2dec.c
33c33
< static void parse_mb_skip(Wmv2Context *w)
---
> static int parse_mb_skip(Wmv2Context *w)
47a48,49
>         if (get_bits_left(&s->gb) < s->mb_height * s->mb_width)
>             return AVERROR_INVALIDDATA;
54a57,58
>             if (get_bits_left(&s->gb) < 1)
>                 return AVERROR_INVALIDDATA;
67a72,73
>             if (get_bits_left(&s->gb) < 1)
>                 return AVERROR_INVALIDDATA;
79a86
>     return 0;
161a169,176
> 
>             // at minimum one bit per macroblock is required at least in a valid frame,
>             // we discard frames much smaller than this. Frames smaller than 1/8 of the
>             // smallest "black/skip" frame generally contain not much recoverable content
>             // while at the same time they have the highest computational requirements
>             // per byte
>             if (get_bits_left(&s->gb) * 8LL < (s->width+15)/16 * ((s->height+15)/16))
>                 return AVERROR_INVALIDDATA;
172a188
>         int ret;
175c191,193
<         parse_mb_skip(w);
---
>         ret = parse_mb_skip(w);
>         if (ret < 0)
>             return ret;
361a380,381
>         if (get_bits_left(&s->gb) <= 0)
>             return AVERROR_INVALIDDATA;
371a392,393
>         if (get_bits_left(&s->gb) <= 0)
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavcodec/x86/diracdsp.asm /tmp/ffmpeg-x86/libavcodec/x86/diracdsp.asm
277c277
<     mov    r4, tot_hq
---
>     mov    r4d, tot_hd
297c297
<     sub    tot_hd, 4
---
>     sub    tot_hq, 4
298a299
>     lea    srcq, [srcq + 4*tot_hq]
diff -r android/contrib/ffmpeg-x86/libavcodec/x86/mpegvideodsp.c /tmp/ffmpeg-x86/libavcodec/x86/mpegvideodsp.c
55,56c55,57
<     int need_emu  =  (unsigned) ix >= width  - w ||
<                      (unsigned) iy >= height - h;
---
>     int need_emu  =  (unsigned) ix >= width  - w || width < w ||
>                      (unsigned) iy >= height - h || height< h
>                      ;
diff -r android/contrib/ffmpeg-x86/libavcodec/xan.c /tmp/ffmpeg-x86/libavcodec/xan.c
134c134,137
<         unsigned idx = val - 0x17 + get_bits1(&gb) * byte;
---
>         unsigned idx;
>         if (get_bits_left(&gb) < 1)
>             return AVERROR_INVALIDDATA;
>         idx = val - 0x17 + get_bits1(&gb) * byte;
266c269
<     if (prev_palette_plane == palette_plane && FFABS(curframe_index - prevframe_index) < pixel_count) {
---
>     if (prev_palette_plane == palette_plane && FFABS(motion_x + width*motion_y) < pixel_count) {
diff -r android/contrib/ffmpeg-x86/libavcodec/xpmdec.c /tmp/ffmpeg-x86/libavcodec/xpmdec.c
309a310
>     int width, height;
331c332
<                &avctx->width, &avctx->height, &ncolors, &cpp) != 4) {
---
>                &width, &height, &ncolors, &cpp) != 4) {
336c337
<     if ((ret = ff_set_dimensions(avctx, avctx->width, avctx->height)) < 0)
---
>     if ((ret = ff_set_dimensions(avctx, width, height)) < 0)
diff -r android/contrib/ffmpeg-x86/libavcodec/xsubdec.c /tmp/ffmpeg-x86/libavcodec/xsubdec.c
133c133
<             ((uint32_t *)sub->rects[0]->data[1])[i] |= *buf++ << 24;
---
>             ((uint32_t *)sub->rects[0]->data[1])[i] |= (unsigned)*buf++ << 24;
diff -r android/contrib/ffmpeg-x86/libavcodec/xvididct.c /tmp/ffmpeg-x86/libavcodec/xvididct.c
118,121c118,121
<         const int a0 = k + c2 * in[2] + c4 * in[4] + c6 * in[6];
<         const int a1 = k + c6 * in[2] - c4 * in[4] - c2 * in[6];
<         const int a2 = k - c6 * in[2] - c4 * in[4] + c2 * in[6];
<         const int a3 = k - c2 * in[2] + c4 * in[4] - c6 * in[6];
---
>         const unsigned int a0 = k + c2 * in[2] + c4 * in[4] + c6 * in[6];
>         const unsigned int a1 = k + c6 * in[2] - c4 * in[4] - c2 * in[6];
>         const unsigned int a2 = k - c6 * in[2] - c4 * in[4] + c2 * in[6];
>         const unsigned int a3 = k - c2 * in[2] + c4 * in[4] - c6 * in[6];
123,126c123,126
<         const int b0 = c1 * in[1] + c3 * in[3] + c5 * in[5] + c7 * in[7];
<         const int b1 = c3 * in[1] - c7 * in[3] - c1 * in[5] - c5 * in[7];
<         const int b2 = c5 * in[1] - c1 * in[3] + c7 * in[5] + c3 * in[7];
<         const int b3 = c7 * in[1] - c5 * in[3] + c3 * in[5] - c1 * in[7];
---
>         const unsigned int b0 = c1 * in[1] + c3 * in[3] + c5 * in[5] + c7 * in[7];
>         const unsigned int b1 = c3 * in[1] - c7 * in[3] - c1 * in[5] - c5 * in[7];
>         const unsigned int b2 = c5 * in[1] - c1 * in[3] + c7 * in[5] + c3 * in[7];
>         const unsigned int b3 = c7 * in[1] - c5 * in[3] + c3 * in[5] - c1 * in[7];
128,135c128,135
<         in[0] = (a0 + b0) >> ROW_SHIFT;
<         in[1] = (a1 + b1) >> ROW_SHIFT;
<         in[2] = (a2 + b2) >> ROW_SHIFT;
<         in[3] = (a3 + b3) >> ROW_SHIFT;
<         in[4] = (a3 - b3) >> ROW_SHIFT;
<         in[5] = (a2 - b2) >> ROW_SHIFT;
<         in[6] = (a1 - b1) >> ROW_SHIFT;
<         in[7] = (a0 - b0) >> ROW_SHIFT;
---
>         in[0] = (int)(a0 + b0) >> ROW_SHIFT;
>         in[1] = (int)(a1 + b1) >> ROW_SHIFT;
>         in[2] = (int)(a2 + b2) >> ROW_SHIFT;
>         in[3] = (int)(a3 + b3) >> ROW_SHIFT;
>         in[4] = (int)(a3 - b3) >> ROW_SHIFT;
>         in[5] = (int)(a2 - b2) >> ROW_SHIFT;
>         in[6] = (int)(a1 - b1) >> ROW_SHIFT;
>         in[7] = (int)(a0 - b0) >> ROW_SHIFT;
145c145
< #define MULT(c, x, n)  (((c) * (x)) >> (n))
---
> #define MULT(c, x, n)  ((unsigned)((int)((c) * (unsigned)(x)) >> (n)))
diff -r android/contrib/ffmpeg-x86/libavcodec/xwddec.c /tmp/ffmpeg-x86/libavcodec/xwddec.c
41a42
>     int width, height;
63,64c64,65
<     avctx->width  = bytestream2_get_be32u(&gb);
<     avctx->height = bytestream2_get_be32u(&gb);
---
>     width         = bytestream2_get_be32u(&gb);
>     height        = bytestream2_get_be32u(&gb);
78a80,82
> 
>     if ((ret = ff_set_dimensions(avctx, width, height)) < 0)
>         return ret;
diff -r android/contrib/ffmpeg-x86/libavcodec/zmbv.c /tmp/ffmpeg-x86/libavcodec/zmbv.c
410a411
>     int expected_size;
506a508,515
>     if (c->flags & ZMBV_KEYFRAME) {
>         expected_size = avctx->width * avctx->height * (c->bpp / 8);
>     } else {
>         expected_size = (c->bx * c->by * 2 + 3) & ~3;
>     }
>     if (avctx->pix_fmt == AV_PIX_FMT_PAL8 &&
>         (c->flags & (ZMBV_DELTAPAL | ZMBV_KEYFRAME)))
>         expected_size += 768;
513,515d521
<     if ((ret = ff_get_buffer(avctx, frame, 0)) < 0)
<         return ret;
< 
521a528
>         c->decomp_len = len;
534a542,549
>     if (expected_size > c->decomp_len ||
>         (c->flags & ZMBV_KEYFRAME) && expected_size < c->decomp_len) {
>         av_log(avctx, AV_LOG_ERROR, "decompressed size %d is incorrect, expected %d\n", c->decomp_len, expected_size);
>         return AVERROR_INVALIDDATA;
>     }
>     if ((ret = ff_get_buffer(avctx, frame, 0)) < 0)
>         return ret;
> 
541a557,558
>         if (c->decomp_len < 2LL * ((c->width + c->bw - 1) / c->bw) * ((c->height + c->bh - 1) / c->bh))
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavdevice/decklink_dec.cpp /tmp/ffmpeg-x86/libavdevice/decklink_dec.cpp
968c968
<         st->codecpar->codec_tag   = avcodec_pix_fmt_to_codec_tag((enum AVPixelFormat)st->codecpar->format);;
---
>         st->codecpar->codec_tag   = avcodec_pix_fmt_to_codec_tag((enum AVPixelFormat)st->codecpar->format);
diff -r android/contrib/ffmpeg-x86/libavdevice/iec61883.c /tmp/ffmpeg-x86/libavdevice/iec61883.c
121c121
<     packet->buf = av_malloc(length);
---
>     packet->buf = av_malloc(length + AV_INPUT_BUFFER_PADDING_SIZE);
129a130
>     memset(packet->buf + length, 0, AV_INPUT_BUFFER_PADDING_SIZE);
202a204,205
>     if (size < 0)
>         av_free(packet->buf);
206,207c209,210
<     if (size > 0)
<         return size;
---
>     if (size < 0)
>         return -1;
209c212,218
<     return -1;
---
>     if (av_packet_from_data(pkt, pkt->data, pkt->size) < 0) {
>         av_freep(&pkt->data);
>         av_packet_unref(pkt);
>         return -1;
>     }
> 
>     return size;
456a466
>         av_freep(&dv->dv_demux);
diff -r android/contrib/ffmpeg-x86/libavfilter/af_dcshift.c /tmp/ffmpeg-x86/libavfilter/af_dcshift.c
31c31
<     double limiterthreshhold;
---
>     double limiterthreshold;
50c50
<     s->limiterthreshhold = INT32_MAX * (1.0 - (fabs(s->dcshift) - s->limitergain));
---
>     s->limiterthreshold = INT32_MAX * (1.0 - (fabs(s->dcshift) - s->limitergain));
114,121c114,121
<                 if (d > s->limiterthreshhold && dcshift > 0) {
<                     d = (d - s->limiterthreshhold) * s->limitergain /
<                              (INT32_MAX - s->limiterthreshhold) +
<                              s->limiterthreshhold + dcshift;
<                 } else if (d < -s->limiterthreshhold && dcshift < 0) {
<                     d = (d + s->limiterthreshhold) * s->limitergain /
<                              (INT32_MAX - s->limiterthreshhold) -
<                              s->limiterthreshhold + dcshift;
---
>                 if (d > s->limiterthreshold && dcshift > 0) {
>                     d = (d - s->limiterthreshold) * s->limitergain /
>                              (INT32_MAX - s->limiterthreshold) +
>                              s->limiterthreshold + dcshift;
>                 } else if (d < -s->limiterthreshold && dcshift < 0) {
>                     d = (d + s->limiterthreshold) * s->limitergain /
>                              (INT32_MAX - s->limiterthreshold) -
>                              s->limiterthreshold + dcshift;
diff -r android/contrib/ffmpeg-x86/libavfilter/af_pan.c /tmp/ffmpeg-x86/libavfilter/af_pan.c
168a169
>         sign = 1;
diff -r android/contrib/ffmpeg-x86/libavfilter/af_silenceremove.c /tmp/ffmpeg-x86/libavfilter/af_silenceremove.c
188a189,193
>     if (s->start_duration < 0) {
>         av_log(ctx, AV_LOG_WARNING, "start duration must be non-negative\n");
>         s->start_duration = -s->start_duration;
>     }
> 
190a196,199
>     if (s->stop_duration < 0) {
>         av_log(ctx, AV_LOG_WARNING, "stop duration must be non-negative\n");
>         s->stop_duration = -s->stop_duration;
>     }
diff -r android/contrib/ffmpeg-x86/libavfilter/formats.c /tmp/ffmpeg-x86/libavfilter/formats.c
75c75
<                         av_log(NULL, AV_LOG_ERROR, "Duplicate formats in avfilter_merge_formats() detected\n"); \
---
>                         av_log(NULL, AV_LOG_ERROR, "Duplicate formats in %s detected\n", __FUNCTION__); \
diff -r android/contrib/ffmpeg-x86/libavfilter/vf_aspect.c /tmp/ffmpeg-x86/libavfilter/vf_aspect.c
107c107
<         av_reduce(&dar->num, &dar->den, sar.num * w, sar.den * h, INT_MAX);
---
>         av_reduce(&dar->num, &dar->den, sar.num * (int64_t)w, sar.den * (int64_t)h, INT_MAX);
diff -r android/contrib/ffmpeg-x86/libavfilter/vf_deinterlace_vaapi.c /tmp/ffmpeg-x86/libavfilter/vf_deinterlace_vaapi.c
618c618
<       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingNone }, .unit = "mode" },
---
>       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingNone }, 0, 0, FLAGS, "mode" },
620c620
<       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingBob }, .unit = "mode" },
---
>       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingBob }, 0, 0, FLAGS, "mode" },
622c622
<       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingWeave }, .unit = "mode" },
---
>       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingWeave }, 0, 0, FLAGS,  "mode" },
624c624
<       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingMotionAdaptive }, .unit = "mode" },
---
>       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingMotionAdaptive }, 0, 0, FLAGS, "mode" },
626c626
<       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingMotionCompensated }, .unit = "mode" },
---
>       0, AV_OPT_TYPE_CONST, { .i64 = VAProcDeinterlacingMotionCompensated }, 0, 0, FLAGS, "mode" },
631c631
<       0, AV_OPT_TYPE_CONST, { .i64 = 1 }, .unit = "rate" },
---
>       0, AV_OPT_TYPE_CONST, { .i64 = 1 }, 0, 0, FLAGS, "rate" },
633c633
<       0, AV_OPT_TYPE_CONST, { .i64 = 2 }, .unit = "rate" },
---
>       0, AV_OPT_TYPE_CONST, { .i64 = 2 }, 0, 0, FLAGS, "rate" },
diff -r android/contrib/ffmpeg-x86/libavfilter/vf_find_rect.c /tmp/ffmpeg-x86/libavfilter/vf_find_rect.c
25d24
< #include "libavutil/avassert.h"
162c161
<         search(foc, pass+1, maxpass, xmin>>1, (xmax+1)>>1, ymin>>1, (ymax+1)>>1, &sub_x, &sub_y, 1.0);
---
>         search(foc, pass+1, maxpass, xmin>>1, (xmax+1)>>1, ymin>>1, (ymax+1)>>1, &sub_x, &sub_y, 2.0);
172d170
<             av_assert0(score != 0);
201c199
<                         &best_x, &best_y, 1.0);
---
>                         &best_x, &best_y, 2.0);
diff -r android/contrib/ffmpeg-x86/libavfilter/vf_geq.c /tmp/ffmpeg-x86/libavfilter/vf_geq.c
85,86c85,86
<     xi = x = av_clipf(x, 0, w - 2);
<     yi = y = av_clipf(y, 0, h - 2);
---
>     xi = x = av_clipd(x, 0, w - 2);
>     yi = y = av_clipd(y, 0, h - 2);
diff -r android/contrib/ffmpeg-x86/libavfilter/vf_hqx.c /tmp/ffmpeg-x86/libavfilter/vf_hqx.c
526c526
<             c = bg + (rg<<16) + 0x010101 * startg;
---
>             c = bg + rg * (1 << 16) + 0x010101 * startg;
diff -r android/contrib/ffmpeg-x86/libavfilter/vf_signature.c /tmp/ffmpeg-x86/libavfilter/vf_signature.c
579c579,580
<         strcpy(filename, sic->filename);
---
>         if (av_strlcpy(filename, sic->filename, sizeof(filename)) >= sizeof(filename))
>             return AVERROR(EINVAL);
diff -r android/contrib/ffmpeg-x86/libavfilter/vf_transpose.c /tmp/ffmpeg-x86/libavfilter/vf_transpose.c
29a30
> #include "libavutil/avassert.h"
56a58
>     int planes;
217a220,223
>     s->planes = av_pix_fmt_count_planes(outlink->format);
> 
>     av_assert0(desc_in->nb_components == desc_out->nb_components);
> 
275c281
<     for (plane = 0; out->data[plane]; plane++) {
---
>     for (plane = 0; plane < s->planes; plane++) {
diff -r android/contrib/ffmpeg-x86/libavfilter/vf_xbr.c /tmp/ffmpeg-x86/libavfilter/vf_xbr.c
398c398
<             c = bg + (rg<<16) + 0x010101 * startg;
---
>             c = bg + rg * (1 << 16) + 0x010101 * startg;
diff -r android/contrib/ffmpeg-x86/libavformat/4xm.c /tmp/ffmpeg-x86/libavformat/4xm.c
62,63c62,65
<     if (fourcc_tag != LIST_TAG) \
<         return AVERROR_INVALIDDATA; \
---
>     if (fourcc_tag != LIST_TAG) { \
>         ret = AVERROR_INVALIDDATA; \
>         goto fail; \
>     } \
213c215
<     unsigned char *header;
---
>     unsigned char *header = NULL;
218a221
>     fourxm->video_stream_index = -1;
323a327,328
>             if (fourxm->video_stream_index < 0)
>                 return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavformat/aacdec.c /tmp/ffmpeg-x86/libavformat/aacdec.c
79a80,100
> static int adts_aac_resync(AVFormatContext *s)
> {
>     uint16_t state;
> 
>     // skip data until an ADTS frame is found
>     state = avio_r8(s->pb);
>     while (!avio_feof(s->pb) && avio_tell(s->pb) < s->probesize) {
>         state = (state << 8) | avio_r8(s->pb);
>         if ((state >> 4) != 0xFFF)
>             continue;
>         avio_seek(s->pb, -2, SEEK_CUR);
>         break;
>     }
>     if (s->pb->eof_reached)
>         return AVERROR_EOF;
>     if ((state >> 4) != 0xFFF)
>         return AVERROR_INVALIDDATA;
> 
>     return 0;
> }
> 
83c104
<     uint16_t state;
---
>     int ret;
101,111c122,124
<     // skip data until the first ADTS frame is found
<     state = avio_r8(s->pb);
<     while (!avio_feof(s->pb) && avio_tell(s->pb) < s->probesize) {
<         state = (state << 8) | avio_r8(s->pb);
<         if ((state >> 4) != 0xFFF)
<             continue;
<         avio_seek(s->pb, -2, SEEK_CUR);
<         break;
<     }
<     if ((state >> 4) != 0xFFF)
<         return AVERROR_INVALIDDATA;
---
>     ret = adts_aac_resync(s);
>     if (ret < 0)
>         return ret;
122a136
> retry:
133c147,150
<         return AVERROR_INVALIDDATA;
---
>         ret = adts_aac_resync(s);
>         if (ret < 0)
>             return ret;
>         goto retry;
142c159,163
<     return av_append_packet(s->pb, pkt, fsize - ADTS_HEADER_SIZE);
---
>     ret = av_append_packet(s->pb, pkt, fsize - ADTS_HEADER_SIZE);
>     if (ret < 0)
>         av_packet_unref(pkt);
> 
>     return ret;
diff -r android/contrib/ffmpeg-x86/libavformat/aadec.c /tmp/ffmpeg-x86/libavformat/aadec.c
81a82
>     int ret;
88c89
<     if (toc_size > MAX_TOC_ENTRIES)
---
>     if (toc_size > MAX_TOC_ENTRIES || toc_size < 2)
115c116,117
<             sscanf(val, "%"SCNu32"%"SCNu32"%"SCNu32"%"SCNu32,
---
> 
>             ret = sscanf(val, "%"SCNu32"%"SCNu32"%"SCNu32"%"SCNu32,
116a119,121
>             if (ret != 4)
>                 return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavformat/amr.c /tmp/ffmpeg-x86/libavformat/amr.c
86c86,87
<     avio_read(pb, header, 6);
---
>     if (avio_read(pb, header, 6) != 6)
>         return AVERROR_INVALIDDATA;
92c93,94
<         avio_read(pb, header + 6, 3);
---
>         if (avio_read(pb, header + 6, 3) != 3)
>             return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavformat/aqtitledec.c /tmp/ffmpeg-x86/libavformat/aqtitledec.c
84c84
<                     return AVERROR(ENOMEM);
---
>                     goto fail;
88c88
<                 return AVERROR(ENOMEM);
---
>                 goto fail;
99a100,102
> fail:
>     ff_subtitles_queue_clean(&aqt->q);
>     return AVERROR(ENOMEM);
diff -r android/contrib/ffmpeg-x86/libavformat/asfdec_f.c /tmp/ffmpeg-x86/libavformat/asfdec_f.c
324,325c324
<     if ((unsigned)len >= (UINT_MAX - LEN) / 2)
<         return;
---
>     av_assert0((unsigned)len < (INT_MAX - LEN) / 2);
714a714,716
>         if (value_len < 0 || value_len > UINT16_MAX)
>             return AVERROR_INVALIDDATA;
> 
859a862
> 
860a864,865
>                     if (len > UINT16_MAX)
>                         return AVERROR_INVALIDDATA;
861a867
> 
862a869,870
>                     if (len > UINT16_MAX)
>                         return AVERROR_INVALIDDATA;
863a872
> 
864a874,875
>                     if (len > UINT16_MAX)
>                         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavformat/asfdec_o.c /tmp/ffmpeg-x86/libavformat/asfdec_o.c
709c709,710
<     if (size_bmp > BMP_HEADER_SIZE) {
---
>     if (size_bmp > BMP_HEADER_SIZE &&
>         size_bmp < INT_MAX - AV_INPUT_BUFFER_PADDING_SIZE) {
diff -r android/contrib/ffmpeg-x86/libavformat/assdec.c /tmp/ffmpeg-x86/libavformat/assdec.c
162a163,164
>     if (res < 0)
>         ass_read_close(s);
diff -r android/contrib/ffmpeg-x86/libavformat/async.c /tmp/ffmpeg-x86/libavformat/async.c
482c482
< URLProtocol ff_async_protocol = {
---
> const URLProtocol ff_async_protocol = {
diff -r android/contrib/ffmpeg-x86/libavformat/avformat.h /tmp/ffmpeg-x86/libavformat/avformat.h
723,727d722
<      * Used by format which open further nested input.
<      */
<     int (*read_header2)(struct AVFormatContext *, AVDictionary **options);
< 
<     /**
diff -r android/contrib/ffmpeg-x86/libavformat/avidec.c /tmp/ffmpeg-x86/libavformat/avidec.c
64c64
<     uint8_t *sub_buffer;
---
>     AVBufferRef *sub_buffer;
673c673
<             if (ast->cum_len*ast->scale/ast->rate > 3600) {
---
>             if (ast->cum_len > 3600LL * ast->rate / ast->scale) {
1121,1122c1121,1123
<         ast->sub_buffer = pkt->data;
<         memset(pkt, 0, sizeof(*pkt));
---
>         ast->sub_buffer = pkt->buf;
>         pkt->buf = NULL;
>         av_packet_unref(pkt);
1526c1527,1529
<             if (avi->dts_max - dts > 2*AV_TIME_BASE) {
---
>             if (avi->dts_max < dts) {
>                 avi->dts_max = dts;
>             } else if (avi->dts_max - (uint64_t)dts > 2*AV_TIME_BASE) {
1529,1530c1532
<             }else if (avi->dts_max < dts)
<                 avi->dts_max = dts;
---
>             }
1908c1910
<             av_freep(&ast->sub_buffer);
---
>             av_buffer_unref(&ast->sub_buffer);
diff -r android/contrib/ffmpeg-x86/libavformat/avienc.c /tmp/ffmpeg-x86/libavformat/avienc.c
461a462,469
> 
>                 if (par->format == AV_PIX_FMT_PAL8) {
>                     if (par->bits_per_coded_sample < 0 || par->bits_per_coded_sample > 8) {
>                         av_log(s, AV_LOG_ERROR, "PAL8 with %d bps is not allowed\n", par->bits_per_coded_sample);
>                         return AVERROR(EINVAL);
>                     }
>                 }
> 
diff -r android/contrib/ffmpeg-x86/libavformat/aviobuf.c /tmp/ffmpeg-x86/libavformat/aviobuf.c
359a360,363
>     if(s->eof_reached){
>         s->eof_reached=0;
>         fill_buffer(s);
>     }
556c560
<     if (s->read_packet && s->orig_buffer_size && s->buffer_size > s->orig_buffer_size) {
---
>     if (s->read_packet && s->orig_buffer_size && s->buffer_size > s->orig_buffer_size && len >= s->orig_buffer_size) {
564d567
<         av_assert0(len >= s->orig_buffer_size);
1231c1234
<     new_size = d->pos + buf_size;
---
>     new_size = (unsigned)d->pos + buf_size;
diff -r android/contrib/ffmpeg-x86/libavformat/bethsoftvid.c /tmp/ffmpeg-x86/libavformat/bethsoftvid.c
149,151c149,155
<         vidbuf_start = av_fast_realloc(vidbuf_start, &vidbuf_capacity, vidbuf_nbytes + BUFFER_PADDING_SIZE);
<         if(!vidbuf_start)
<             return AVERROR(ENOMEM);
---
>         uint8_t *tmp = av_fast_realloc(vidbuf_start, &vidbuf_capacity,
>                                        vidbuf_nbytes + BUFFER_PADDING_SIZE);
>         if (!tmp) {
>             ret = AVERROR(ENOMEM);
>             goto fail;
>         }
>         vidbuf_start = tmp;
diff -r android/contrib/ffmpeg-x86/libavformat/cdxl.c /tmp/ffmpeg-x86/libavformat/cdxl.c
134c134,135
<     if (FFALIGN(width, 16) * (uint64_t)height * cdxl->header[19] > INT_MAX)
---
>     if (cdxl->header[19] == 0 ||
>         FFALIGN(width, 16) * (uint64_t)height * cdxl->header[19] > INT_MAX)
diff -r android/contrib/ffmpeg-x86/libavformat/concatdec.c /tmp/ffmpeg-x86/libavformat/concatdec.c
67,68d66
<     AVDictionary *options;
<     int error;
189a188
>     st->time_base           = source_st->time_base;
191d189
<     avpriv_set_pts_info(st, 64, source_st->time_base.num, source_st->time_base.den);
322d319
<     AVFormatContext *new_avf = NULL;
324,326d320
<     AVDictionary *tmp = NULL;
<     AVDictionaryEntry *t = NULL;
<     int fps_flag = 0;
328,329c322,326
<     new_avf = avformat_alloc_context();
<     if (!new_avf)
---
>     if (cat->avf)
>         avformat_close_input(&cat->avf);
> 
>     cat->avf = avformat_alloc_context();
>     if (!cat->avf)
332,333c329,330
<     new_avf->flags |= avf->flags & ~AVFMT_FLAG_CUSTOM_IO;
<     new_avf->interrupt_callback = avf->interrupt_callback;
---
>     cat->avf->flags |= avf->flags & ~AVFMT_FLAG_CUSTOM_IO;
>     cat->avf->interrupt_callback = avf->interrupt_callback;
335c332
<     if ((ret = ff_copy_whiteblacklists(new_avf, avf)) < 0)
---
>     if ((ret = ff_copy_whiteblacklists(cat->avf, avf)) < 0)
338,354c335,336
<     if (cat->options)
<         av_dict_copy(&tmp, cat->options, 0);
< 
<     av_dict_set_int(&tmp, "cur_file_no", fileno, 0);
< 
<     t = av_dict_get(tmp, "skip-calc-frame-rate", NULL, AV_DICT_MATCH_CASE);
<     if (t) {
<         fps_flag = (int) strtol(t->value, NULL, 10);
<         if (fps_flag > 0) {
<             av_dict_set_int(&new_avf->metadata, "skip-calc-frame-rate", fps_flag, 0);
<         }
<     }
< 
<     ret = avformat_open_input(&new_avf, file->url, NULL, &tmp);
<     av_dict_free(&tmp);
<     if (ret < 0 ||
<         (ret = avformat_find_stream_info(new_avf, NULL)) < 0) {
---
>     if ((ret = avformat_open_input(&cat->avf, file->url, NULL, NULL)) < 0 ||
>         (ret = avformat_find_stream_info(cat->avf, NULL)) < 0) {
356c338
<         avformat_close_input(&new_avf);
---
>         avformat_close_input(&cat->avf);
359,367d340
< 
<     if (!new_avf)
<         return 0;
< 
<     if (cat->avf)
<         avformat_close_input(&cat->avf);
< 
<     avf->bit_rate = new_avf->bit_rate;
<     cat->avf      = new_avf;
409d381
<     av_dict_free(&cat->options);
414c386
< static int concat_read_header(AVFormatContext *avf, AVDictionary **options)
---
> static int concat_read_header(AVFormatContext *avf)
424,426d395
<     if (options && *options)
<         av_dict_copy(&cat->options, *options, 0);
< 
596d564
< #define CONCAT_MAX_OPEN_TRY 3
604,610d571
<     int try_counter = 0;
<     int is_new_st = 0;
< 
<     if (cat->error) {
<         ret = cat->error;
<         return ret;
<     }
621d581
<             is_new_st = 1;
623c583
<                 goto open_fail;
---
>                 return ret;
626,628c586
<         if (ret < 0) {
<             if (avf->pb && cat->avf->pb)
<                 avf->pb->error = cat->avf->pb->error;
---
>         if (ret < 0)
630,634d587
<         }
<         if (is_new_st) {
<             pkt->flags |= AV_PKT_FLAG_NEW_SEG;
<             is_new_st = 0;
<         }
642c595
<                 goto open_fail;
---
>                 return ret;
652,661d604
< open_fail:
<         ++try_counter;
<         if (try_counter > CONCAT_MAX_OPEN_TRY) {
<             cat->error = ret;
<             if (avf->pb && ret != AVERROR_EOF)
<                avf->pb->error = ret;
<             return AVERROR_EOF;
<         }
< 
<         av_log(avf, AV_LOG_WARNING, "open_next_file() failed (%d)\n", try_counter);
785,787d727
<     /* reset error/complete state */
<     cat->error = 0;
< 
835c775
<     .read_header2   = concat_read_header,
---
>     .read_header    = concat_read_header,
diff -r android/contrib/ffmpeg-x86/libavformat/electronicarts.c /tmp/ffmpeg-x86/libavformat/electronicarts.c
576a577
>     int hit_end = 0;
581c582
<     while (!packet_read || partial_packet) {
---
>     while ((!packet_read && !hit_end) || partial_packet) {
679c680
<             packet_read = 1;
---
>             hit_end = 1;
739a741,743
>     if (ret >= 0 && hit_end && !packet_read)
>         return AVERROR(EAGAIN);
> 
diff -r android/contrib/ffmpeg-x86/libavformat/file.c /tmp/ffmpeg-x86/libavformat/file.c
389c389
<     h->is_streamed = 0;
---
>     h->is_streamed = 1;
398d397
<     .url_seek            = file_seek,
diff -r android/contrib/ffmpeg-x86/libavformat/fitsdec.c /tmp/ffmpeg-x86/libavformat/fitsdec.c
159a160
>         av_bprint_finalize(&avbuf, NULL);
164d164
<         av_bprint_finalize(&avbuf, NULL);
diff -r android/contrib/ffmpeg-x86/libavformat/flvdec.c /tmp/ffmpeg-x86/libavformat/flvdec.c
294,295d293
<     case FLV_CODECID_HEVC:
<         return vpar->codec_id == AV_CODEC_ID_HEVC;
336,340d333
<     case FLV_CODECID_HEVC:
<         par->codec_id = AV_CODEC_ID_HEVC;
<         vstream->need_parsing = AVSTREAM_PARSE_NONE;
<         ret = 3;     // not 4, reading packet type will consume one byte
<         break;
1159,1160c1152
<         st->codecpar->codec_id == AV_CODEC_ID_MPEG4 ||
<         st->codecpar->codec_id == AV_CODEC_ID_HEVC) {
---
>         st->codecpar->codec_id == AV_CODEC_ID_MPEG4) {
1163c1155
<         if (st->codecpar->codec_id == AV_CODEC_ID_H264 || st->codecpar->codec_id == AV_CODEC_ID_MPEG4 || st->codecpar->codec_id == AV_CODEC_ID_HEVC) {
---
>         if (st->codecpar->codec_id == AV_CODEC_ID_H264 || st->codecpar->codec_id == AV_CODEC_ID_MPEG4) {
1179c1171
<             st->codecpar->codec_id == AV_CODEC_ID_H264 || st->codecpar->codec_id == AV_CODEC_ID_HEVC)) {
---
>             st->codecpar->codec_id == AV_CODEC_ID_H264)) {
diff -r android/contrib/ffmpeg-x86/libavformat/flvenc.c /tmp/ffmpeg-x86/libavformat/flvenc.c
881a882,886
>     if (par->codec_type == AVMEDIA_TYPE_AUDIO && !pkt->size) {
>         av_log(s, AV_LOG_WARNING, "Empty audio Packet\n");
>         return AVERROR(EINVAL);
>     }
> 
diff -r android/contrib/ffmpeg-x86/libavformat/flv.h /tmp/ffmpeg-x86/libavformat/flv.h
112d111
<     FLV_CODECID_HEVC    = 12,
diff -r android/contrib/ffmpeg-x86/libavformat/ftp.c /tmp/ffmpeg-x86/libavformat/ftp.c
392c392
<     if (ftp_send_command(s, command, size_codes, &res) == 213 && res) {
---
>     if (ftp_send_command(s, command, size_codes, &res) == 213 && res && strlen(res) > 4) {
diff -r android/contrib/ffmpeg-x86/libavformat/gdv.c /tmp/ffmpeg-x86/libavformat/gdv.c
88a89,91
>     if (!fps)
>         return AVERROR_INVALIDDATA;
> 
diff -r android/contrib/ffmpeg-x86/libavformat/hevc.c /tmp/ffmpeg-x86/libavformat/hevc.c
27a28
> #include "avio_internal.h"
671a673,674
>     memset(dst + len, 0, AV_INPUT_BUFFER_PADDING_SIZE);
> 
1088a1092,1096
>     if (ret < 0) {
>         ffio_free_dyn_buf(&pb);
>         return ret;
>     }
> 
diff -r android/contrib/ffmpeg-x86/libavformat/hevc.h /tmp/ffmpeg-x86/libavformat/hevc.h
63c63
<  * On output, *size holds the size (in bytes) of the output data buffer.
---
>  * On success, *size holds the size (in bytes) of the output data buffer.
67,69c67,69
<  *        buffer (on input) and of the output buffer (on output)
<  * @param buf_out address of the variable holding the address of the output
<  *        buffer
---
>  *        buffer (on input) and of the output buffer (on success)
>  * @param buf_out on success, address of the variable holding the address of
>  *        the output buffer
diff -r android/contrib/ffmpeg-x86/libavformat/hls.c /tmp/ffmpeg-x86/libavformat/hls.c
5d4
<  * Copyright (c) 2011 Cedirc Fung (wolfplanet@gmail.com)
69d67
<     int64_t previous_duration;
71d68
<     int64_t start_time;
613d609
<     av_dict_set(&tmp, "seekable", "1", 0);
675c671
<     int64_t duration = 0, previous_duration1 = 0, previous_duration = 0, total_duration = 0;
---
>     int64_t duration = 0;
689d684
<     int start_seq_no = -1;
766,770c761
<             /* Some buggy HLS servers write #EXT-X-MEDIA-SEQUENCE more than once */
<             if (start_seq_no < 0) {
<                 start_seq_no = atoi(ptr);
<                 pls->start_seq_no = start_seq_no;
<             }
---
>             pls->start_seq_no = atoi(ptr);
790,791d780
<         } else if (av_strstart(line, "#EXT-X-DISCONTINUITY", &ptr)) {
<             previous_duration = previous_duration1;
824,829d812
<                 previous_duration1 += duration;
<                 seg->previous_duration = previous_duration;
<                 seg->start_time = total_duration;
<                 total_duration += duration;
<                 seg->duration = duration;
<                 seg->key_type = key_type;
858a842,848
>                 if (duration < 0.001 * AV_TIME_BASE) {
>                     av_log(c->ctx, AV_LOG_WARNING, "Cannot get correct #EXTINF value of segment %s,"
>                                     " set to default value to 1ms.\n", seg->url);
>                     duration = 0.001 * AV_TIME_BASE;
>                 }
>                 seg->duration = duration;
>                 seg->key_type = key_type;
1649c1639
< static int hls_read_header(AVFormatContext *s, AVDictionary **options)
---
> static int hls_read_header(AVFormatContext *s)
1664,1666d1653
<     if (options && *options)
<         av_dict_copy(&c->avio_opts, *options, 0);
< 
1757a1745
>         char *url;
1793,1794c1781,1783
<         ret = av_probe_input_buffer(&pls->pb, &in_fmt, pls->segments[0]->url,
<                                     NULL, 0, 0);
---
>         url = av_strdup(pls->segments[0]->url);
>         ret = av_probe_input_buffer(&pls->pb, &in_fmt, url, NULL, 0, 0);
>         av_free(url);
1954d1942
<                 int64_t pkt_ts;
1970,1979c1958,1961
<                     if (pls->pkt.pts != AV_NOPTS_VALUE)
<                         pkt_ts =  pls->pkt.pts;
<                     else if (pls->pkt.dts != AV_NOPTS_VALUE)
<                         pkt_ts =  pls->pkt.dts;
<                     else
<                         pkt_ts = AV_NOPTS_VALUE;
< 
< 
<                     c->first_timestamp = s->start_time != AV_NOPTS_VALUE ? s->start_time : 0;
< 
---
>                     if (c->first_timestamp == AV_NOPTS_VALUE &&
>                         pls->pkt.dts       != AV_NOPTS_VALUE)
>                         c->first_timestamp = av_rescale_q(pls->pkt.dts,
>                             get_timebase(pls), AV_TIME_BASE_Q);
1988c1970
<                     if (pkt_ts == AV_NOPTS_VALUE) {
---
>                     if (pls->pkt.dts == AV_NOPTS_VALUE) {
1994c1976
<                     ts_diff = av_rescale_rnd(pkt_ts, AV_TIME_BASE,
---
>                     ts_diff = av_rescale_rnd(pls->pkt.dts, AV_TIME_BASE,
1997d1978
< 
2074,2095d2054
<         if (c->playlists[minplaylist]->finished) {
<             struct playlist *pls = c->playlists[minplaylist];
<             int seq_no = pls->cur_seq_no - pls->start_seq_no;
<             if (seq_no < pls->n_segments && s->streams[pkt->stream_index]) {
<                 struct segment *seg = pls->segments[seq_no];
<                 int64_t pred = av_rescale_q(seg->previous_duration,
<                                             AV_TIME_BASE_Q,
<                                             s->streams[pkt->stream_index]->time_base);
<                 int64_t max_ts = av_rescale_q(seg->start_time + seg->duration,
<                                               AV_TIME_BASE_Q,
<                                               s->streams[pkt->stream_index]->time_base);
<                 /* EXTINF duration is not precise enough */
<                 max_ts += 2 * AV_TIME_BASE;
<                 if (s->start_time > 0) {
<                     max_ts += av_rescale_q(s->start_time,
<                                            AV_TIME_BASE_Q,
<                                            s->streams[pkt->stream_index]->time_base);
<                 }
<                 if (pkt->dts != AV_NOPTS_VALUE && pkt->dts + pred < max_ts) pkt->dts += pred;
<                 if (pkt->pts != AV_NOPTS_VALUE && pkt->pts + pred < max_ts) pkt->pts += pred;
<             }
<         }
2224c2183
<     .read_header2   = hls_read_header,
---
>     .read_header    = hls_read_header,
diff -r android/contrib/ffmpeg-x86/libavformat/hlsenc.c /tmp/ffmpeg-x86/libavformat/hlsenc.c
110a111,113
>     AVIOContext *out;
>     int packets_written;
>     int init_range_length;
600a604
>     hls->packets_written = 1;
609a614,615
>         hls->packets_written = 0;
>         hls->init_range_length = 0;
612c618,621
<         if ((ret = s->io_open(s, &oc->pb, hls->base_output_dirname, AVIO_FLAG_WRITE, &options)) < 0) {
---
>         if ((ret = avio_open_dyn_buf(&oc->pb)) < 0)
>             return ret;
> 
>         if ((ret = s->io_open(s, &hls->out, hls->base_output_dirname, AVIO_FLAG_WRITE, &options)) < 0) {
636a646
>         avio_flush(oc->pb);
1083,1090d1092
<         } else {
<             if (hls->flags & HLS_ROUND_DURATIONS)
<                 avio_printf(out, "#EXTINF:%ld,\n",  lrint(en->duration));
<             else
<                 avio_printf(out, "#EXTINF:%f,\n", en->duration);
<             if (byterange_mode)
<                 avio_printf(out, "#EXT-X-BYTERANGE:%"PRId64"@%"PRId64"\n",
<                             en->size, en->pos);
1091a1094,1101
>         if (hls->flags & HLS_ROUND_DURATIONS)
>             avio_printf(out, "#EXTINF:%ld,\n",  lrint(en->duration));
>         else
>             avio_printf(out, "#EXTINF:%f,\n", en->duration);
>         if (byterange_mode)
>             avio_printf(out, "#EXT-X-BYTERANGE:%"PRId64"@%"PRId64"\n",
>                         en->size, en->pos);
> 
1116,1120c1126,1128
<         if (!((hls->segment_type == SEGMENT_TYPE_FMP4) && (en == hls->segments))) {
<             if (hls->baseurl)
<                 avio_printf(out, "%s", hls->baseurl);
<             avio_printf(out, "%s\n", en->filename);
<         }
---
>         if (hls->baseurl)
>             avio_printf(out, "%s", hls->baseurl);
>         avio_printf(out, "%s\n", en->filename);
1337a1346
>     int fmp4_init_filename_len = strlen(hls->fmp4_init_filename) + 1;
1447,1466c1456,1463
<     if (av_strcasecmp(hls->fmp4_init_filename, "init.mp4")) {
<         int fmp4_init_filename_len = strlen(hls->fmp4_init_filename) + 1;
<         hls->base_output_dirname = av_malloc(fmp4_init_filename_len);
<         if (!hls->base_output_dirname) {
<             ret = AVERROR(ENOMEM);
<             goto fail;
<         }
<         av_strlcpy(hls->base_output_dirname, hls->fmp4_init_filename, fmp4_init_filename_len);
<     } else {
<         hls->base_output_dirname = av_malloc(basename_size);
<         if (!hls->base_output_dirname) {
<             ret = AVERROR(ENOMEM);
<             goto fail;
<         }
< 
<         av_strlcpy(hls->base_output_dirname, s->filename, basename_size);
<         p = strrchr(hls->base_output_dirname, '/');
<         if (p) {
<             *(p + 1) = '\0';
<             av_strlcat(hls->base_output_dirname, hls->fmp4_init_filename, basename_size);
---
>     if (hls->segment_type == SEGMENT_TYPE_FMP4) {
>         if (av_strcasecmp(hls->fmp4_init_filename, "init.mp4")) {
>             hls->base_output_dirname = av_malloc(fmp4_init_filename_len);
>             if (!hls->base_output_dirname) {
>                 ret = AVERROR(ENOMEM);
>                 goto fail;
>             }
>             av_strlcpy(hls->base_output_dirname, hls->fmp4_init_filename, fmp4_init_filename_len);
1468c1465,1484
<             av_strlcpy(hls->base_output_dirname, hls->fmp4_init_filename, basename_size);
---
>             if (basename_size > 0) {
>                 hls->base_output_dirname = av_malloc(basename_size);
>             } else {
>                 hls->base_output_dirname = av_malloc(strlen(hls->fmp4_init_filename) + 1);
>             }
>             if (!hls->base_output_dirname) {
>                 ret = AVERROR(ENOMEM);
>                 goto fail;
>             }
> 
>             if (basename_size > 0) {
>                 av_strlcpy(hls->base_output_dirname, s->filename, basename_size);
>                 p = strrchr(hls->base_output_dirname, '/');
>             }
>             if (p) {
>                 *(p + 1) = '\0';
>                 av_strlcat(hls->base_output_dirname, hls->fmp4_init_filename, basename_size);
>             } else {
>                 av_strlcpy(hls->base_output_dirname, hls->fmp4_init_filename, fmp4_init_filename_len);
>             }
1596a1613,1614
>     int range_length = 0;
>     uint8_t *buffer = NULL;
1642c1660
<     if (hls->fmp4_init_mode || can_split && av_compare_ts(pkt->pts - hls->start_pts, st->time_base,
---
>     if (hls->packets_written && can_split && av_compare_ts(pkt->pts - hls->start_pts, st->time_base,
1658c1676,1686
<             ff_format_io_close(s, &oc->pb);
---
>             if (hls->segment_type == SEGMENT_TYPE_FMP4 && !hls->init_range_length) {
>                 avio_flush(oc->pb);
>                 range_length = avio_close_dyn_buf(oc->pb, &buffer);
>                 avio_write(hls->out, buffer, range_length);
>                 hls->init_range_length = range_length;
>                 avio_open_dyn_buf(&oc->pb);
>                 hls->packets_written = 0;
>                 ff_format_io_close(s, &hls->out);
>             } else {
>                 ff_format_io_close(s, &oc->pb);
>             }
1715a1744
>     hls->packets_written++;
diff -r android/contrib/ffmpeg-x86/libavformat/hnm.c /tmp/ffmpeg-x86/libavformat/hnm.c
72a73
>     int ret;
116c117,118
<     vst->codecpar->extradata  = av_mallocz(1);
---
>     if ((ret = ff_alloc_extradata(vst->codecpar, 1)) < 0)
>         return ret;
118,119c120
<     vst->codecpar->extradata_size = 1;
<     memcpy(vst->codecpar->extradata, &hnm->version, 1);
---
>     vst->codecpar->extradata[0] = hnm->version;
diff -r android/contrib/ffmpeg-x86/libavformat/http.c /tmp/ffmpeg-x86/libavformat/http.c
33d32
< #include "libavutil/application.h"
127,129d125
<     char *tcp_hook;
<     int64_t app_ctx_intptr;
<     AVApplicationContext *app_ctx;
170,171d165
<     { "http-tcp-hook", "hook protocol on tcp", OFFSET(tcp_hook), AV_OPT_TYPE_STRING, { .str = "tcp" }, 0, 0, D | E },
<     { "ijkapplication", "AVApplicationContext", OFFSET(app_ctx_intptr), AV_OPT_TYPE_INT64, { .i64 = 0 }, INT64_MIN, INT64_MAX, .flags = D },
198d191
<     char prev_location[4096];
201,202d193
<     lower_proto = s->tcp_hook;
< 
213d203
<         av_dict_set_int(options, "fastopen", 0, 0);
240d229
<         av_dict_set_int(options, "ijkapplication", (int64_t)(intptr_t)s->app_ctx, 0);
248d236
<     av_strlcpy(prev_location, s->location, sizeof(prev_location));
502,503d489
<     s->app_ctx = (AVApplicationContext *)(intptr_t)s->app_ctx_intptr;
< 
533d518
<     av_application_will_http_open(s->app_ctx, (void*)h, uri);
535d519
<     av_application_did_http_open(s->app_ctx, (void*)h, uri, ret, s->http_code, s->filesize);
556a541
>     return 0;
557a543,545
>     if (c) {
>         ffurl_closep(c);
>     }
886c874
<             while (!av_isspace(*p))
---
>             while (*p && !av_isspace(*p))
1126d1113
<     uint64_t filesize = s->filesize;
1288,1296d1274
<     /* Some buggy servers may missing 'Content-Range' header for range request */
<     if (off > 0 && s->off <= 0 && (off + s->filesize == filesize)) {
<         av_log(NULL, AV_LOG_WARNING,
<                "try to fix missing 'Content-Range' at server side (%"PRId64",%"PRId64") => (%"PRId64",%"PRId64")",
<                s->off, s->filesize, off, filesize);
<         s->off = off;
<         s->filesize = filesize;
<     }
< 
1347,1355c1325
< 
<         len = size;
<         if (s->filesize > 0 && s->filesize != UINT64_MAX && s->filesize != 2147483647) {
<             int64_t unread = s->filesize - s->off;
<             if (len > unread)
<                 len = (int)unread;
<         }
<         if (len > 0)
<             len = ffurl_read(s->hd, buf, len);
---
>         len = ffurl_read(s->hd, buf, size);
1647d1616
<     av_application_will_http_seek(s->app_ctx, (void*)h, s->location, off);
1649d1617
<         av_application_did_http_seek(s->app_ctx, (void*)h, s->location, off, ret, s->http_code);
1658d1625
<     av_application_did_http_seek(s->app_ctx, (void*)h, s->location, off, ret, s->http_code);
1751,1752d1717
<     s->app_ctx = (AVApplicationContext *)(intptr_t)s->app_ctx_intptr;
< 
1765c1730
<     ff_url_join(lower_url, sizeof(lower_url), s->tcp_hook, NULL, hostname, port,
---
>     ff_url_join(lower_url, sizeof(lower_url), "tcp", NULL, hostname, port,
diff -r android/contrib/ffmpeg-x86/libavformat/icodec.c /tmp/ffmpeg-x86/libavformat/icodec.c
99c99,100
<         if (!st)
---
>         if (!st) {
>             av_freep(&ico->images);
100a102
>         }
113a116
>             av_freep(&ico->images);
129c132,133
<             if (ico->images[i].size < 40)
---
>             if (ico->images[i].size < 40) {
>                 av_freep(&ico->images);
130a135
>             }
140a146
>             av_freep(&ico->images);
diff -r android/contrib/ffmpeg-x86/libavformat/id3v2.c /tmp/ffmpeg-x86/libavformat/id3v2.c
592c592
<     char mimetype[64];
---
>     char mimetype[64] = {0};
614c614,616
<         avio_read(pb, mimetype, 3);
---
>         if (avio_read(pb, mimetype, 3) < 0)
>             goto fail;
> 
Only in android/contrib/ffmpeg-x86/libavformat: ijkutils.c
diff -r android/contrib/ffmpeg-x86/libavformat/img2dec.c /tmp/ffmpeg-x86/libavformat/img2dec.c
880a881
> 
884c885,888
<         b += ff_subtitles_next_line(b);
---
>         int inc = ff_subtitles_next_line(b);
>         if (!inc)
>             break;
>         b += inc;
diff -r android/contrib/ffmpeg-x86/libavformat/isom.h /tmp/ffmpeg-x86/libavformat/isom.h
87a88
>     int found_tfhd;
diff -r android/contrib/ffmpeg-x86/libavformat/jacosubdec.c /tmp/ffmpeg-x86/libavformat/jacosubdec.c
190,191c190,193
<             if (!sub)
<                 return AVERROR(ENOMEM);
---
>             if (!sub) {
>                 ret = AVERROR(ENOMEM);
>                 goto fail;
>             }
diff -r android/contrib/ffmpeg-x86/libavformat/lrcdec.c /tmp/ffmpeg-x86/libavformat/lrcdec.c
204a205
>                     ff_subtitles_queue_clean(&lrc->q);
214a216
>     av_bprint_finalize(&line, NULL);
diff -r android/contrib/ffmpeg-x86/libavformat/Makefile /tmp/ffmpeg-x86/libavformat/Makefile
7,9d6
<           avc.h                                                         \
<           url.h                                                         \
<           internal.h                                                    \
29,30d25
<        avc.o                \
<        ijkutils.o           \
diff -r android/contrib/ffmpeg-x86/libavformat/matroskadec.c /tmp/ffmpeg-x86/libavformat/matroskadec.c
687c687
<     { MATROSKA_ID_BLOCKADDID,      EBML_UINT, 0, offsetof(MatroskaBlock,additional_id) },
---
>     { MATROSKA_ID_BLOCKADDID,      EBML_UINT, 0, offsetof(MatroskaBlock,additional_id), { .u = 1 } },
1322c1322
<                                                  int num)
---
>                                                  uint64_t num)
1331c1331
<     av_log(matroska->ctx, AV_LOG_ERROR, "Invalid track number %d\n", num);
---
>     av_log(matroska->ctx, AV_LOG_ERROR, "Invalid track number %"PRIu64"\n", num);
2092,2093c2092,2101
<             if (!track->default_duration && track->video.frame_rate > 0)
<                 track->default_duration = 1000000000 / track->video.frame_rate;
---
>             if (!track->default_duration && track->video.frame_rate > 0) {
>                 double default_duration = 1000000000 / track->video.frame_rate;
>                 if (default_duration > UINT64_MAX || default_duration < 0) {
>                     av_log(matroska->ctx, AV_LOG_WARNING,
>                          "Invalid frame rate %e. Cannot calculate default duration.\n",
>                          track->video.frame_rate);
>                 } else {
>                     track->default_duration = default_duration;
>                 }
>             }
2384a2393,2396
>         } else if (codec_id == AV_CODEC_ID_VP9 && track->codec_priv.size) {
>             /* we don't need any value stored in CodecPrivate.
>                make sure that it's not exported as extradata. */
>             track->codec_priv.size = 0;
3292c3304,3305
<     av_assert1(block_duration != AV_NOPTS_VALUE);
---
>     if (block_duration > INT64_MAX)
>         block_duration = INT64_MAX;
3498c3511
<     return ret;
---
>     return 0;
3922,3925c3935,3938
<     if (!s->nb_streams) {
<         matroska_read_close(s);
<         av_log(s, AV_LOG_ERROR, "No streams found\n");
<         return AVERROR_INVALIDDATA;
---
>     if (!matroska->tracks.nb_elem || !s->nb_streams) {
>         av_log(s, AV_LOG_ERROR, "No track found\n");
>         ret = AVERROR_INVALIDDATA;
>         goto fail;
3930c3943,3946
<         if (!buf) return AVERROR(ENOMEM);
---
>         if (!buf) {
>             ret = AVERROR(ENOMEM);
>             goto fail;
>         }
3953c3969
<             return ret;
---
>             goto fail;
3962a3979,3981
> fail:
>     matroska_read_close(s);
>     return ret;
diff -r android/contrib/ffmpeg-x86/libavformat/matroskaenc.c /tmp/ffmpeg-x86/libavformat/matroskaenc.c
1499a1500
>             ffio_free_dyn_buf(&dyn_cp);
1860a1862,1868
>     if (s->nb_streams > MAX_TRACKS) {
>         av_log(s, AV_LOG_ERROR,
>                "At most %d streams are supported for muxing in Matroska\n",
>                MAX_TRACKS);
>         return AVERROR(EINVAL);
>     }
> 
1977a1986,1989
>     if (!mkv->stream_durations || !mkv->stream_duration_offsets) {
>         ret = AVERROR(ENOMEM);
>         goto fail;
>     }
2103,2104c2115,2116
< static void mkv_write_block(AVFormatContext *s, AVIOContext *pb,
<                             unsigned int blockid, AVPacket *pkt, int keyframe)
---
> static int mkv_write_block(AVFormatContext *s, AVIOContext *pb,
>                            uint32_t blockid, AVPacket *pkt, int keyframe)
2109c2121
<     int offset = 0, size = pkt->size, side_data_size = 0;
---
>     int err = 0, offset = 0, size = pkt->size, side_data_size = 0;
2124c2136
<         ff_avc_parse_nal_units_buf(pkt->data, &data, &size);
---
>         err = ff_avc_parse_nal_units_buf(pkt->data, &data, &size);
2128c2140
<         ff_hevc_annexb2mp4_buf(pkt->data, &data, &size, 0, NULL);
---
>         err = ff_hevc_annexb2mp4_buf(pkt->data, &data, &size, 0, NULL);
2130,2134c2142
<         int ret = mkv_strip_wavpack(pkt->data, &data, &size);
<         if (ret < 0) {
<             av_log(s, AV_LOG_ERROR, "Error stripping a WavPack packet.\n");
<             return;
<         }
---
>         err = mkv_strip_wavpack(pkt->data, &data, &size);
2137a2146,2151
>     if (err < 0) {
>         av_log(s, AV_LOG_ERROR, "Error when reformatting data of "
>                "a packet from stream %d.\n", pkt->stream_index);
>         return err;
>     }
> 
2159,2161c2173,2179
<         additional_id = AV_RB64(side_data);
<         side_data += 8;
<         side_data_size -= 8;
---
>         if (side_data_size < 8) {
>             side_data_size = 0;
>         } else {
>             additional_id   = AV_RB64(side_data);
>             side_data      += 8;
>             side_data_size -= 8;
>         }
2201a2220,2221
> 
>     return 0;
2209c2229
<     uint8_t *id, *settings;
---
>     const char *id, *settings;
2215a2236
>     id = id ? id : "";
2219a2241
>     settings = settings ? settings : "";
2376c2398,2400
<         mkv_write_block(s, pb, MATROSKA_ID_SIMPLEBLOCK, pkt, keyframe);
---
>         ret = mkv_write_block(s, pb, MATROSKA_ID_SIMPLEBLOCK, pkt, keyframe);
>         if (ret < 0)
>             return ret;
diff -r android/contrib/ffmpeg-x86/libavformat/microdvddec.c /tmp/ffmpeg-x86/libavformat/microdvddec.c
84c84
<     int i = 0;
---
>     int i = 0, ret;
96a97
>         int64_t pts;
119,120c120,123
<                 if (!st->codecpar->extradata)
<                     return AVERROR(ENOMEM);
---
>                 if (!st->codecpar->extradata) {
>                     ret = AVERROR(ENOMEM);
>                     goto fail;
>                 }
136a140,142
>         pts = get_pts(line);
>         if (pts == AV_NOPTS_VALUE)
>             continue;
138,139c144,147
<         if (!sub)
<             return AVERROR(ENOMEM);
---
>         if (!sub) {
>             ret = AVERROR(ENOMEM);
>             goto fail;
>         }
141c149
<         sub->pts = get_pts(line);
---
>         sub->pts = pts;
155a164,166
> fail:
>     ff_subtitles_queue_clean(&microdvd->q);
>     return ret;
diff -r android/contrib/ffmpeg-x86/libavformat/mlvdec.c /tmp/ffmpeg-x86/libavformat/mlvdec.c
80c80
< static void read_string(AVFormatContext *avctx, AVIOContext *pb, const char *tag, int size)
---
> static void read_string(AVFormatContext *avctx, AVIOContext *pb, const char *tag, unsigned size)
396c396
<     AVStream *st = avctx->streams[mlv->stream_index];
---
>     AVStream *st;
399a400,403
>     if (!avctx->nb_streams)
>         return AVERROR_EOF;
> 
>     st = avctx->streams[mlv->stream_index];
diff -r android/contrib/ffmpeg-x86/libavformat/mms.c /tmp/ffmpeg-x86/libavformat/mms.c
97,114c97,116
<             flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);
<             stream_id = flags & 0x7F;
<             //The second condition is for checking CS_PKT_STREAM_ID_REQUEST packet size,
<             //we can calculate the packet size by stream_num.
<             //Please see function send_stream_selection_request().
<             if (mms->stream_num < MMS_MAX_STREAMS &&
<                     46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {
<                 mms->streams = av_fast_realloc(mms->streams,
<                                    &mms->nb_streams_allocated,
<                                    (mms->stream_num + 1) * sizeof(MMSStream));
<                 if (!mms->streams)
<                     return AVERROR(ENOMEM);
<                 mms->streams[mms->stream_num].id = stream_id;
<                 mms->stream_num++;
<             } else {
<                 av_log(NULL, AV_LOG_ERROR,
<                        "Corrupt stream (too many A/V streams)\n");
<                 return AVERROR_INVALIDDATA;
---
>             if (end - p >= (sizeof(ff_asf_guid) * 3 + 26)) {
>                 flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);
>                 stream_id = flags & 0x7F;
>                 //The second condition is for checking CS_PKT_STREAM_ID_REQUEST packet size,
>                 //we can calculate the packet size by stream_num.
>                 //Please see function send_stream_selection_request().
>                 if (mms->stream_num < MMS_MAX_STREAMS &&
>                         46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {
>                     mms->streams = av_fast_realloc(mms->streams,
>                                        &mms->nb_streams_allocated,
>                                        (mms->stream_num + 1) * sizeof(MMSStream));
>                     if (!mms->streams)
>                         return AVERROR(ENOMEM);
>                     mms->streams[mms->stream_num].id = stream_id;
>                     mms->stream_num++;
>                 } else {
>                     av_log(NULL, AV_LOG_ERROR,
>                            "Corrupt stream (too many A/V streams)\n");
>                     return AVERROR_INVALIDDATA;
>                 }
145a148,153
>             if (chunksize > end - p) {
>                 av_log(NULL, AV_LOG_ERROR,
>                     "Corrupt stream (header chunksize %"PRId64" is invalid)\n",
>                     chunksize);
>                 return AVERROR_INVALIDDATA;
>             }
diff -r android/contrib/ffmpeg-x86/libavformat/mov.c /tmp/ffmpeg-x86/libavformat/mov.c
1021a1022
>     av_free(c->aes_decrypt);
1172a1174,1176
>     // Set by mov_read_tfhd(). mov_read_trun() will reject files missing tfhd.
>     c->fragment.found_tfhd = 0;
> 
1770a1775,1778
>     if (c->trak_index < 0) {
>         av_log(c->fc, AV_LOG_WARNING, "STCO outside TRAK\n");
>         return 0;
>     }
2130c2138
<                     if (str_size > 0 && size >= (int)str_size + 26) {
---
>                     if (str_size > 0 && size >= (int)str_size + 30) {
2368c2376,2377
<     if (entries <= 0) {
---
>     /* Each entry contains a size (4 bytes) and format (4 bytes). */
>     if (entries <= 0 || entries > atom.size / 8) {
2404a2414,2419
>     if (sc->extradata) {
>         int j;
>         for (j = 0; j < sc->stsd_count; j++)
>             av_freep(&sc->extradata[j]);
>     }
> 
2424a2440,2441
>     if ((uint64_t)entries * 12 + 4 > atom.size)
>         return AVERROR_INVALIDDATA;
2444a2462,2484
>     for (i = sc->stsc_count - 1; i < UINT_MAX; i--) {
>         int64_t first_min = i + 1;
>         if ((i+1 < sc->stsc_count && sc->stsc_data[i].first >= sc->stsc_data[i+1].first) ||
>             (i > 0 && sc->stsc_data[i].first <= sc->stsc_data[i-1].first) ||
>             sc->stsc_data[i].first < first_min ||
>             sc->stsc_data[i].count < 1 ||
>             sc->stsc_data[i].id < 1) {
>             av_log(c->fc, AV_LOG_WARNING, "STSC entry %d is invalid (first=%d count=%d id=%d)\n", i, sc->stsc_data[i].first, sc->stsc_data[i].count, sc->stsc_data[i].id);
>             if (i+1 >= sc->stsc_count) {
>                 sc->stsc_data[i].first = FFMAX(sc->stsc_data[i].first, first_min);
>                 if (i > 0 && sc->stsc_data[i].first <= sc->stsc_data[i-1].first)
>                     sc->stsc_data[i].first = FFMIN(sc->stsc_data[i-1].first + 1LL, INT_MAX);
>                 sc->stsc_data[i].count = FFMAX(sc->stsc_data[i].count, 1);
>                 sc->stsc_data[i].id    = FFMAX(sc->stsc_data[i].id, 1);
>                 continue;
>             }
>             av_assert0(sc->stsc_data[i+1].first >= 2);
>             // We replace this entry by the next valid
>             sc->stsc_data[i].first = sc->stsc_data[i+1].first - 1;
>             sc->stsc_data[i].count = sc->stsc_data[i+1].count;
>             sc->stsc_data[i].id    = sc->stsc_data[i+1].id;
>         }
>     }
2458c2498
< static inline int mov_get_stsc_samples(MOVStreamContext *sc, unsigned int index)
---
> static inline int64_t mov_get_stsc_samples(MOVStreamContext *sc, unsigned int index)
2464c2504,2506
<     else
---
>     else {
>         // Validation for stsc / stco  happens earlier in mov_read_stsc + mov_read_trak.
>         av_assert0(sc->stsc_data[index].first <= sc->chunk_count);
2465a2508
>     }
2467c2510
<     return sc->stsc_data[index].count * chunk_count;
---
>     return sc->stsc_data[index].count * (int64_t)chunk_count;
2622a2666,2669
>         if (sc->sample_sizes[i] < 0) {
>             av_log(c->fc, AV_LOG_ERROR, "Invalid sample size %d\n", sc->sample_sizes[i]);
>             return AVERROR_INVALIDDATA;
>         }
2683c2730
<         duration+=(int64_t)sample_duration*sample_count;
---
>         duration+=(int64_t)sample_duration*(uint64_t)sample_count;
2689,2690c2736,2742
<     sc->duration_for_fps  += duration;
<     sc->nb_frames_for_fps += total_sample_count;
---
>     if (duration > 0 &&
>         duration <= INT64_MAX - sc->duration_for_fps &&
>         total_sample_count <= INT64_MAX - sc->nb_frames_for_fps
>     ) {
>         sc->duration_for_fps  += duration;
>         sc->nb_frames_for_fps += total_sample_count;
>     }
2717c2769
<     unsigned int i, j, entries, ctts_count = 0;
---
>     unsigned int i, entries, ctts_count = 0;
2750,2752c2802,2803
<         /* Expand entries such that we have a 1-1 mapping with samples. */
<         for (j = 0; j < count; j++)
<             add_ctts_entry(&sc->ctts_data, &ctts_count, &sc->ctts_allocated_size, 1, duration);
---
>         add_ctts_entry(&sc->ctts_data, &ctts_count, &sc->ctts_allocated_size,
>                        count, duration);
2961c3012
<     if((unsigned)(*ctts_count) + 1 >= UINT_MAX / sizeof(MOVStts))
---
>     if((unsigned)(*ctts_count) >= UINT_MAX / sizeof(MOVStts) - 1)
3329a3381
>     av_freep(&frame_duration_buffer);
3348a3401,3402
>     MOVStts *ctts_data_old = sc->ctts_data;
>     unsigned int ctts_count_old = sc->ctts_count;
3416a3471,3492
>         if (ctts_data_old) {
>             // Expand ctts entries such that we have a 1-1 mapping with samples
>             if (sc->sample_count >= UINT_MAX / sizeof(*sc->ctts_data))
>                 return;
>             sc->ctts_count = 0;
>             sc->ctts_allocated_size = 0;
>             sc->ctts_data = av_fast_realloc(NULL, &sc->ctts_allocated_size,
>                                     sc->sample_count * sizeof(*sc->ctts_data));
>             if (!sc->ctts_data) {
>                 av_free(ctts_data_old);
>                 return;
>             }
>             for (i = 0; i < ctts_count_old &&
>                         sc->ctts_count < sc->sample_count; i++)
>                 for (j = 0; j < ctts_data_old[i].count &&
>                             sc->ctts_count < sc->sample_count; j++)
>                     add_ctts_entry(&sc->ctts_data, &sc->ctts_count,
>                                    &sc->ctts_allocated_size, 1,
>                                    ctts_data_old[i].duration);
>             av_free(ctts_data_old);
>         }
> 
3522a3599,3601
>         if (!sc->chunk_count)
>             return;
> 
3744c3823
<     st->id = c->fc->nb_streams;
---
>     st->id = -1;
3757a3837,3843
>     // Here stsc refers to a chunk not described in stco. This is technically invalid,
>     // but we can overlook it (clearing stsc) whenever stts_count == 0 (indicating no samples).
>     if (!sc->chunk_count && !sc->stts_count && sc->stsc_count) {
>         sc->stsc_count = 0;
>         av_freep(&sc->stsc_data);
>     }
> 
3765a3852,3856
>     if (sc->stsc_count && sc->stsc_data[ sc->stsc_count - 1 ].first > sc->chunk_count) {
>         av_log(c->fc, AV_LOG_ERROR, "stream %d, contradictionary STSC and STCO\n",
>                st->index);
>         return AVERROR_INVALIDDATA;
>     }
3944a4036,4038
>         if (*p)
>             break;
> 
3984c4078,4081
<         uint32_t tag = avio_rl32(pb);
---
>         uint32_t tag;
>         if (avio_feof(pb))
>             return AVERROR_EOF;
>         tag = avio_rl32(pb);
4020a4118,4122
>     // Each stream (trak) should have exactly 1 tkhd. This catches bad files and
>     // avoids corrupting AVStreams mapped to an earlier tkhd.
>     if (st->id != -1)
>         return AVERROR_INVALIDDATA;
> 
4139a4242
>     c->fragment.found_tfhd = 1;
4270a4374,4378
>     if (!frag->found_tfhd) {
>         av_log(c->fc, AV_LOG_ERROR, "trun track id unknown, no tfhd was found\n");
>         return AVERROR_INVALIDDATA;
>     }
> 
4386,4387c4494,4500
<         sc->duration_for_fps += sample_duration;
<         sc->nb_frames_for_fps ++;
---
> 
>         if (sample_duration <= INT64_MAX - sc->duration_for_fps &&
>             1 <= INT64_MAX - sc->nb_frames_for_fps
>         ) {
>             sc->duration_for_fps += sample_duration;
>             sc->nb_frames_for_fps ++;
>         }
4506c4619
<         for (i = 0; i < c->fc->nb_streams; i++) {
---
>         if (ref_st) for (i = 0; i < c->fc->nb_streams; i++) {
5996,5999c6109,6111
<     if (mov->dv_demux) {
<         avformat_free_context(mov->dv_fctx);
<         mov->dv_fctx = NULL;
<     }
---
>     av_freep(&mov->dv_demux);
>     avformat_free_context(mov->dv_fctx);
>     mov->dv_fctx = NULL;
6199,6200c6311
<         mov_read_close(s);
<         return err;
---
>         goto fail;
6205,6206c6316,6317
<         mov_read_close(s);
<         return AVERROR_INVALIDDATA;
---
>         err = AVERROR_INVALIDDATA;
>         goto fail;
6259c6370
<                     return err;
---
>                     goto fail;
6279,6280c6390,6391
<                     mov_read_close(s);
<                     return AVERROR_INVALIDDATA;
---
>                     err = AVERROR_INVALIDDATA;
>                     goto fail;
6295,6296c6406,6407
<                     mov_read_close(s);
<                     return AVERROR_INVALIDDATA;
---
>                     err = AVERROR_INVALIDDATA;
>                     goto fail;
6320,6321c6431
<                 mov_read_close(s);
<                 return err;
---
>                 goto fail;
6329c6439
<                     return err;
---
>                     goto fail;
6338c6448
<                     return err;
---
>                     goto fail;
6347c6457
<                     return err;
---
>                     goto fail;
6356c6466
<                     return err;
---
>                     goto fail;
6365c6475
<                     return err;
---
>                     goto fail;
6381a6492,6494
> fail:
>     mov_read_close(s);
>     return err;
6387,6390d6499
<     AVIndexEntry *best_dts_sample = NULL;
<     AVIndexEntry *best_pos_sample = NULL;
<     AVStream *best_dts_stream = NULL;
<     AVStream *best_pos_stream = NULL;
6393d6501
<     int64_t pos = avio_tell(s->pb);
6401c6509
<             if (!best_dts_sample || (!(s->pb->seekable & AVIO_SEEKABLE_NORMAL) && current_sample->pos < best_dts_sample->pos) ||
---
>             if (!sample || (!(s->pb->seekable & AVIO_SEEKABLE_NORMAL) && current_sample->pos < sample->pos) ||
6403,6404c6511,6512
<                  ((msc->pb != s->pb && dts < best_dts) || (msc->pb == s->pb &&
<                  ((FFABS(best_dts - dts) <= AV_TIME_BASE && current_sample->pos < best_dts_sample->pos) ||
---
>                  ((msc->pb != s->pb && dts < best_dts) || (msc->pb == s->pb && dts != AV_NOPTS_VALUE &&
>                  ((FFABS(best_dts - dts) <= AV_TIME_BASE && current_sample->pos < sample->pos) ||
6406,6407c6514
<                 /* find best dts sample */
<                 best_dts_sample = current_sample;
---
>                 sample = current_sample;
6409,6415c6516
<                 best_dts_stream = avst;
<             }
<             if (current_sample->pos >= pos &&
<                 (!best_pos_sample || current_sample->pos < best_pos_sample->pos)) {
<                 /* find nearest sample to avoid seek around */
<                 best_pos_sample = current_sample;
<                 best_pos_stream = avst;
---
>                 *st = avst;
6419,6430d6519
< 
<     if (best_dts_sample && best_dts_sample != best_pos_sample &&
<         (!best_pos_sample ||
<          best_dts_sample->pos < pos ||
<          best_dts_sample->pos > pos + 1024 * 1024)) {
<         sample = best_dts_sample;
<         *st = best_dts_stream;
<     } else {
<         sample = best_pos_sample;
<         *st = best_pos_stream;
<     }
< 
6442a6532
>     int ret;
6479,6480c6569,6572
<     if (mov_read_default(mov, s->pb, (MOVAtom){ AV_RL32("root"), INT64_MAX }) < 0 ||
<         avio_feof(s->pb))
---
>     ret = mov_read_default(mov, s->pb, (MOVAtom){ AV_RL32("root"), INT64_MAX });
>     if (ret < 0)
>         return ret;
>     if (avio_feof(s->pb))
6560a6653,6665
> #if CONFIG_DV_DEMUXER
>         if (mov->dv_demux && sc->dv_audio_container) {
>             AVBufferRef *buf = pkt->buf;
>             ret = avpriv_dv_produce_packet(mov->dv_demux, pkt, pkt->data, pkt->size, pkt->pos);
>             pkt->buf = buf;
>             av_packet_unref(pkt);
>             if (ret < 0)
>                 return ret;
>             ret = avpriv_dv_get_packet(mov->dv_demux, pkt);
>             if (ret < 0)
>                 return ret;
>         }
> #endif
6572,6581d6676
< #if CONFIG_DV_DEMUXER
<         if (mov->dv_demux && sc->dv_audio_container) {
<             avpriv_dv_produce_packet(mov->dv_demux, pkt, pkt->data, pkt->size, pkt->pos);
<             av_freep(&pkt->data);
<             pkt->size = 0;
<             ret = avpriv_dv_get_packet(mov->dv_demux, pkt);
<             if (ret < 0)
<                 return ret;
<         }
< #endif
6605c6700,6702
<         pkt->duration = next_dts - pkt->dts;
---
> 
>         if (next_dts >= pkt->dts)
>             pkt->duration = next_dts - pkt->dts;
6703a6801
>     if (sc->chunk_count) {
6706c6804
<         int next = time_sample + mov_get_stsc_samples(sc, i);
---
>         int64_t next = time_sample + mov_get_stsc_samples(sc, i);
6711a6810
>         av_assert0(next == (int)next);
6712a6812
>     }
diff -r android/contrib/ffmpeg-x86/libavformat/movenc.c /tmp/ffmpeg-x86/libavformat/movenc.c
384c384
<                 avpriv_request_sample(track->par, "Multiple independent substreams");
---
>                 avpriv_request_sample(mov->fc, "Multiple independent substreams");
390a391,395
>         } else {
>             if (hdr->substreamid != 0) {
>                 avpriv_request_sample(mov->fc, "Multiple non EAC3 independent substreams");
>                 return AVERROR_PATCHWELCOME;
>             }
962c967
<         if (track->timescale > UINT16_MAX) {
---
>         if (track->timescale > UINT16_MAX || !track->par->channels) {
4290c4295,4296
<     int starts_with_SAP, i, entries;
---
>     unsigned starts_with_SAP;
>     int i, entries;
5073a5080,5084
> 
>     if (samples_in_chunk < 1) {
>         av_log(s, AV_LOG_ERROR, "fatal error, input packet contains no samples\n");
>         return AVERROR_PATCHWELCOME;
>     }
diff -r android/contrib/ffmpeg-x86/libavformat/mp3dec.c /tmp/ffmpeg-x86/libavformat/mp3dec.c
92c92
<             if (ret != 0)
---
>             if (ret != 0 || end - buf2 < h.frame_size)
diff -r android/contrib/ffmpeg-x86/libavformat/mp3enc.c /tmp/ffmpeg-x86/libavformat/mp3enc.c
395a396
>     int64_t old_pos = avio_tell(s->pb);
455c456
<     avio_seek(s->pb, 0, SEEK_END);
---
>     avio_seek(s->pb, old_pos, SEEK_SET);
diff -r android/contrib/ffmpeg-x86/libavformat/mpc.c /tmp/ffmpeg-x86/libavformat/mpc.c
91c91
<         return AVERROR(ENOMEM);
---
>         goto mem_error;
99c99
<         return AVERROR(ENOMEM);
---
>         goto mem_error;
115a116,118
> mem_error:
>     av_freep(&c->frames);
>     return AVERROR(ENOMEM);
diff -r android/contrib/ffmpeg-x86/libavformat/mpeg.c /tmp/ffmpeg-x86/libavformat/mpeg.c
109c109
<                                                      : AVPROBE_SCORE_EXTENSION / 2 + 1; // 1 more than mp3
---
>                                                      : AVPROBE_SCORE_EXTENSION / 2 + (audio + vid + pspack > 1); // 1 more than mp3
diff -r android/contrib/ffmpeg-x86/libavformat/mpegenc.c /tmp/ffmpeg-x86/libavformat/mpegenc.c
1165c1165
<             (s->packet_number == 0 ||
---
>             (s->packet_number == 0 || pts != AV_NOPTS_VALUE &&
diff -r android/contrib/ffmpeg-x86/libavformat/mpegts.c /tmp/ffmpeg-x86/libavformat/mpegts.c
890c890
<     char *sd;
---
>     uint8_t *sd;
2250c2250
< static int handle_packet(MpegTSContext *ts, const uint8_t *packet)
---
> static int handle_packet(MpegTSContext *ts, const uint8_t *packet, int64_t pos)
2256d2255
<     int64_t pos;
2313d2311
<     pos = avio_tell(ts->stream->pb);
2421,2422c2419
< 
<     avio_seek(pb, -FFMIN(seekback, pos), SEEK_CUR);
---
>     int64_t back = FFMIN(seekback, pos);
2426c2423
<         avio_seek(pb, 12, SEEK_CUR);
---
>         avio_seek(pb, 12 - back, SEEK_CUR);
2429a2427,2428
>     avio_seek(pb, -back, SEEK_CUR);
> 
2524c2523
<         ret = handle_packet(ts, data);
---
>         ret = handle_packet(ts, data, avio_tell(s->pb));
2921c2920
<             handle_packet(ts, buf);
---
>             handle_packet(ts, buf, len1 - len + TS_PACKET_SIZE);
diff -r android/contrib/ffmpeg-x86/libavformat/mpl2dec.c /tmp/ffmpeg-x86/libavformat/mpl2dec.c
58c58
< static int read_ts(char **line, int64_t *pts_start, int *duration)
---
> static int read_ts(char **line, int64_t *pts_start, int64_t *duration)
72c72,75
<         *duration = end - *pts_start;
---
>         if (end < *pts_start || end - (uint64_t)*pts_start > INT64_MAX) {
>             *duration = -1;
>         } else
>             *duration = end - *pts_start;
100c103
<         int duration;
---
>         int64_t duration;
111c114,115
<             if (!sub)
---
>             if (!sub) {
>                 ff_subtitles_queue_clean(&mpl2->q);
112a117
>             }
diff -r android/contrib/ffmpeg-x86/libavformat/mpsubdec.c /tmp/ffmpeg-x86/libavformat/mpsubdec.c
100,101c100,103
<     if (!st)
<         return AVERROR(ENOMEM);
---
>     if (!st) {
>         res = AVERROR(ENOMEM);
>         goto end;
>     }
108a111,113
>     if (res < 0)
>         ff_subtitles_queue_clean(&mpsub->q);
> 
diff -r android/contrib/ffmpeg-x86/libavformat/mvdec.c /tmp/ffmpeg-x86/libavformat/mvdec.c
263c263
<             timestamp += size / (st->codecpar->channels * 2);
---
>             timestamp += size / (st->codecpar->channels * 2LL);
350c350
<             timestamp += asize / (ast->codecpar->channels * 2);
---
>             timestamp += asize / (ast->codecpar->channels * 2LL);
356a357,362
> 
>         if (mv->nb_audio_tracks < 0  || mv->nb_video_tracks < 0 ||
>            (mv->nb_audio_tracks == 0 && mv->nb_video_tracks == 0)) {
>             av_log(avctx, AV_LOG_ERROR, "Stream count is invalid.\n");
>             return AVERROR_INVALIDDATA;
>         }
diff -r android/contrib/ffmpeg-x86/libavformat/mxfdec.c /tmp/ffmpeg-x86/libavformat/mxfdec.c
723a724
>     av_free(*str);
3241a3243
>     mxf->metadata_sets_count = 0;
diff -r android/contrib/ffmpeg-x86/libavformat/network.c /tmp/ffmpeg-x86/libavformat/network.c
283,328d282
< int ff_sendto(int fd, const char *msg, int msg_len, int flag,
<                       const struct sockaddr *addr,
<                       socklen_t addrlen, int timeout, URLContext *h,
<                       int will_try_next)
< {
<     struct pollfd p = {fd, POLLOUT, 0};
<     int ret;
<     socklen_t optlen;
< 
<     if (ff_socket_nonblock(fd, 1) < 0)
<         av_log(NULL, AV_LOG_INFO, "ff_socket_nonblock failed\n");
< 
<     while ((ret = sendto(fd, msg, msg_len, flag, addr, addrlen)) < 0) {
<         ret = ff_neterrno();
<         switch (ret) {
<         case AVERROR(EINTR):
<             if (ff_check_interrupt(&h->interrupt_callback))
<                 return AVERROR_EXIT;
<             continue;
<         case AVERROR(EINPROGRESS):
<         case AVERROR(EAGAIN):
<             ret = ff_poll_interrupt(&p, 1, timeout, &h->interrupt_callback);
<             if (ret < 0)
<                 return ret;
<             optlen = sizeof(ret);
<             if (getsockopt (fd, SOL_SOCKET, SO_ERROR, &ret, &optlen))
<                 ret = AVUNERROR(ff_neterrno());
<             if (ret != 0) {
<                 char errbuf[100];
<                 ret = AVERROR(ret);
<                 av_strerror(ret, errbuf, sizeof(errbuf));
<                 if (will_try_next)
<                     av_log(h, AV_LOG_WARNING,
<                            "Connection to %s failed (%s), trying next address\n",
<                            h->filename, errbuf);
<                 else
<                     av_log(h, AV_LOG_ERROR, "Connection to %s failed: %s\n",
<                            h->filename, errbuf);
<             }
<         default:
<             return ret;
<         }
<     }
<     return ret;
< }
< 
diff -r android/contrib/ffmpeg-x86/libavformat/network.h /tmp/ffmpeg-x86/libavformat/network.h
296,300d295
< int ff_sendto(int fd, const char *msg, int msg_len, int flag,
<                       const struct sockaddr *addr,
<                       socklen_t addrlen, int timeout, URLContext *h,
<                       int will_try_next);
< 
diff -r android/contrib/ffmpeg-x86/libavformat/nsvdec.c /tmp/ffmpeg-x86/libavformat/nsvdec.c
178a179
>     int nsvf;
212a214
> static int nsv_read_close(AVFormatContext *s);
268a271,276
>     if (nsv->nsvf) {
>         av_log(s, AV_LOG_TRACE, "Multiple NSVf\n");
>         return 0;
>     }
>     nsv->nsvf = 1;
> 
488,489c496,498
<         if (nsv_resync(s) < 0)
<             return -1;
---
>         err = nsv_resync(s);
>         if (err < 0)
>             goto fail;
493c502
<                 return err;
---
>                 goto fail;
499c508
<                 return err;
---
>                 goto fail;
503,504c512,516
<     if (s->nb_streams < 1) /* no luck so far */
<         return -1;
---
>     if (s->nb_streams < 1) { /* no luck so far */
>         err = AVERROR_INVALIDDATA;
>         goto fail;
>     }
> 
506a519,521
> fail:
>     if (err < 0)
>         nsv_read_close(s);
diff -r android/contrib/ffmpeg-x86/libavformat/nutenc.c /tmp/ffmpeg-x86/libavformat/nutenc.c
792,796c792,797
<     if (pkt->size < nut->header_len[fc->header_idx] ||
<         (pkt->size > 4096 && fc->header_idx)        ||
<         memcmp(pkt->data, nut->header[fc->header_idx],
<                nut->header_len[fc->header_idx]))
<         flags |= FLAG_HEADER_IDX;
---
>     if (fc->header_idx)
>         if (pkt->size < nut->header_len[fc->header_idx] ||
>             pkt->size > 4096                            ||
>             memcmp(pkt->data, nut->header    [fc->header_idx],
>                               nut->header_len[fc->header_idx]))
>             flags |= FLAG_HEADER_IDX;
1175c1176
<         av_assert1(nut->write_index);
---
>         av_assert1(nut->write_index); // sp_count should be 0 if no index is going to be written
diff -r android/contrib/ffmpeg-x86/libavformat/oggdec.c /tmp/ffmpeg-x86/libavformat/oggdec.c
131c131,134
<             av_freep(&ogg->streams[i].buf);
---
>             struct ogg_stream *stream = &ogg->streams[i];
>             av_freep(&stream->buf);
>             av_freep(&stream->new_metadata);
> 
216c219,220
<         avio_read(s->pb, magic, sizeof(magic));
---
>         if (avio_read(s->pb, magic, sizeof(magic)) != sizeof(magic))
>             return AVERROR_INVALIDDATA;
387a392,394
>     if (avio_feof(bc))
>         return AVERROR_EOF;
> 
722c729,730
<             if (s->error_recognition & AV_EF_EXPLODE)
---
>             if (s->error_recognition & AV_EF_EXPLODE) {
>                 ogg_read_close(s);
723a732
>             }
diff -r android/contrib/ffmpeg-x86/libavformat/oggparsedaala.c /tmp/ffmpeg-x86/libavformat/oggparsedaala.c
220a221
>     int64_t pts;
233c234,237
<         os->lastpts = os->lastdts = daala_gptopts(s, idx, os->granule, NULL) - duration;
---
>         pts = daala_gptopts(s, idx, os->granule, NULL);
>         if (pts != AV_NOPTS_VALUE)
>             pts -= duration;
>         os->lastpts = os->lastdts = pts;
diff -r android/contrib/ffmpeg-x86/libavformat/oggparseogm.c /tmp/ffmpeg-x86/libavformat/oggparseogm.c
179a180,182
>     if (os->psize < lb + 1)
>         return AVERROR_INVALIDDATA;
> 
184c187
<         os->pduration += p[lb+1] << (lb*8);
---
>         os->pduration += (uint64_t)p[lb+1] << (lb*8);
diff -r android/contrib/ffmpeg-x86/libavformat/oggparsetheora.c /tmp/ffmpeg-x86/libavformat/oggparsetheora.c
183a184
>         int64_t pts;
191c192,195
<         os->lastpts = os->lastdts   = theora_gptopts(s, idx, os->granule, NULL) - duration;
---
>         pts = theora_gptopts(s, idx, os->granule, NULL);
>         if (pts != AV_NOPTS_VALUE)
>             pts -= duration;
>         os->lastpts = os->lastdts = pts;
diff -r android/contrib/ffmpeg-x86/libavformat/oggparsevorbis.c /tmp/ffmpeg-x86/libavformat/oggparsevorbis.c
232a233,236
> 
>     if (*buf)
>         return AVERROR_INVALIDDATA;
> 
386c390,395
<         int ret = fixup_vorbis_headers(s, priv, &st->codecpar->extradata);
---
>         int ret;
> 
>         if (priv->vp)
>              return AVERROR_INVALIDDATA;
> 
>         ret = fixup_vorbis_headers(s, priv, &st->codecpar->extradata);
diff -r android/contrib/ffmpeg-x86/libavformat/oggparsevp8.c /tmp/ffmpeg-x86/libavformat/oggparsevp8.c
128c128
<             if (s->streams[idx]->duration)
---
>             if (s->streams[idx]->duration && s->streams[idx]->duration != AV_NOPTS_VALUE)
diff -r android/contrib/ffmpeg-x86/libavformat/omadec.c /tmp/ffmpeg-x86/libavformat/omadec.c
81a82,88
> static int oma_read_close(AVFormatContext *s)
> {
>     OMAContext *oc = s->priv_data;
>     av_freep(&oc->av_des);
>     return 0;
> }
> 
406c413,414
<     if (ret < EA3_HEADER_SIZE)
---
>     if (ret < EA3_HEADER_SIZE) {
>         ff_id3v2_free_extra_meta(&extra_meta);
407a416
>     }
410a420
>         ff_id3v2_free_extra_meta(&extra_meta);
429,430c439,442
<     if (!st)
<         return AVERROR(ENOMEM);
---
>     if (!st) {
>         ret = AVERROR(ENOMEM);
>         goto fail;
>     }
445c457,458
<             return AVERROR_INVALIDDATA;
---
>             ret = AVERROR_INVALIDDATA;
>             goto fail;
462,463c475,476
<         if (ff_alloc_extradata(st->codecpar, 14))
<             return AVERROR(ENOMEM);
---
>         if ((ret = ff_alloc_extradata(st->codecpar, 14)) < 0)
>             goto fail;
480c493,494
<             return AVERROR_INVALIDDATA;
---
>             ret = AVERROR_INVALIDDATA;
>             goto fail;
488c502,503
<             return AVERROR_INVALIDDATA;
---
>             ret = AVERROR_INVALIDDATA;
>             goto fail;
528c543,544
<         return AVERROR(ENOSYS);
---
>         ret = AVERROR(ENOSYS);
>         goto fail;
533a550,552
> fail:
>     oma_read_close(s);
>     return ret;
593,599d611
< }
< 
< static int oma_read_close(AVFormatContext *s)
< {
<     OMAContext *oc = s->priv_data;
<     av_free(oc->av_des);
<     return 0;
diff -r android/contrib/ffmpeg-x86/libavformat/pjsdec.c /tmp/ffmpeg-x86/libavformat/pjsdec.c
57a58,59
>         if (end < start || end - (uint64_t)start > INT_MAX)
>             return AV_NOPTS_VALUE;
95c97,98
<             if (!sub)
---
>             if (!sub) {
>                 ff_subtitles_queue_clean(&pjs->q);
96a100
>             }
diff -r android/contrib/ffmpeg-x86/libavformat/protocols.c /tmp/ffmpeg-x86/libavformat/protocols.c
42,47d41
< extern const URLProtocol ff_ijkhttphook_protocol;
< extern const URLProtocol ff_ijklongurl_protocol;
< extern const URLProtocol ff_ijkmediadatasource_protocol;
< extern const URLProtocol ff_ijksegment_protocol;
< extern const URLProtocol ff_ijktcphook_protocol;
< extern const URLProtocol ff_ijkio_protocol;
diff -r android/contrib/ffmpeg-x86/libavformat/pva.c /tmp/ffmpeg-x86/libavformat/pva.c
136a137,140
>             if (avio_feof(pb)) {
>                 return AVERROR_EOF;
>             }
> 
diff -r android/contrib/ffmpeg-x86/libavformat/rawenc.c /tmp/ffmpeg-x86/libavformat/rawenc.c
41a42,53
>     if (   s->oformat->audio_codec != AV_CODEC_ID_NONE
>         && s->streams[0]->codecpar->codec_type != AVMEDIA_TYPE_AUDIO) {
>         av_log(s, AV_LOG_ERROR, "%s files have exactly one audio stream\n",
>                s->oformat->name);
>         return AVERROR(EINVAL);
>     }
>     if (   s->oformat->video_codec != AV_CODEC_ID_NONE
>         && s->streams[0]->codecpar->codec_type != AVMEDIA_TYPE_VIDEO) {
>         av_log(s, AV_LOG_ERROR, "%s files have exactly one video stream\n",
>                s->oformat->name);
>         return AVERROR(EINVAL);
>     }
diff -r android/contrib/ffmpeg-x86/libavformat/realtextdec.c /tmp/ffmpeg-x86/libavformat/realtextdec.c
89a90,93
>             if (st->codecpar->extradata) {
>                 res = AVERROR_INVALIDDATA;
>                 goto end;
>             }
121a126,127
>     if (res < 0)
>         ff_subtitles_queue_clean(&rt->q);
diff -r android/contrib/ffmpeg-x86/libavformat/rmdec.c /tmp/ffmpeg-x86/libavformat/rmdec.c
529c529
<                                         size2, mime);
---
>                                         size2, NULL);
1178c1178
<     int64_t pos, offset, temp;
---
>     int64_t pos, offset=0, temp;
1194a1195,1196
>         if (offset <= 0)
>             return AVERROR_INVALIDDATA;
1272a1275,1276
>                     if (avio_feof(pb))
>                         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavformat/rtsp.c /tmp/ffmpeg-x86/libavformat/rtsp.c
449c449,452
<         if (codec_type == AVMEDIA_TYPE_UNKNOWN || !(rt->media_type_mask & (1 << codec_type))) {
---
>         if (codec_type == AVMEDIA_TYPE_UNKNOWN ||
>             !(rt->media_type_mask & (1 << codec_type)) ||
>             rt->nb_rtsp_streams >= s->max_streams
>         ) {
1658c1661
<     RTSPMessageHeader reply1 = {0}, *reply = &reply1;
---
>     RTSPMessageHeader reply1, *reply = &reply1;
1686a1690
>     memset(&reply1, 0, sizeof(reply1));
diff -r android/contrib/ffmpeg-x86/libavformat/samidec.c /tmp/ffmpeg-x86/libavformat/samidec.c
110a111,112
>     if (res < 0)
>         ff_subtitles_queue_clean(&sami->q);
diff -r android/contrib/ffmpeg-x86/libavformat/sbgdec.c /tmp/ffmpeg-x86/libavformat/sbgdec.c
200c200
<     *rtime = (hours * 3600 + minutes * 60 + seconds) * AV_TIME_BASE;
---
>     *rtime = (hours * 3600LL + minutes * 60LL + seconds) * AV_TIME_BASE;
diff -r android/contrib/ffmpeg-x86/libavformat/sccdec.c /tmp/ffmpeg-x86/libavformat/sccdec.c
135c135
<             return AVERROR(ENOMEM);
---
>             goto fail;
146a147,149
> fail:
>     ff_subtitles_queue_clean(&scc->q);
>     return AVERROR(ENOMEM);
diff -r android/contrib/ffmpeg-x86/libavformat/shortendec.c /tmp/ffmpeg-x86/libavformat/shortendec.c
43c43
<         int k;
---
>         unsigned k;
44a45,46
>         if (k > 31)
>             return 0;
46a49,50
>         if (k > 31)
>             return 0;
48a53,54
>         if (k > 31)
>             return 0;
diff -r android/contrib/ffmpeg-x86/libavformat/smoothstreamingenc.c /tmp/ffmpeg-x86/libavformat/smoothstreamingenc.c
334c334
<         ctx = avformat_alloc_context();
---
>         os->ctx = ctx = avformat_alloc_context();
339d338
<         os->ctx = ctx;
359c358,360
<         if ((ret = avformat_write_header(ctx, &opts)) < 0) {
---
>         ret = avformat_write_header(ctx, &opts);
>         av_dict_free(&opts);
>         if (ret < 0) {
364d364
<         av_dict_free(&opts);
diff -r android/contrib/ffmpeg-x86/libavformat/srtdec.c /tmp/ffmpeg-x86/libavformat/srtdec.c
209a210,211
>     if (res < 0)
>         ff_subtitles_queue_clean(&srt->q);
diff -r android/contrib/ffmpeg-x86/libavformat/stldec.c /tmp/ffmpeg-x86/libavformat/stldec.c
100c100,101
<             if (!sub)
---
>             if (!sub) {
>                 ff_subtitles_queue_clean(&stl->q);
101a103
>             }
diff -r android/contrib/ffmpeg-x86/libavformat/subtitles.c /tmp/ffmpeg-x86/libavformat/subtitles.c
135c135
<         sub = &subs[q->nb_subs++];
---
>         sub = &subs[q->nb_subs];
137a138
>         q->nb_subs++;
195a197,199
> 
>     if (!q->nb_subs)
>         return;
diff -r android/contrib/ffmpeg-x86/libavformat/subviewer1dec.c /tmp/ffmpeg-x86/libavformat/subviewer1dec.c
80c80,81
<                 if (!sub)
---
>                 if (!sub) {
>                     ff_subtitles_queue_clean(&subviewer1->q);
81a83
>                 }
diff -r android/contrib/ffmpeg-x86/libavformat/subviewerdec.c /tmp/ffmpeg-x86/libavformat/subviewerdec.c
158a159,160
>     if (res < 0)
>         ff_subtitles_queue_clean(&subviewer->q);
diff -r android/contrib/ffmpeg-x86/libavformat/swfenc.c /tmp/ffmpeg-x86/libavformat/swfenc.c
259c259
<     avio_wl16(pb, (rate * 256) / rate_base); /* frame rate */
---
>     avio_wl16(pb, (rate * 256LL) / rate_base); /* frame rate */
diff -r android/contrib/ffmpeg-x86/libavformat/tcp.c /tmp/ffmpeg-x86/libavformat/tcp.c
26,27d25
< #include "libavutil/application.h"
< #include "libavutil/dns_cache.h"
36,38d33
< #if HAVE_PTHREADS
< #include <pthread.h>
< #endif
49,60d43
<     int64_t app_ctx_intptr;
< 
<     int addrinfo_one_by_one;
<     int addrinfo_timeout;
<     int64_t dns_cache_timeout;
<     int dns_cache_clear;
< 
<     AVApplicationContext *app_ctx;
<     char uri[1024];
<     int fastopen;
<     int tcp_connected;
<     int fastopen_success;
63,64d45
< #define FAST_OPEN_FLAG 0x20000000
< 
71d51
<     { "connect_timeout",  "set connect timeout (in microseconds) of socket", OFFSET(open_timeout),     AV_OPT_TYPE_INT, { .i64 = -1 },         -1, INT_MAX, .flags = D|E },
75,81d54
<     { "ijkapplication",   "AVApplicationContext",                              OFFSET(app_ctx_intptr),   AV_OPT_TYPE_INT64, { .i64 = 0 }, INT64_MIN, INT64_MAX, .flags = D },
< 
<     { "addrinfo_one_by_one",  "parse addrinfo one by one in getaddrinfo()",    OFFSET(addrinfo_one_by_one), AV_OPT_TYPE_INT, { .i64 = 0 },         0, 1, .flags = D|E },
<     { "addrinfo_timeout", "set timeout (in microseconds) for getaddrinfo()",   OFFSET(addrinfo_timeout), AV_OPT_TYPE_INT, { .i64 = -1 },       -1, INT_MAX, .flags = D|E },
<     { "dns_cache_timeout", "dns cache TTL (in microseconds)",   OFFSET(dns_cache_timeout), AV_OPT_TYPE_INT, { .i64 = -1 },       -1, INT64_MAX, .flags = D|E },
<     { "dns_cache_clear", "clear dns cache",   OFFSET(dns_cache_clear), AV_OPT_TYPE_INT, { .i64 = 0},       -1, INT_MAX, .flags = D|E },
<     { "fastopen", "enable fastopen",          OFFSET(fastopen), AV_OPT_TYPE_INT, { .i64 = 0},       0, INT_MAX, .flags = D|E },
92,339d64
< int ijk_tcp_getaddrinfo_nonblock(const char *hostname, const char *servname,
<                                  const struct addrinfo *hints, struct addrinfo **res,
<                                  int64_t timeout,
<                                  const AVIOInterruptCB *int_cb, int one_by_one);
< #ifdef HAVE_PTHREADS
< 
< typedef struct TCPAddrinfoRequest
< {
<     AVBufferRef *buffer;
< 
<     pthread_mutex_t mutex;
<     pthread_cond_t cond;
< 
<     AVIOInterruptCB interrupt_callback;
< 
<     char            *hostname;
<     char            *servname;
<     struct addrinfo  hints;
<     struct addrinfo *res;
< 
<     volatile int     finished;
<     int              last_error;
< } TCPAddrinfoRequest;
< 
< static void tcp_getaddrinfo_request_free(TCPAddrinfoRequest *req)
< {
<     av_assert0(req);
<     if (req->res) {
<         freeaddrinfo(req->res);
<         req->res = NULL;
<     }
< 
<     av_freep(&req->servname);
<     av_freep(&req->hostname);
<     pthread_cond_destroy(&req->cond);
<     pthread_mutex_destroy(&req->mutex);
<     av_freep(&req);
< }
< 
< static void tcp_getaddrinfo_request_free_buffer(void *opaque, uint8_t *data)
< {
<     av_assert0(opaque);
<     TCPAddrinfoRequest *req = (TCPAddrinfoRequest *)opaque;
<     tcp_getaddrinfo_request_free(req);
< }
< 
< static int tcp_getaddrinfo_request_create(TCPAddrinfoRequest **request,
<                                           const char *hostname,
<                                           const char *servname,
<                                           const struct addrinfo *hints,
<                                           const AVIOInterruptCB *int_cb)
< {
<     TCPAddrinfoRequest *req = (TCPAddrinfoRequest *) av_mallocz(sizeof(TCPAddrinfoRequest));
<     if (!req)
<         return AVERROR(ENOMEM);
< 
<     if (pthread_mutex_init(&req->mutex, NULL)) {
<         av_freep(&req);
<         return AVERROR(ENOMEM);
<     }
< 
<     if (pthread_cond_init(&req->cond, NULL)) {
<         pthread_mutex_destroy(&req->mutex);
<         av_freep(&req);
<         return AVERROR(ENOMEM);
<     }
< 
<     if (int_cb)
<         req->interrupt_callback = *int_cb;
< 
<     if (hostname) {
<         req->hostname = av_strdup(hostname);
<         if (!req->hostname)
<             goto fail;
<     }
< 
<     if (servname) {
<         req->servname = av_strdup(servname);
<         if (!req->hostname)
<             goto fail;
<     }
< 
<     if (hints) {
<         req->hints.ai_family   = hints->ai_family;
<         req->hints.ai_socktype = hints->ai_socktype;
<         req->hints.ai_protocol = hints->ai_protocol;
<         req->hints.ai_flags    = hints->ai_flags;
<     }
< 
<     req->buffer = av_buffer_create(NULL, 0, tcp_getaddrinfo_request_free_buffer, req, 0);
<     if (!req->buffer)
<         goto fail;
< 
<     *request = req;
<     return 0;
< fail:
<     tcp_getaddrinfo_request_free(req);
<     return AVERROR(ENOMEM);
< }
< 
< static void *tcp_getaddrinfo_worker(void *arg)
< {
<     TCPAddrinfoRequest *req = arg;
< 
<     getaddrinfo(req->hostname, req->servname, &req->hints, &req->res);
<     pthread_mutex_lock(&req->mutex);
<     req->finished = 1;
<     pthread_cond_signal(&req->cond);
<     pthread_mutex_unlock(&req->mutex);
<     av_buffer_unref(&req->buffer);
<     return NULL;
< }
< 
< static void *tcp_getaddrinfo_one_by_one_worker(void *arg)
< {
<     struct addrinfo *temp_addrinfo = NULL;
<     struct addrinfo *cur = NULL;
<     int ret = EAI_FAIL;
<     int i = 0;
<     int option_length = 0;
< 
<     TCPAddrinfoRequest *req = (TCPAddrinfoRequest *)arg;
< 
<     int family_option[2] = {AF_INET, AF_INET6};
< 
<     option_length = sizeof(family_option) / sizeof(family_option[0]);
< 
<     for (; i < option_length; ++i) {
<         struct addrinfo *hint = &req->hints;
<         hint->ai_family = family_option[i];
<         ret = getaddrinfo(req->hostname, req->servname, hint, &temp_addrinfo);
<         if (ret) {
<             req->last_error = ret;
<             continue;
<         }
<         pthread_mutex_lock(&req->mutex);
<         if (!req->res) {
<             req->res = temp_addrinfo;
<         } else {
<             cur = req->res;
<             while (cur->ai_next)
<                 cur = cur->ai_next;
<             cur->ai_next = temp_addrinfo;
<         }
<         pthread_mutex_unlock(&req->mutex);
<     }
<     pthread_mutex_lock(&req->mutex);
<     req->finished = 1;
<     pthread_cond_signal(&req->cond);
<     pthread_mutex_unlock(&req->mutex);
<     av_buffer_unref(&req->buffer);
<     return NULL;
< }
< 
< int ijk_tcp_getaddrinfo_nonblock(const char *hostname, const char *servname,
<                                  const struct addrinfo *hints, struct addrinfo **res,
<                                  int64_t timeout,
<                                  const AVIOInterruptCB *int_cb, int one_by_one)
< {
<     int     ret;
<     int64_t start;
<     int64_t now;
<     AVBufferRef        *req_ref = NULL;
<     TCPAddrinfoRequest *req     = NULL;
<     pthread_t work_thread;
< 
<     if (hostname && !hostname[0])
<         hostname = NULL;
< 
<     if (timeout <= 0)
<         return getaddrinfo(hostname, servname, hints, res);
< 
<     ret = tcp_getaddrinfo_request_create(&req, hostname, servname, hints, int_cb);
<     if (ret)
<         goto fail;
< 
<     req_ref = av_buffer_ref(req->buffer);
<     if (req_ref == NULL) {
<         ret = AVERROR(ENOMEM);
<         goto fail;
<     }
< 
<     /* FIXME: using a thread pool would be better. */
<     if (one_by_one)
<         ret = pthread_create(&work_thread, NULL, tcp_getaddrinfo_one_by_one_worker, req);
<     else
<         ret = pthread_create(&work_thread, NULL, tcp_getaddrinfo_worker, req);
< 
<     if (ret) {
<         ret = AVERROR(ret);
<         goto fail;
<     }
< 
<     pthread_detach(work_thread);
< 
<     start = av_gettime();
<     now   = start;
< 
<     pthread_mutex_lock(&req->mutex);
<     while (1) {
<         int64_t wait_time = now + 100000;
<         struct timespec tv = { .tv_sec  =  wait_time / 1000000,
<                                .tv_nsec = (wait_time % 1000000) * 1000 };
< 
<         if (req->finished || (start + timeout < now)) {
<             if (req->res) {
<                 ret = 0;
<                 *res = req->res;
<                 req->res = NULL;
<             } else {
<                 ret = req->last_error ? req->last_error : AVERROR_EXIT;
<             }
<             break;
<         }
< #if defined(__ANDROID__) && defined(HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC)
<         ret = pthread_cond_timedwait_monotonic_np(&req->cond, &req->mutex, &tv);
< #else
<         ret = pthread_cond_timedwait(&req->cond, &req->mutex, &tv);
< #endif
<         if (ret != 0 && ret != ETIMEDOUT) {
<             av_log(NULL, AV_LOG_ERROR, "pthread_cond_timedwait failed: %d\n", ret);
<             ret = AVERROR_EXIT;
<             break;
<         }
< 
<         if (ff_check_interrupt(&req->interrupt_callback)) {
<             ret = AVERROR_EXIT;
<             break;
<         }
< 
<         now = av_gettime();
<     }
<     pthread_mutex_unlock(&req->mutex);
< fail:
<     av_buffer_unref(&req_ref);
<     return ret;
< }
< 
< #else
< int ijk_tcp_getaddrinfo_nonblock(const char *hostname, const char *servname,
<                                  const struct addrinfo *hints, struct addrinfo **res,
<                                  int64_t timeout,
<                                  const AVIOInterruptCB *int_cb)
< {
<     return getaddrinfo(hostname, servname, hints, res);
< }
< #endif
< 
351,365c76
<     char hostname_bak[1024] = {0};
<     AVAppTcpIOControl control = {0};
<     DnsCacheEntry *dns_entry = NULL;
< 
<     if (s->open_timeout < 0) {
<         s->open_timeout = 15000000;
<     }
< 
<     s->app_ctx = (AVApplicationContext *)(intptr_t)s->app_ctx_intptr;
< 
<     if (s->fastopen) {
<         s->tcp_connected = 0;
<         strcpy(s->uri, uri);
<         return 0;
<     }
---
>     s->open_timeout = 5000000;
386,388d96
<             if (s->rw_timeout >= 0) {
<                 s->open_timeout = s->rw_timeout;
<             }
394,395c102,104
<     if (s->rw_timeout >= 0 ) {
<         h->rw_timeout = s->rw_timeout;
---
>     if (s->rw_timeout >= 0) {
>         s->open_timeout =
>         h->rw_timeout   = s->rw_timeout;
397d105
< 
403,411c111,119
< 
<     if (s->dns_cache_timeout > 0) {
<         memcpy(hostname_bak, hostname, 1024);
<         if (s->dns_cache_clear) {
<             av_log(NULL, AV_LOG_INFO, "will delete cache entry, hostname = %s\n", hostname);
<             remove_dns_cache_entry(hostname);
<         } else {
<             dns_entry = get_dns_cache_reference(hostname);
<         }
---
>     if (!hostname[0])
>         ret = getaddrinfo(NULL, portstr, &hints, &ai);
>     else
>         ret = getaddrinfo(hostname, portstr, &hints, &ai);
>     if (ret) {
>         av_log(h, AV_LOG_ERROR,
>                "Failed to resolve hostname %s: %s\n",
>                hostname, gai_strerror(ret));
>         return AVERROR(EIO);
414,437c122
<     if (!dns_entry) {
< #ifdef HAVE_PTHREADS
<         ret = ijk_tcp_getaddrinfo_nonblock(hostname, portstr, &hints, &ai, s->addrinfo_timeout, &h->interrupt_callback, s->addrinfo_one_by_one);
< #else
<         if (s->addrinfo_timeout > 0)
<             av_log(h, AV_LOG_WARNING, "Ignore addrinfo_timeout without pthreads support.\n");
<         if (!hostname[0])
<             ret = getaddrinfo(NULL, portstr, &hints, &ai);
<         else
<             ret = getaddrinfo(hostname, portstr, &hints, &ai);
< #endif
< 
<         if (ret) {
<             av_log(h, AV_LOG_ERROR,
<                 "Failed to resolve hostname %s: %s\n",
<                 hostname, gai_strerror(ret));
<             return AVERROR(EIO);
<         }
< 
<         cur_ai = ai;
<     } else {
<         av_log(NULL, AV_LOG_INFO, "Hit DNS cache hostname = %s\n", hostname);
<         cur_ai = dns_entry->res;
<     }
---
>     cur_ai = ai;
479,484d163
<         ret = av_application_on_tcp_will_open(s->app_ctx);
<         if (ret) {
<             av_log(NULL, AV_LOG_WARNING, "terminated by application in AVAPP_CTRL_WILL_TCP_OPEN");
<             goto fail1;
<         }
< 
487,611d165
<             if (av_application_on_tcp_did_open(s->app_ctx, ret, fd, &control))
<                 goto fail1;
<             if (ret == AVERROR_EXIT)
<                 goto fail1;
<             else
<                 goto fail;
<         } else {
<             ret = av_application_on_tcp_did_open(s->app_ctx, 0, fd, &control);
<             if (ret) {
<                 av_log(NULL, AV_LOG_WARNING, "terminated by application in AVAPP_CTRL_DID_TCP_OPEN");
<                 goto fail1;
<             } else if (!dns_entry && strcmp(control.ip, hostname_bak)) {
<                 add_dns_cache_entry(hostname_bak, cur_ai, s->dns_cache_timeout);
<                 av_log(NULL, AV_LOG_INFO, "Add dns cache hostname = %s, ip = %s\n", hostname_bak , control.ip);
<             }
<         }
<     }
< 
<     h->is_streamed = 1;
<     s->fd = fd;
< 
<     if (dns_entry) {
<         release_dns_cache_reference(hostname_bak, &dns_entry);
<     } else {
<         freeaddrinfo(ai);
<     }
<     return 0;
< 
<  fail:
<     if (cur_ai->ai_next) {
<         /* Retry with the next sockaddr */
<         cur_ai = cur_ai->ai_next;
<         if (fd >= 0)
<             closesocket(fd);
<         ret = 0;
<         goto restart;
<     }
<  fail1:
<     if (fd >= 0)
<         closesocket(fd);
< 
<     if (dns_entry) {
<         av_log(NULL, AV_LOG_ERROR, "Hit dns cache but connect fail hostname = %s, ip = %s\n", hostname , control.ip);
<         release_dns_cache_reference(hostname_bak, &dns_entry);
<         remove_dns_cache_entry(hostname_bak);
<     } else {
<         freeaddrinfo(ai);
<     }
< 
<     return ret;
< }
< 
< /* return non zero if error */
< static int tcp_fast_open(URLContext *h, const char *http_request, const char *uri, int flags)
< {
<     struct addrinfo hints = { 0 }, *ai, *cur_ai;
<     int port, fd = -1;
<     TCPContext *s = h->priv_data;
<     const char *p;
<     char buf[256];
<     int ret;
<     char hostname[1024],proto[1024],path[1024];
<     char portstr[10];
<     char hostname_bak[1024] = {0};
<     AVAppTcpIOControl control = {0};
<     DnsCacheEntry *dns_entry = NULL;
<     av_url_split(proto, sizeof(proto), NULL, 0, hostname, sizeof(hostname),
<         &port, path, sizeof(path), uri);
<     if (strcmp(proto, "tcp"))
<         return AVERROR(EINVAL);
<     if (port <= 0 || port >= 65536) {
<         av_log(h, AV_LOG_ERROR, "Port missing in uri\n");
<         return AVERROR(EINVAL);
<     }
<     p = strchr(uri, '?');
< 
<     if (p) {
<         if (av_find_info_tag(buf, sizeof(buf), "listen", p)) {
<             char *endptr = NULL;
<             s->listen = strtol(buf, &endptr, 10);
<             /* assume if no digits were found it is a request to enable it */
<             if (buf == endptr)
<                 s->listen = 1;
<         }
<         if (av_find_info_tag(buf, sizeof(buf), "timeout", p)) {
<             s->rw_timeout = strtol(buf, NULL, 10);
<             if (s->rw_timeout >= 0) {
<                 s->open_timeout = s->rw_timeout;
<             }
<         }
<         if (av_find_info_tag(buf, sizeof(buf), "listen_timeout", p)) {
<             s->listen_timeout = strtol(buf, NULL, 10);
<         }
<     }
<     if (s->rw_timeout >= 0 ) {
<         h->rw_timeout = s->rw_timeout;
<     }
< 
<     hints.ai_family = AF_UNSPEC;
<     hints.ai_socktype = SOCK_STREAM;
<     snprintf(portstr, sizeof(portstr), "%d", port);
<     if (s->listen)
<         hints.ai_flags |= AI_PASSIVE;
< 
<     if (s->dns_cache_timeout > 0) {
<         memcpy(hostname_bak, hostname, 1024);
<         if (s->dns_cache_clear) {
<             av_log(NULL, AV_LOG_INFO, "will delete cache entry, hostname = %s\n", hostname);
<             remove_dns_cache_entry(hostname);
<         } else {
<             dns_entry = get_dns_cache_reference(hostname);
<         }
<     }
< 
<     if (!dns_entry) {
< #ifdef HAVE_PTHREADS
<         ret = ijk_tcp_getaddrinfo_nonblock(hostname, portstr, &hints, &ai, s->addrinfo_timeout, &h->interrupt_callback, s->addrinfo_one_by_one);
< #else
<         if (s->addrinfo_timeout > 0)
<             av_log(h, AV_LOG_WARNING, "Ignore addrinfo_timeout without pthreads support.\n");
<         if (!hostname[0])
<             ret = getaddrinfo(NULL, portstr, &hints, &ai);
<         else
<             ret = getaddrinfo(hostname, portstr, &hints, &ai);
< #endif
613,673d166
<         if (ret) {
<             av_log(h, AV_LOG_ERROR,
<                 "Failed to resolve hostname %s: %s\n",
<                 hostname, gai_strerror(ret));
<             return AVERROR(EIO);
<         }
< 
<         cur_ai = ai;
<     } else {
<         av_log(NULL, AV_LOG_INFO, "Hit DNS cache hostname = %s\n", hostname);
<         cur_ai = dns_entry->res;
<     }
< 
<  restart:
< #if HAVE_STRUCT_SOCKADDR_IN6
<     // workaround for IOS9 getaddrinfo in IPv6 only network use hardcode IPv4 address can not resolve port number.
<     if (cur_ai->ai_family == AF_INET6){
<         struct sockaddr_in6 * sockaddr_v6 = (struct sockaddr_in6 *)cur_ai->ai_addr;
<         if (!sockaddr_v6->sin6_port){
<             sockaddr_v6->sin6_port = htons(port);
<         }
<     }
< #endif
<     fd = ff_socket(cur_ai->ai_family,
<                    cur_ai->ai_socktype,
<                    cur_ai->ai_protocol);
<     if (fd < 0) {
<         ret = ff_neterrno();
<         goto fail;
<     }
<     /* Set the socket's send or receive buffer sizes, if specified.
<        If unspecified or setting fails, system default is used. */
<     if (s->recv_buffer_size > 0) {
<         setsockopt (fd, SOL_SOCKET, SO_RCVBUF, &s->recv_buffer_size, sizeof (s->recv_buffer_size));
<     }
<     if (s->send_buffer_size > 0) {
<         setsockopt (fd, SOL_SOCKET, SO_SNDBUF, &s->send_buffer_size, sizeof (s->send_buffer_size));
<     }
<     if (s->listen == 2) {
<         // multi-client
<         if ((ret = ff_listen(fd, cur_ai->ai_addr, cur_ai->ai_addrlen)) < 0)
<             goto fail1;
<     } else if (s->listen == 1) {
<         // single client
<         if ((ret = ff_listen_bind(fd, cur_ai->ai_addr, cur_ai->ai_addrlen,
<                                   s->listen_timeout, h)) < 0)
<             goto fail1;
<         // Socket descriptor already closed here. Safe to overwrite to client one.
<         fd = ret;
<     } else {
<         ret = av_application_on_tcp_will_open(s->app_ctx);
<         if (ret) {
<             av_log(NULL, AV_LOG_WARNING, "terminated by application in AVAPP_CTRL_WILL_TCP_OPEN");
<             goto fail1;
<         }
< 
<         if ((ret = ff_sendto(fd, http_request, strlen(http_request), FAST_OPEN_FLAG,
<                  cur_ai->ai_addr, cur_ai->ai_addrlen, s->open_timeout / 1000, h, !!cur_ai->ai_next)) < 0) {
<             s->fastopen_success = 0;
<             if (av_application_on_tcp_did_open(s->app_ctx, ret, fd, &control))
<                 goto fail1;
678,691d170
<         } else {
<             if (ret == 0) {
<                 s->fastopen_success = 0;
<             } else {
<                 s->fastopen_success = 1;
<             }
<             ret = av_application_on_tcp_did_open(s->app_ctx, 0, fd, &control);
<             if (ret) {
<                 av_log(NULL, AV_LOG_WARNING, "terminated by application in AVAPP_CTRL_DID_TCP_OPEN");
<                 goto fail1;
<             } else if (!dns_entry && strcmp(control.ip, hostname_bak)) {
<                 add_dns_cache_entry(hostname_bak, cur_ai, s->dns_cache_timeout);
<                 av_log(NULL, AV_LOG_INFO, "Add dns cache hostname = %s, ip = %s\n", hostname_bak , control.ip);
<             }
698,702c177
<     if (dns_entry) {
<         release_dns_cache_reference(hostname_bak, &dns_entry);
<     } else {
<         freeaddrinfo(ai);
<     }
---
>     freeaddrinfo(ai);
717,725c192
< 
<     if (dns_entry) {
<         av_log(NULL, AV_LOG_ERROR, "Hit dns cache but connect fail hostname = %s, ip = %s\n", hostname , control.ip);
<         release_dns_cache_reference(hostname_bak, &dns_entry);
<         remove_dns_cache_entry(hostname_bak);
<     } else {
<         freeaddrinfo(ai);
<     }
< 
---
>     freeaddrinfo(ai);
756,757d222
<     if (ret > 0)
<         av_application_did_io_tcp_read(s->app_ctx, (void*)h, ret);
771,789d235
< 
<     if (s->fastopen && !s->tcp_connected && av_stristart(buf, "GET", NULL)) {
<         ret = tcp_fast_open(h, buf, s->uri, 0);
<         if (!ret) {
<             s->tcp_connected = 1;
<             if (!s->fastopen_success) {
<                 ret = send(s->fd, buf, size, MSG_NOSIGNAL);
<                 if (ret > 0) {
<                     s->fastopen_success = 1;
<                 }
<                 return ret < 0 ? ff_neterrno() : ret;
<             }
<             return ret;
<         } else {
<             av_log(NULL, AV_LOG_WARNING, "tcp_fast_open is error ret = %d\n", ret);
<             return ret;
<         }
<     }
< 
diff -r android/contrib/ffmpeg-x86/libavformat/tedcaptionsdec.c /tmp/ffmpeg-x86/libavformat/tedcaptionsdec.c
278c278
<     AVStream *st;
---
>     AVStream *st = avformat_new_stream(avf, NULL);
281a282,284
>     if (!st)
>         return AVERROR(ENOMEM);
> 
295,297d297
<     st = avformat_new_stream(avf, NULL);
<     if (!st)
<         return AVERROR(ENOMEM);
diff -r android/contrib/ffmpeg-x86/libavformat/thp.c /tmp/ffmpeg-x86/libavformat/thp.c
77a78,79
>     if (thp->fps.den <= 0 || thp->fps.num < 0)
>         return AVERROR_INVALIDDATA;
95a98,100
>     if (thp->compcount > FF_ARRAY_ELEMS(thp->components))
>         return AVERROR_INVALIDDATA;
> 
146a152,154
> 
>     if (!thp->vst)
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavformat/tls_schannel.c /tmp/ffmpeg-x86/libavformat/tls_schannel.c
151c151
<     SecBuffer outbuf[3];
---
>     SecBuffer outbuf[3] = { 0 };
395c395,400
<     if (len <= c->dec_buf_offset)
---
>     /* If we have some left-over data from previous network activity,
>      * return it first in case it is enough. It may contain
>      * data that is required to know whether this connection
>      * is still required or not, esp. in case of HTTP keep-alive
>      * connections. */
>     if (c->dec_buf_offset > 0)
425c430
<     while (c->enc_buf_offset > 0 && sspi_ret == SEC_E_OK && c->dec_buf_offset < len) {
---
>     while (c->enc_buf_offset > 0 && sspi_ret == SEC_E_OK) {
diff -r android/contrib/ffmpeg-x86/libavformat/utils.c /tmp/ffmpeg-x86/libavformat/utils.c
516d515
<     AVDictionary *tmp2 = NULL;
595,602c594,595
<     if (!(s->flags&AVFMT_FLAG_PRIV_OPT)) {
<         if (s->iformat->read_header2) {
<             if (options)
<                 av_dict_copy(&tmp2, *options, 0);
< 
<             if ((ret = s->iformat->read_header2(s, &tmp2)) < 0)
<                 goto fail;
<         } else if (s->iformat->read_header && (ret = s->iformat->read_header(s)) < 0)
---
>     if (!(s->flags&AVFMT_FLAG_PRIV_OPT) && s->iformat->read_header)
>         if ((ret = s->iformat->read_header(s)) < 0)
604d596
<     }
615,616c607,610
<         if (s->error_recognition & AV_EF_EXPLODE)
<             return AVERROR_INVALIDDATA;
---
>         if (s->error_recognition & AV_EF_EXPLODE) {
>             ret = AVERROR_INVALIDDATA;
>             goto close;
>         }
623c617
<                 goto fail;
---
>                 goto close;
625c619
<                 goto fail;
---
>                 goto close;
632c626
<         goto fail;
---
>         goto close;
647d640
<         av_dict_free(&tmp2);
651a645,647
> close:
>     if (s->iformat->read_close)
>         s->iformat->read_close(s);
655d650
<     av_dict_free(&tmp2);
1105a1101
>         st->cur_dts < INT_MIN + RELATIVE_TS_BASE ||
1326c1322
<             if (st->last_IP_duration == 0)
---
>             if (st->last_IP_duration == 0 && (uint64_t)pkt->duration <= INT32_MAX)
1338c1334,1335
<             st->last_IP_duration = pkt->duration;
---
>             if ((uint64_t)pkt->duration <= INT32_MAX)
>                 st->last_IP_duration = pkt->duration;
1750a1748
>                 av_assert2(wrap_bits <= 64);
1753,1754c1751,1752
<                         (av_compare_mod(next_pkt->dts, pktl->pkt.dts, 2LL << (wrap_bits - 1)) < 0)) {
<                         if (av_compare_mod(pktl->pkt.pts, pktl->pkt.dts, 2LL << (wrap_bits - 1))) {
---
>                         av_compare_mod(next_pkt->dts, pktl->pkt.dts, 2ULL << (wrap_bits - 1)) < 0) {
>                         if (av_compare_mod(pktl->pkt.pts, pktl->pkt.dts, 2ULL << (wrap_bits - 1))) {
2051a2050,2051
>     av_assert0(time_tolerance >= 0);
> 
2079c2079
<                     if (e2_pts - e1_pts < time_tolerance)
---
>                     if (e2_pts < e1_pts || e2_pts - (uint64_t)e1_pts < time_tolerance)
2623c2623
<     if (end_time == INT64_MIN || (end_time < end_time_text && end_time_text - end_time < AV_TIME_BASE)) {
---
>     if (end_time == INT64_MIN || (end_time < end_time_text && end_time_text - (uint64_t)end_time < AV_TIME_BASE)) {
2715c2715
<                     duration = av_rescale(8 * filesize, st->time_base.den,
---
>                     duration = av_rescale(filesize, 8LL * st->time_base.den,
2893a2894
>             if (st->time_base.den)
3291,3292c3292,3295
<         st->info->duration_count++;
<         st->info->rfps_duration_sum += duration;
---
>         if (st->info->rfps_duration_sum <= INT64_MAX - duration) {
>             st->info->duration_count++;
>             st->info->rfps_duration_sum += duration;
>         }
3646,3659d3648
< 
<             if (ic->metadata) {
<                 AVDictionaryEntry *t = av_dict_get(ic->metadata, "skip-calc-frame-rate", NULL, AV_DICT_MATCH_CASE);
<                 if (t) {
<                     int fps_flag = (int) strtol(t->value, NULL, 10);
<                     if (!st->r_frame_rate.num && st->avg_frame_rate.num > 0 && st->avg_frame_rate.den > 0 && fps_flag > 0) {
<                         int avg_fps = st->avg_frame_rate.num / st->avg_frame_rate.den;
<                         if (avg_fps > 0 && avg_fps <= 120) {
<                             st->r_frame_rate.num = st->avg_frame_rate.num;
<                             st->r_frame_rate.den = st->avg_frame_rate.den;
<                         }
<                     }
<                 }
<             }
3773,3774c3762,3763
<                 (pkt->dts - st->info->fps_last_dts) / 1000 >
<                 (st->info->fps_last_dts     - st->info->fps_first_dts) /
---
>                 (pkt->dts - (uint64_t)st->info->fps_last_dts) / 1000 >
>                 (st->info->fps_last_dts     - (uint64_t)st->info->fps_first_dts) /
3909,3914d3897
<     // close codecs which were opened in try_decode_frame()
<     for (i = 0; i < ic->nb_streams; i++) {
<         st = ic->streams[i];
<         avcodec_close(st->internal->avctx);
<     }
< 
3971c3954
<                     <= avctx->time_base.num * avctx->ticks_per_frame * (int64_t) st->time_base.den) {
---
>                     <= avctx->time_base.num * avctx->ticks_per_frame * (uint64_t) st->time_base.den) {
4104a4088
>         avcodec_close(ic->streams[i]->internal->avctx);
diff -r android/contrib/ffmpeg-x86/libavformat/vpk.c /tmp/ffmpeg-x86/libavformat/vpk.c
59c59
<     if (st->codecpar->sample_rate <= 0)
---
>     if (st->codecpar->sample_rate <= 0 || st->codecpar->block_align <= 0)
64c64
<     samples_per_block      = ((st->codecpar->block_align / st->codecpar->channels) * 28) / 16;
---
>     samples_per_block      = ((st->codecpar->block_align / st->codecpar->channels) * 28LL) / 16;
68a69,71
> 
>     if (offset < avio_tell(s->pb))
>         return AVERROR_INVALIDDATA;
diff -r android/contrib/ffmpeg-x86/libavformat/vplayerdec.c /tmp/ffmpeg-x86/libavformat/vplayerdec.c
86c86,87
<             if (!sub)
---
>             if (!sub) {
>                 ff_subtitles_queue_clean(&vplayer->q);
87a89
>             }
diff -r android/contrib/ffmpeg-x86/libavformat/vqf.c /tmp/ffmpeg-x86/libavformat/vqf.c
109a110,112
>     if (header_size < 0)
>         return AVERROR_INVALIDDATA;
> 
123c126
<         if ((unsigned) len > INT_MAX/2) {
---
>         if ((unsigned) len > INT_MAX/2 || header_size < 8) {
diff -r android/contrib/ffmpeg-x86/libavformat/wavdec.c /tmp/ffmpeg-x86/libavformat/wavdec.c
235,237c235,237
<     av_assert0(length <= sizeof(temp));
<     if ((ret = avio_read(s->pb, temp, length)) < 0)
<         return ret;
---
>     av_assert0(length < sizeof(temp));
>     if ((ret = avio_read(s->pb, temp, length)) != length)
>         return ret < 0 ? ret : AVERROR_INVALIDDATA;
306,307c306,309
<         if ((ret = avio_read(s->pb, coding_history, size)) < 0)
<             return ret;
---
>         if ((ret = avio_read(s->pb, coding_history, size)) != size) {
>             av_free(coding_history);
>             return ret < 0 ? ret : AVERROR_INVALIDDATA;
>         }
diff -r android/contrib/ffmpeg-x86/libavformat/webm_chunk.c /tmp/ffmpeg-x86/libavformat/webm_chunk.c
87c87
< static int get_chunk_filename(AVFormatContext *s, int is_header, char *filename)
---
> static int get_chunk_filename(AVFormatContext *s, int is_header, char filename[MAX_FILENAME_SIZE])
94a95
>         int len;
99c100,104
<         av_strlcpy(filename, wc->header_filename, strlen(wc->header_filename) + 1);
---
>         len = av_strlcpy(filename, wc->header_filename, MAX_FILENAME_SIZE);
>         if (len >= MAX_FILENAME_SIZE) {
>             av_log(oc, AV_LOG_ERROR, "Header filename too long\n");
>             return AVERROR(EINVAL);
>         }
165c170
< static int chunk_end(AVFormatContext *s)
---
> static int chunk_end(AVFormatContext *s, int flush)
176c181
<     if (wc->chunk_start_index == wc->chunk_index)
---
>     if (!oc->pb)
178,179c183,186
<     // Flush the cluster in WebM muxer.
<     oc->oformat->write_packet(oc, NULL);
---
> 
>     if (flush)
>         // Flush the cluster in WebM muxer.
>         oc->oformat->write_packet(oc, NULL);
180a188
>     oc->pb = NULL;
191d198
<     oc->pb = NULL;
213,214c220,222
<     // chunk is started based on chunk_duration.
<     if ((st->codecpar->codec_type == AVMEDIA_TYPE_VIDEO &&
---
>     // chunk is started based on chunk_duration. Also, a new chunk is started
>     // unconditionally if there is no currently open chunk.
>     if (!oc->pb || (st->codecpar->codec_type == AVMEDIA_TYPE_VIDEO &&
217c225
<          (pkt->pts == 0 || wc->duration_written >= wc->chunk_duration))) {
---
>          wc->duration_written >= wc->chunk_duration)) {
219,220c227,228
<         if ((ret = chunk_end(s)) < 0 || (ret = chunk_start(s)) < 0) {
<             goto fail;
---
>         if ((ret = chunk_end(s, 1)) < 0 || (ret = chunk_start(s)) < 0) {
>             return ret;
225,233d232
<     if (ret < 0)
<         goto fail;
< 
< fail:
<     if (ret < 0) {
<         oc->streams = NULL;
<         oc->nb_streams = 0;
<         avformat_free_context(oc);
<     }
241a241,247
>     int ret;
> 
>     if (!oc->pb) {
>         ret = chunk_start(s);
>         if (ret < 0)
>             goto fail;
>     }
243c249,250
<     chunk_end(s);
---
>     ret = chunk_end(s, 0);
> fail:
247c254
<     return 0;
---
>     return ret;
diff -r android/contrib/ffmpeg-x86/libavformat/webmdashenc.c /tmp/ffmpeg-x86/libavformat/webmdashenc.c
468a469
>             const char *comma;
476a478,482
>             comma = strchr(p, ',');
>             if (!comma || comma - p >= sizeof(w->as[w->nb_as - 1].id)) {
>                 av_log(s, AV_LOG_ERROR, "'id' in 'adaptation_sets' is malformed.\n");
>                 return AVERROR(EINVAL);
>             }
485a492,495
>             int ret = av_reallocp_array(&as->streams, ++as->nb_streams,
>                                         sizeof(*as->streams));
>             if (ret < 0)
>                 return ret;
488,490d497
<             as->streams = av_realloc(as->streams, sizeof(*as->streams) * ++as->nb_streams);
<             if (as->streams == NULL)
<                 return AVERROR(ENOMEM);
512a520,527
> 
>     for (unsigned i = 0; i < s->nb_streams; i++) {
>         enum AVCodecID codec_id = s->streams[i]->codecpar->codec_id;
>         if (codec_id != AV_CODEC_ID_VP8    && codec_id != AV_CODEC_ID_VP9 &&
>             codec_id != AV_CODEC_ID_VORBIS && codec_id != AV_CODEC_ID_OPUS)
>             return AVERROR(EINVAL);
>     }
> 
diff -r android/contrib/ffmpeg-x86/libavformat/webvttdec.c /tmp/ffmpeg-x86/libavformat/webvttdec.c
167a168,169
>     if (res < 0)
>         ff_subtitles_queue_clean(&webvtt->q);
diff -r android/contrib/ffmpeg-x86/libavformat/wsddec.c /tmp/ffmpeg-x86/libavformat/wsddec.c
140c140
<             if (channel_assign & (1 << i))
---
>             if ((channel_assign >> i) & 1)
diff -r android/contrib/ffmpeg-x86/libavformat/wtvdec.c /tmp/ffmpeg-x86/libavformat/wtvdec.c
152c152
< static AVIOContext * wtvfile_open_sector(int first_sector, uint64_t length, int depth, AVFormatContext *s)
---
> static AVIOContext * wtvfile_open_sector(unsigned first_sector, uint64_t length, int depth, AVFormatContext *s)
960c960,961
<     int root_sector, root_size;
---
>     unsigned root_sector;
>     int root_size;
995c996,997
<     if (ret < 0)
---
>     if (ret < 0) {
>         wtvfile_close(wtv->pb);
996a999
>     }
diff -r android/contrib/ffmpeg-x86/libavformat/wvdec.c /tmp/ffmpeg-x86/libavformat/wvdec.c
42a43
>     WV_DSD    = 0x80000000,
97a99,103
>     }
> 
>     if (wc->header.flags & WV_DSD) {
>         avpriv_report_missing_feature(ctx, "WV DSD");
>         return AVERROR_PATCHWELCOME;
diff -r android/contrib/ffmpeg-x86/libavformat/xmv.c /tmp/ffmpeg-x86/libavformat/xmv.c
82c82
<     uint32_t bit_rate;        ///< Bits of compressed data per second.
---
>     uint64_t bit_rate;        ///< Bits of compressed data per second.
194c194
<         packet->bit_rate      = packet->bits_per_sample *
---
>         packet->bit_rate      = (uint64_t)packet->bits_per_sample *
Only in android/contrib/ffmpeg-x86/libavutil: application.c
Only in android/contrib/ffmpeg-x86/libavutil: application.h
diff -r android/contrib/ffmpeg-x86/libavutil/arm/float_dsp_init_vfp.c /tmp/ffmpeg-x86/libavutil/arm/float_dsp_init_vfp.c
39c39
<     if (!have_vfpv3(cpu_flags)) {
---
>     if (have_vfp_vm(cpu_flags)) {
44c44
<     if (!have_vfpv3(cpu_flags))
---
>     if (have_vfp_vm(cpu_flags))
diff -r android/contrib/ffmpeg-x86/libavutil/avstring.c /tmp/ffmpeg-x86/libavutil/avstring.c
225d224
<     const char *end = a + n;
226a226,227
>     if (n <= 0)
>         return 0;
230c231
<     } while (a < end && c1 && c1 == c2);
---
>     } while (--n && c1 && c1 == c2);
diff -r android/contrib/ffmpeg-x86/libavutil/common.h /tmp/ffmpeg-x86/libavutil/common.h
161c161
<     if (a&(~0xFF)) return (-a)>>31;
---
>     if (a&(~0xFF)) return (~a)>>31;
183c183
<     if (a&(~0xFFFF)) return (-a)>>31;
---
>     if (a&(~0xFFFF)) return (~a)>>31;
231c231
<     if (a & ~((1<<p) - 1)) return -a >> 31 & ((1<<p) - 1);
---
>     if (a & ~((1<<p) - 1)) return (~a) >> 31 & ((1<<p) - 1);
310c310
<     return av_log2((x - 1) << 1);
---
>     return av_log2((x - 1U) << 1);
Only in android/contrib/ffmpeg-x86/libavutil: dns_cache.c
Only in android/contrib/ffmpeg-x86/libavutil: dns_cache.h
diff -r android/contrib/ffmpeg-x86/libavutil/hwcontext_dxva2.c /tmp/ffmpeg-x86/libavutil/hwcontext_dxva2.c
488c488,493
<     IDirect3D9Ex_GetAdapterDisplayModeEx(d3d9ex, adapter, &modeex, NULL);
---
>     modeex.Size = sizeof(D3DDISPLAYMODEEX);
>     hr = IDirect3D9Ex_GetAdapterDisplayModeEx(d3d9ex, adapter, &modeex, NULL);
>     if (FAILED(hr)) {
>         IDirect3D9Ex_Release(d3d9ex);
>         return AVERROR_UNKNOWN;
>     }
diff -r android/contrib/ffmpeg-x86/libavutil/imgutils.c /tmp/ffmpeg-x86/libavutil/imgutils.c
502d501
<     size_t pos = 0;
522,539c521,525
<     } else if (clear_size == 2) {
<         uint16_t val = AV_RN16(clear);
<         for (; dst_size >= 2; dst_size -= 2) {
<             AV_WN16(dst, val);
<             dst += 2;
<         }
<     } else if (clear_size == 4) {
<         uint32_t val = AV_RN32(clear);
<         for (; dst_size >= 4; dst_size -= 4) {
<             AV_WN32(dst, val);
<             dst += 4;
<         }
<     } else if (clear_size == 8) {
<         uint32_t val = AV_RN64(clear);
<         for (; dst_size >= 8; dst_size -= 8) {
<             AV_WN64(dst, val);
<             dst += 8;
<         }
---
>     } else {
>         if (clear_size > dst_size)
>             clear_size = dst_size;
>         memcpy(dst, clear, clear_size);
>         av_memcpy_backptr(dst + clear_size, clear_size, dst_size - clear_size);
541,543d526
< 
<     for (; dst_size; dst_size--)
<         *dst++ = clear[pos++ % clear_size];
diff -r android/contrib/ffmpeg-x86/libavutil/integer.c /tmp/ffmpeg-x86/libavutil/integer.c
77c77
<                 carry= (carry>>16) + out.v[j] + a.v[i]*b.v[j-i];
---
>                 carry= (carry>>16) + out.v[j] + a.v[i]*(unsigned)b.v[j-i];
diff -r android/contrib/ffmpeg-x86/libavutil/lfg.h /tmp/ffmpeg-x86/libavutil/lfg.h
26a27,32
> /**
>  * Context structure for the Lagged Fibonacci PRNG.
>  * The exact layout, types and content of this struct may change and should
>  * not be accessed directly. Only its sizeof() is guranteed to stay the same
>  * to allow easy instanciation.
>  */
48,49c54,56
<     c->state[c->index & 63] = c->state[(c->index-24) & 63] + c->state[(c->index-55) & 63];
<     return c->state[c->index++ & 63];
---
>     unsigned a = c->state[c->index & 63] = c->state[(c->index-24) & 63] + c->state[(c->index-55) & 63];
>     c->index += 1U;
>     return a;
60c67,69
<     return c->state[c->index++ & 63] = 2*a*b+a+b;
---
>     a = c->state[c->index & 63] = 2*a*b+a+b;
>     c->index += 1U;
>     return a;
diff -r android/contrib/ffmpeg-x86/libavutil/Makefile /tmp/ffmpeg-x86/libavutil/Makefile
7d6
<           application.h                                                 \
28d26
<           dns_cache.h                                                   \
81d78
<           thread.h                                                      \
98d94
<        application.o                                                    \
115d110
<        dns_cache.o                                                      \
diff -r android/contrib/ffmpeg-x86/libavutil/mem.c /tmp/ffmpeg-x86/libavutil/mem.c
387a388,399
> #if HAVE_FAST_64BIT
>     uint64_t v2= v + ((uint64_t)v<<32);
>     while (len >= 32) {
>         AV_WN64(dst   , v2);
>         AV_WN64(dst+ 8, v2);
>         AV_WN64(dst+16, v2);
>         AV_WN64(dst+24, v2);
>         dst += 32;
>         len -= 32;
>     }
> #endif
> 
diff -r android/contrib/ffmpeg-x86/libavutil/mem.h /tmp/ffmpeg-x86/libavutil/mem.h
341c341
< av_alloc_size(2, 3) int av_reallocp_array(void *ptr, size_t nmemb, size_t size);
---
> int av_reallocp_array(void *ptr, size_t nmemb, size_t size);
diff -r android/contrib/ffmpeg-x86/libavutil/pixfmt.h /tmp/ffmpeg-x86/libavutil/pixfmt.h
44a45,48
>  * @note
>  * If the resolution is not a multiple of the chroma subsampling factor
>  * then the chroma plane resolution must be rounded up.
>  *
diff -r android/contrib/ffmpeg-x86/libavutil/softfloat.h /tmp/ffmpeg-x86/libavutil/softfloat.h
45a46
> static const SoftFloat FLOAT_MIN        = { 0x20000000,   MIN_EXP};
diff -r android/contrib/ffmpeg-x86/libavutil/softfloat_ieee754.h /tmp/ffmpeg-x86/libavutil/softfloat_ieee754.h
67c67
<     return ((SoftFloat_IEEE754) { (n & 0x80000000UL), (n & 0x7FFFFFUL), (n & 0x7F800000UL) });
---
>     return ((SoftFloat_IEEE754) { (n & 0x80000000UL) >> 31, (n & 0x7FFFFFUL), (int8_t)((n & 0x7F800000UL) >> 23)});
diff -r android/contrib/ffmpeg-x86/libpostproc/postprocess_template.c /tmp/ffmpeg-x86/libpostproc/postprocess_template.c
1187,1190c1187,1190
<         "push %4                              \n\t"
<         "movd %%mm6, %k4                        \n\t"
<         "cmpb "MANGLE(deringThreshold)", %b4    \n\t"
<         "pop %4                               \n\t"
---
>         "push %%"FF_REG_a"                      \n\t"
>         "movd %%mm6, %%eax                      \n\t"
>         "cmpb "MANGLE(deringThreshold)", %%al   \n\t"
>         "pop %%"FF_REG_a"                       \n\t"
1320c1320
<         : "%"FF_REG_a, "%"FF_REG_d, "%"FF_REG_sp
---
>         : "%"FF_REG_a, "%"FF_REG_d
diff -r android/contrib/ffmpeg-x86/libswresample/arm/audio_convert_neon.S /tmp/ffmpeg-x86/libswresample/arm/audio_convert_neon.S
24a25
> .L_swri_oldapi_conv_flt_to_s16_neon:
68a70
> .L_swri_oldapi_conv_fltp_to_s16_2ch_neon:
136,137c138,139
<         blt             X(swri_oldapi_conv_flt_to_s16_neon)
<         beq             X(swri_oldapi_conv_fltp_to_s16_2ch_neon)
---
>         blt             .L_swri_oldapi_conv_flt_to_s16_neon
>         beq             .L_swri_oldapi_conv_fltp_to_s16_2ch_neon
diff -r android/contrib/ffmpeg-x86/libswresample/rematrix.c /tmp/ffmpeg-x86/libswresample/rematrix.c
72,73c72,75
<     nb_in  = av_get_channel_layout_nb_channels(s->user_in_ch_layout);
<     nb_out = av_get_channel_layout_nb_channels(s->user_out_ch_layout);
---
>     nb_in = (s->user_in_ch_count > 0) ? s->user_in_ch_count :
>         av_get_channel_layout_nb_channels(s->user_in_ch_layout);
>     nb_out = (s->user_out_ch_count > 0) ? s->user_out_ch_count :
>         av_get_channel_layout_nb_channels(s->user_out_ch_layout);
diff -r android/contrib/ffmpeg-x86/libswresample/swresample.c /tmp/ffmpeg-x86/libswresample/swresample.c
321c321
<     s->resample_first= RSC*s->out.ch_count/s->in.ch_count - RSC < s->out_sample_rate/(float)s-> in_sample_rate - 1.0;
---
>     s->resample_first= RSC*s->out.ch_count/s->used_ch_count - RSC < s->out_sample_rate/(float)s-> in_sample_rate - 1.0;
681c681
<                             s->mix_2_1_f(conv_src->ch[ch] + off, preout->ch[ch] + off, s->dither.noise.ch[ch] + s->dither.noise.bps * s->dither.noise_pos + off + len1, s->native_one, 0, 0, out_count - len1);
---
>                             s->mix_2_1_f(conv_src->ch[ch] + off, preout->ch[ch] + off, s->dither.noise.ch[ch] + s->dither.noise.bps * s->dither.noise_pos + off, s->native_one, 0, 0, out_count - len1);
diff -r android/contrib/ffmpeg-x86/libswscale/input.c /tmp/ffmpeg-x86/libswscale/input.c
289,290c289,290
<     const int ru       = rgb2yuv[RU_IDX] << rsh, gu = rgb2yuv[GU_IDX] << gsh, bu = rgb2yuv[BU_IDX] << bsh,
<               rv       = rgb2yuv[RV_IDX] << rsh, gv = rgb2yuv[GV_IDX] << gsh, bv = rgb2yuv[BV_IDX] << bsh;
---
>     const int ru       = rgb2yuv[RU_IDX] * (1 << rsh), gu = rgb2yuv[GU_IDX] * (1 << gsh), bu = rgb2yuv[BU_IDX] * (1 << bsh),
>               rv       = rgb2yuv[RV_IDX] * (1 << rsh), gv = rgb2yuv[GV_IDX] * (1 << gsh), bv = rgb2yuv[BV_IDX] * (1 << bsh);
317,318c317,318
<     const int ru       = rgb2yuv[RU_IDX] << rsh, gu = rgb2yuv[GU_IDX] << gsh, bu = rgb2yuv[BU_IDX] << bsh,
<               rv       = rgb2yuv[RV_IDX] << rsh, gv = rgb2yuv[GV_IDX] << gsh, bv = rgb2yuv[BV_IDX] << bsh,
---
>     const int ru       = rgb2yuv[RU_IDX] * (1 << rsh), gu = rgb2yuv[GU_IDX] * (1 << gsh), bu = rgb2yuv[BU_IDX] * (1 << bsh),
>               rv       = rgb2yuv[RV_IDX] * (1 << rsh), gv = rgb2yuv[GV_IDX] * (1 << gsh), bv = rgb2yuv[BV_IDX] * (1 << bsh),
diff -r android/contrib/ffmpeg-x86/libswscale/output.c /tmp/ffmpeg-x86/libswscale/output.c
1637,1639c1637,1639
<     R = Y + V*c->yuv2rgb_v2r_coeff;
<     G = Y + V*c->yuv2rgb_v2g_coeff + U*c->yuv2rgb_u2g_coeff;
<     B = Y +                          U*c->yuv2rgb_u2b_coeff;
---
>     R = (unsigned)Y + V*c->yuv2rgb_v2r_coeff;
>     G = (unsigned)Y + V*c->yuv2rgb_v2g_coeff + U*c->yuv2rgb_u2g_coeff;
>     B = (unsigned)Y +                          U*c->yuv2rgb_u2b_coeff;
1880c1880
<             int Y = buf0[i] << 2;
---
>             int Y = buf0[i] * 4;
1897,1899c1897,1899
<             int Y = buf0[i] << 2;
<             int U = (ubuf0[i] + ubuf1[i] - (128<<8)) << 1;
<             int V = (vbuf0[i] + vbuf1[i] - (128<<8)) << 1;
---
>             int Y = buf0[i] * 4;
>             int U = (ubuf0[i] + ubuf1[i] - (128<<8)) * 2;
>             int V = (vbuf0[i] + vbuf1[i] - (128<<8)) * 2;
2065c2065
<                 A += alpSrc[j][i] * lumFilter[j];
---
>                 A += alpSrc[j][i] * (unsigned)lumFilter[j];
diff -r android/contrib/ffmpeg-x86/libswscale/swscale.c /tmp/ffmpeg-x86/libswscale/swscale.c
297,298c297,298
<     srcStride[1] <<= c->vChrDrop;
<     srcStride[2] <<= c->vChrDrop;
---
>     srcStride[1] *= 1 << c->vChrDrop;
>     srcStride[2] *= 1 << c->vChrDrop;
diff -r android/contrib/ffmpeg-x86/libswscale/tests/swscale.c /tmp/ffmpeg-x86/libswscale/tests/swscale.c
311c311
<         char srcStr[12];
---
>         char srcStr[21];
314c314
<         char dstStr[12];
---
>         char dstStr[21];
320c320
<                      " %12s %dx%d -> %12s %dx%d flags=%d CRC=%x"
---
>                      " %20s %dx%d -> %20s %dx%d flags=%d CRC=%x"
326c326
<             ret       = sscanf(buf, "%12s -> %12s\n", srcStr, dstStr);
---
>             ret       = sscanf(buf, "%20s -> %20s\n", srcStr, dstStr);
diff -r android/contrib/ffmpeg-x86/libswscale/utils.c /tmp/ffmpeg-x86/libswscale/utils.c
383c383
<                 int64_t coeff= fone - FFABS(((int64_t)xx<<16) - xDstInSrc)*(fone>>16);
---
>                 int64_t coeff = fone - FFABS((int64_t)xx * (1 << 16) - xDstInSrc) * (fone >> 16);
diff -r android/contrib/ffmpeg-x86/libswscale/x86/swscale.c /tmp/ffmpeg-x86/libswscale/x86/swscale.c
163c163
<                 + (vLumFilterSize>1 ? vLumFilter[dstY*vLumFilterSize + i + 1]<<16 : 0);
---
>                     + (vLumFilterSize>1 ? vLumFilter[dstY*vLumFilterSize + i + 1] * (1 << 16) : 0);
176c176
<                 + (vChrFilterSize>1 ? vChrFilter[chrDstY*vChrFilterSize + i + 1]<<16 : 0);
---
>                     + (vChrFilterSize>1 ? vChrFilter[chrDstY*vChrFilterSize + i + 1] * (1 << 16) : 0);
diff -r android/contrib/ffmpeg-x86/libswscale/yuv2rgb.c /tmp/ffmpeg-x86/libswscale/yuv2rgb.c
140a141
>             int yd = y + srcSliceY;                                         \
142c143
<                 (dst_type *)(dst[0] + (y + srcSliceY)     * dstStride[0]);  \
---
>                 (dst_type *)(dst[0] + (yd)     * dstStride[0]);             \
144c145
<                 (dst_type *)(dst[0] + (y + srcSliceY + 1) * dstStride[0]);  \
---
>                 (dst_type *)(dst[0] + (yd + 1) * dstStride[0]);             \
493,494c494,495
<     const uint8_t *d32 = ff_dither_8x8_32[y & 7];
<     const uint8_t *d64 = ff_dither_8x8_73[y & 7];
---
>     const uint8_t *d32 = ff_dither_8x8_32[yd & 7];
>     const uint8_t *d64 = ff_dither_8x8_73[yd & 7];
523,524c524,525
<     const uint8_t *d32 = ff_dither_8x8_32[y & 7];
<     const uint8_t *d64 = ff_dither_8x8_73[y & 7];
---
>     const uint8_t *d32 = ff_dither_8x8_32[yd & 7];
>     const uint8_t *d64 = ff_dither_8x8_73[yd & 7];
534,535c535,536
<     const uint8_t *d32 = ff_dither_8x8_32[y & 7];
<     const uint8_t *d64 = ff_dither_8x8_73[y & 7];
---
>     const uint8_t *d32 = ff_dither_8x8_32[yd & 7];
>     const uint8_t *d64 = ff_dither_8x8_73[yd & 7];
544,545c545,546
<     const uint8_t * d64 = ff_dither_8x8_73[y & 7];
<     const uint8_t *d128 = ff_dither_8x8_220[y & 7];
---
>     const uint8_t * d64 = ff_dither_8x8_73[yd & 7];
>     const uint8_t *d128 = ff_dither_8x8_220[yd & 7];
576,577c577,578
<     const uint8_t * d64 = ff_dither_8x8_73[y & 7];
<     const uint8_t *d128 = ff_dither_8x8_220[y & 7];
---
>     const uint8_t * d64 = ff_dither_8x8_73[yd & 7];
>     const uint8_t *d128 = ff_dither_8x8_220[yd & 7];
588,589c589,590
<     const uint8_t * d64 = ff_dither_8x8_73[y & 7];
<     const uint8_t *d128 = ff_dither_8x8_220[y & 7];
---
>     const uint8_t * d64 = ff_dither_8x8_73[yd & 7];
>     const uint8_t *d128 = ff_dither_8x8_220[yd & 7];
597,598c598,599
<     const uint8_t *d64  = ff_dither_8x8_73[y & 7];
<     const uint8_t *d128 = ff_dither_8x8_220[y & 7];
---
>     const uint8_t *d64  = ff_dither_8x8_73[yd & 7];
>     const uint8_t *d128 = ff_dither_8x8_220[yd & 7];
626,627c627,628
<     const uint8_t *d64  = ff_dither_8x8_73[y & 7];
<     const uint8_t *d128 = ff_dither_8x8_220[y & 7];
---
>     const uint8_t *d64  = ff_dither_8x8_73[yd & 7];
>     const uint8_t *d128 = ff_dither_8x8_220[yd & 7];
636,637c637,638
<     const uint8_t *d64  = ff_dither_8x8_73[y & 7];
<     const uint8_t *d128 = ff_dither_8x8_220[y & 7];
---
>     const uint8_t *d64  = ff_dither_8x8_73[yd & 7];
>     const uint8_t *d128 = ff_dither_8x8_220[yd & 7];
644c645
<     const uint8_t *d128 = ff_dither_8x8_220[y & 7];
---
>     const uint8_t *d128 = ff_dither_8x8_220[yd & 7];
diff -r android/contrib/ffmpeg-x86/RELEASE /tmp/ffmpeg-x86/RELEASE
1c1
< 3.4
---
> 3.4.8
diff -r android/contrib/ffmpeg-x86/tests/audiomatch.c /tmp/ffmpeg-x86/tests/audiomatch.c
109a110,111
> 
>     return 0;
diff -r android/contrib/ffmpeg-x86/tests/fate/filter-video.mak /tmp/ffmpeg-x86/tests/fate/filter-video.mak
753c753
< fate-filter-refcmp-psnr-rgb: CMD = refcmp_metadata psnr rgb24 0.001
---
> fate-filter-refcmp-psnr-rgb: CMD = refcmp_metadata psnr rgb24 0.002
diff -r android/contrib/ffmpeg-x86/tests/ffserver.regression.ref /tmp/ffmpeg-x86/tests/ffserver.regression.ref
4,5c4,5
< dc16f607e13328a832e73801cd21ec98 *ff-test_h.asf
< 69337d6c8cd7ac7e626338decdbf41d3 *ff-test_l.asf
---
> ca209a0c67afbd3bc3bcde0840f313fc *ff-test_h.asf
> f97a91609bfc8a1857455f17c5ec101c *ff-test_l.asf
8,10c8,10
< 4c887dfc1dd0f6ea1a3a2be6dd32e495 *ff-test.jpg
< 1d04b73b04aad27793cc762d5afabac1 *ff-test_small.jpg
< bc36c40ee34ebee6ffe50f3094aab733 *ff-test.mjpg
---
> e04e6ebf9584654df131f5eec881ac38 *ff-test.jpg
> f15d43e9d3630601b61a024023249bb8 *ff-test_small.jpg
> 4735c72cde67000f12e9d1dbfbd975a7 *ff-test.mjpg
diff -r android/contrib/ffmpeg-x86/tests/ref/fate/mpeg2-ticket186 /tmp/ffmpeg-x86/tests/ref/fate/mpeg2-ticket186
6c6
< 0,          0,          0,        1,   152064, 0xd23ffc59
---
> 0,          0,          0,        1,   152064, 0x8f9d00c1
8c8
< 0,          2,          2,        1,   152064, 0x5958d070
---
> 0,          2,          2,        1,   152064, 0x7225cb39
10c10
< 0,          4,          4,        1,   152064, 0xb47bbed7
---
> 0,          4,          4,        1,   152064, 0xd56bc556
12c12
< 0,          6,          6,        1,   152064, 0x02389610
---
> 0,          6,          6,        1,   152064, 0x06d7805c
14c14
< 0,          8,          8,        1,   152064, 0x935a780e
---
> 0,          8,          8,        1,   152064, 0xdb2f57d5
16c16
< 0,         10,         10,        1,   152064, 0x49df265f
---
> 0,         10,         10,        1,   152064, 0x5b670e79
18c18
< 0,         12,         12,        1,   152064, 0x6e34a0c4
---
> 0,         12,         12,        1,   152064, 0x17578222
20c20
< 0,         14,         14,        1,   152064, 0x68e74188
---
> 0,         14,         14,        1,   152064, 0x168e35d6
22c22
< 0,         16,         16,        1,   152064, 0xa8665e1a
---
> 0,         16,         16,        1,   152064, 0x5e395308
24c24
< 0,         18,         18,        1,   152064, 0x1c1ab2c3
---
> 0,         18,         18,        1,   152064, 0x6b099c51
26c26
< 0,         20,         20,        1,   152064, 0x030d5afc
---
> 0,         20,         20,        1,   152064, 0xcea840fc
28c28
< 0,         22,         22,        1,   152064, 0x5ce0548d
---
> 0,         22,         22,        1,   152064, 0xb05354d3
30c30
< 0,         24,         24,        1,   152064, 0xf167f698
---
> 0,         24,         24,        1,   152064, 0xbccdf14b
32c32
< 0,         26,         26,        1,   152064, 0xd7aec2c4
---
> 0,         26,         26,        1,   152064, 0x07aec13a
34c34
< 0,         28,         28,        1,   152064, 0xc289b278
---
> 0,         28,         28,        1,   152064, 0x0e7ab64e
36c36
< 0,         30,         30,        1,   152064, 0x48c09366
---
> 0,         30,         30,        1,   152064, 0xcc219365
38c38
< 0,         32,         32,        1,   152064, 0x1c63cdc2
---
> 0,         32,         32,        1,   152064, 0x8b91c622
40c40
< 0,         34,         34,        1,   152064, 0x70f94bc0
---
> 0,         34,         34,        1,   152064, 0x658e498f
42c42
< 0,         36,         36,        1,   152064, 0x44a2f607
---
> 0,         36,         36,        1,   152064, 0xb639f8d2
44c44
< 0,         38,         38,        1,   152064, 0x37b86b68
---
> 0,         38,         38,        1,   152064, 0x8a546bcf
46c46
< 0,         40,         40,        1,   152064, 0x5d0d0e8d
---
> 0,         40,         40,        1,   152064, 0x80a10edc
48c48
< 0,         42,         42,        1,   152064, 0xd44ef54d
---
> 0,         42,         42,        1,   152064, 0x4f1bf025
50c50
< 0,         44,         44,        1,   152064, 0x27597277
---
> 0,         44,         44,        1,   152064, 0x39e6700d
52c52
< 0,         46,         46,        1,   152064, 0x5df7390c
---
> 0,         46,         46,        1,   152064, 0xacf839bb
54c54
< 0,         48,         48,        1,   152064, 0x753959bb
---
> 0,         48,         48,        1,   152064, 0x09c7630d
56c56
< 0,         50,         50,        1,   152064, 0xec4a0f33
---
> 0,         50,         50,        1,   152064, 0xae0f0f28
58c58
< 0,         52,         52,        1,   152064, 0x3938abf4
---
> 0,         52,         52,        1,   152064, 0x1e23ad39
60c60
< 0,         54,         54,        1,   152064, 0xb12ace0c
---
> 0,         54,         54,        1,   152064, 0x4eadd0a0
62c62
< 0,         56,         56,        1,   152064, 0x85bd5e88
---
> 0,         56,         56,        1,   152064, 0x240a607b
64c64
< 0,         58,         58,        1,   152064, 0x51a4fc74
---
> 0,         58,         58,        1,   152064, 0x6c37fc08
66c66
< 0,         60,         60,        1,   152064, 0xb69412a9
---
> 0,         60,         60,        1,   152064, 0xc5df1477
68c68
< 0,         62,         62,        1,   152064, 0x223fcc41
---
> 0,         62,         62,        1,   152064, 0xefd1cdbd
70c70
< 0,         64,         64,        1,   152064, 0x1e58b37a
---
> 0,         64,         64,        1,   152064, 0x1b04af5f
72c72
< 0,         66,         66,        1,   152064, 0x4e0f4d4a
---
> 0,         66,         66,        1,   152064, 0x23b04553
74c74
< 0,         68,         68,        1,   152064, 0xcc329c2f
---
> 0,         68,         68,        1,   152064, 0x35139bf8
76c76
< 0,         70,         70,        1,   152064, 0x489f2d50
---
> 0,         70,         70,        1,   152064, 0xa78e2efa
78c78
< 0,         72,         72,        1,   152064, 0x509eb79e
---
> 0,         72,         72,        1,   152064, 0x3255b306
82c82
< 0,         76,         76,        1,   152064, 0xb03581b6
---
> 0,         76,         76,        1,   152064, 0xbc698473
86c86
< 0,         80,         80,        1,   152064, 0x7434baa4
---
> 0,         80,         80,        1,   152064, 0x4878bb11
88c88
< 0,         82,         82,        1,   152064, 0x45b2bb36
---
> 0,         82,         82,        1,   152064, 0xe675bfe0
94c94
< 0,         88,         88,        1,   152064, 0x803b30c6
---
> 0,         88,         88,        1,   152064, 0x326730c8
96c96
< 0,         90,         90,        1,   152064, 0xb126e53e
---
> 0,         90,         90,        1,   152064, 0x1035e3ee
98c98
< 0,         92,         92,        1,   152064, 0xfcfd7f17
---
> 0,         92,         92,        1,   152064, 0x261081fa
100c100
< 0,         94,         94,        1,   152064, 0x638d6f48
---
> 0,         94,         94,        1,   152064, 0x8a6d6df3
102c102
< 0,         96,         96,        1,   152064, 0x2cb959b0
---
> 0,         96,         96,        1,   152064, 0x5162570a
104c104
< 0,         98,         98,        1,   152064, 0x412a555b
---
> 0,         98,         98,        1,   152064, 0xf0694fcd
106c106
< 0,        100,        100,        1,   152064, 0xa8cf0cbc
---
> 0,        100,        100,        1,   152064, 0xb4ec0c96
108c108
< 0,        102,        102,        1,   152064, 0x636cc494
---
> 0,        102,        102,        1,   152064, 0x7860c418
110c110
< 0,        104,        104,        1,   152064, 0xe77f4d03
---
> 0,        104,        104,        1,   152064, 0xb0514dc3
112c112
< 0,        106,        106,        1,   152064, 0x5271f5ef
---
> 0,        106,        106,        1,   152064, 0x5277f52d
114c114
< 0,        108,        108,        1,   152064, 0xb8845f88
---
> 0,        108,        108,        1,   152064, 0x0b596089
116c116
< 0,        110,        110,        1,   152064, 0xe695fe27
---
> 0,        110,        110,        1,   152064, 0x12edfe8b
118c118
< 0,        112,        112,        1,   152064, 0x52d2b719
---
> 0,        112,        112,        1,   152064, 0x4cedb882
120c120
< 0,        114,        114,        1,   152064, 0xe0b2ba93
---
> 0,        114,        114,        1,   152064, 0x9071b0e6
126c126
< 0,        120,        120,        1,   152064, 0x7a6f7416
---
> 0,        120,        120,        1,   152064, 0x032d7575
128c128
< 0,        122,        122,        1,   152064, 0xc5a261e9
---
> 0,        122,        122,        1,   152064, 0xe5a266b4
130c130
< 0,        124,        124,        1,   152064, 0x259180b2
---
> 0,        124,        124,        1,   152064, 0xe6138024
132c132
< 0,        126,        126,        1,   152064, 0x692090b4
---
> 0,        126,        126,        1,   152064, 0x9de7903e
134c134
< 0,        128,        128,        1,   152064, 0x3e0038d5
---
> 0,        128,        128,        1,   152064, 0x9e323818
136c136
< 0,        130,        130,        1,   152064, 0xe4cb7bb5
---
> 0,        130,        130,        1,   152064, 0x8f7c75c7
138c138
< 0,        132,        132,        1,   152064, 0xb9056247
---
> 0,        132,        132,        1,   152064, 0x3d8e62ab
140c140
< 0,        134,        134,        1,   152064, 0x13ea1b6d
---
> 0,        134,        134,        1,   152064, 0x57681ebc
142c142
< 0,        136,        136,        1,   152064, 0x54c00ba8
---
> 0,        136,        136,        1,   152064, 0x8c8b0a4b
144c144
< 0,        138,        138,        1,   152064, 0x1af00532
---
> 0,        138,        138,        1,   152064, 0x0afe03ae
148c148
< 0,        142,        142,        1,   152064, 0x0ee879bb
---
> 0,        142,        142,        1,   152064, 0xd44f7976
150c150
< 0,        144,        144,        1,   152064, 0xdd5d08d6
---
> 0,        144,        144,        1,   152064, 0xada307a9
152c152
< 0,        146,        146,        1,   152064, 0xf0f4aba0
---
> 0,        146,        146,        1,   152064, 0xa019ad8a
154c154
< 0,        148,        148,        1,   152064, 0x02af732b
---
> 0,        148,        148,        1,   152064, 0x6fd5737f
156c156
< 0,        150,        150,        1,   152064, 0x998732b4
---
> 0,        150,        150,        1,   152064, 0x36a53280
158c158
< 0,        152,        152,        1,   152064, 0x474f3b12
---
> 0,        152,        152,        1,   152064, 0x48373a3e
160c160
< 0,        154,        154,        1,   152064, 0xa3f87fb3
---
> 0,        154,        154,        1,   152064, 0x63d37fc4
162c162
< 0,        156,        156,        1,   152064, 0x9e8caab2
---
> 0,        156,        156,        1,   152064, 0xc47ea97e
164c164
< 0,        158,        158,        1,   152064, 0x24fcec49
---
> 0,        158,        158,        1,   152064, 0x909dedcc
166c166
< 0,        160,        160,        1,   152064, 0xc466f68f
---
> 0,        160,        160,        1,   152064, 0x5e43f7f1
168c168
< 0,        162,        162,        1,   152064, 0xa0f61157
---
> 0,        162,        162,        1,   152064, 0xa66710f5
170c170
< 0,        164,        164,        1,   152064, 0xc14243c7
---
> 0,        164,        164,        1,   152064, 0xc8e745f1
172c172
< 0,        166,        166,        1,   152064, 0x040942e6
---
> 0,        166,        166,        1,   152064, 0xb1c243e2
174c174
< 0,        168,        168,        1,   152064, 0xc3d64c5f
---
> 0,        168,        168,        1,   152064, 0x92814bde
176c176
< 0,        170,        170,        1,   152064, 0xa4d24c64
---
> 0,        170,        170,        1,   152064, 0x48634df3
180c180
< 0,        174,        174,        1,   152064, 0x97b34958
---
> 0,        174,        174,        1,   152064, 0x57004906
182c182
< 0,        176,        176,        1,   152064, 0x60c528e2
---
> 0,        176,        176,        1,   152064, 0xbc0d28f0
186c186
< 0,        180,        180,        1,   152064, 0x9772db11
---
> 0,        180,        180,        1,   152064, 0xbd6adb19
188c188
< 0,        182,        182,        1,   152064, 0xb06b4aed
---
> 0,        182,        182,        1,   152064, 0x1e1e4bfb
190c190
< 0,        184,        184,        1,   152064, 0xa7a025fb
---
> 0,        184,        184,        1,   152064, 0x61c5259e
192c192
< 0,        186,        186,        1,   152064, 0xcbf3830e
---
> 0,        186,        186,        1,   152064, 0x19388308
194c194
< 0,        188,        188,        1,   152064, 0x5dd0b5df
---
> 0,        188,        188,        1,   152064, 0x4bebb678
196c196
< 0,        190,        190,        1,   152064, 0xa585ceb6
---
> 0,        190,        190,        1,   152064, 0x3c9dc401
198c198
< 0,        192,        192,        1,   152064, 0x8f2a0404
---
> 0,        192,        192,        1,   152064, 0xae60f7e7
200c200
< 0,        194,        194,        1,   152064, 0x8f715862
---
> 0,        194,        194,        1,   152064, 0x7f5a5f0a
202c202
< 0,        196,        196,        1,   152064, 0x014c40f0
---
> 0,        196,        196,        1,   152064, 0xadf13b9f
204c204
< 0,        198,        198,        1,   152064, 0x25473a22
---
> 0,        198,        198,        1,   152064, 0x91393730
206c206
< 0,        200,        200,        1,   152064, 0x2d24d974
---
> 0,        200,        200,        1,   152064, 0x52e0d7bd
208c208
< 0,        202,        202,        1,   152064, 0x9450a62a
---
> 0,        202,        202,        1,   152064, 0xa07fa62a
210c210
< 0,        204,        204,        1,   152064, 0x6c2770de
---
> 0,        204,        204,        1,   152064, 0x984071a6
212c212
< 0,        206,        206,        1,   152064, 0x93757c14
---
> 0,        206,        206,        1,   152064, 0x593d7910
216c216
< 0,        210,        210,        1,   152064, 0xe818c675
---
> 0,        210,        210,        1,   152064, 0x6535c9c4
218c218
< 0,        212,        212,        1,   152064, 0xa3de9aec
---
> 0,        212,        212,        1,   152064, 0xe77998a2
220c220
< 0,        214,        214,        1,   152064, 0xa1af21cb
---
> 0,        214,        214,        1,   152064, 0x779b20cc
222c222
< 0,        216,        216,        1,   152064, 0x142ecbdb
---
> 0,        216,        216,        1,   152064, 0xb9e2c3f0
224c224
< 0,        218,        218,        1,   152064, 0x8d8f7a4c
---
> 0,        218,        218,        1,   152064, 0x301a7948
226c226
< 0,        220,        220,        1,   152064, 0x999e6d3f
---
> 0,        220,        220,        1,   152064, 0xe9426f2a
228c228
< 0,        222,        222,        1,   152064, 0xbdcff306
---
> 0,        222,        222,        1,   152064, 0x60e7f924
230c230
< 0,        224,        224,        1,   152064, 0xa6d4d038
---
> 0,        224,        224,        1,   152064, 0xbf09ca74
232c232
< 0,        226,        226,        1,   152064, 0x2fa8b357
---
> 0,        226,        226,        1,   152064, 0x90ccb47d
234c234
< 0,        228,        228,        1,   152064, 0x23dd31f2
---
> 0,        228,        228,        1,   152064, 0x7ae333dd
236c236
< 0,        230,        230,        1,   152064, 0x855efbca
---
> 0,        230,        230,        1,   152064, 0xc994007c
238c238
< 0,        232,        232,        1,   152064, 0xec465cb2
---
> 0,        232,        232,        1,   152064, 0xa0335bbf
240c240
< 0,        234,        234,        1,   152064, 0xaeac4476
---
> 0,        234,        234,        1,   152064, 0x05cf4479
242c242
< 0,        236,        236,        1,   152064, 0x7a186239
---
> 0,        236,        236,        1,   152064, 0x68ac5d0a
244c244
< 0,        238,        238,        1,   152064, 0x88f090ba
---
> 0,        238,        238,        1,   152064, 0x047c9082
246c246
< 0,        240,        240,        1,   152064, 0x70013bdd
---
> 0,        240,        240,        1,   152064, 0xfbd03b16
248c248
< 0,        242,        242,        1,   152064, 0x97e91795
---
> 0,        242,        242,        1,   152064, 0x450118c5
250c250
< 0,        244,        244,        1,   152064, 0x3549ffeb
---
> 0,        244,        244,        1,   152064, 0x0a4a000a
252c252
< 0,        246,        246,        1,   152064, 0xdcb6287d
---
> 0,        246,        246,        1,   152064, 0xc7cb29b2
254c254
< 0,        248,        248,        1,   152064, 0xb7ea75c7
---
> 0,        248,        248,        1,   152064, 0xbc9375a9
256c256
< 0,        250,        250,        1,   152064, 0x8dbec050
---
> 0,        250,        250,        1,   152064, 0x41fbc057
258c258
< 0,        252,        252,        1,   152064, 0xf7c7678e
---
> 0,        252,        252,        1,   152064, 0x51e06384
260c260
< 0,        254,        254,        1,   152064, 0x6627efd7
---
> 0,        254,        254,        1,   152064, 0xce2befdf
262c262
< 0,        256,        256,        1,   152064, 0x76fa5435
---
> 0,        256,        256,        1,   152064, 0x4e0f5372
264c264
< 0,        258,        258,        1,   152064, 0x153e3763
---
> 0,        258,        258,        1,   152064, 0x746c35f4
266c266
< 0,        260,        260,        1,   152064, 0xc19d24b8
---
> 0,        260,        260,        1,   152064, 0xae8f1c2f
268c268
< 0,        262,        262,        1,   152064, 0x67a149ee
---
> 0,        262,        262,        1,   152064, 0x2da24ae6
270c270
< 0,        264,        264,        1,   152064, 0x281b166b
---
> 0,        264,        264,        1,   152064, 0x52b8172a
272c272
< 0,        266,        266,        1,   152064, 0x91c90741
---
> 0,        266,        266,        1,   152064, 0x6d9504c4
274c274
< 0,        268,        268,        1,   152064, 0x0ca40c66
---
> 0,        268,        268,        1,   152064, 0x292c0bfd
278c278
< 0,        272,        272,        1,   152064, 0xd080bcfd
---
> 0,        272,        272,        1,   152064, 0xcd88bcf2
280c280
< 0,        274,        274,        1,   152064, 0x934f071f
---
> 0,        274,        274,        1,   152064, 0x01cd06a4
282c282
< 0,        276,        276,        1,   152064, 0xedd8263e
---
> 0,        276,        276,        1,   152064, 0xe615289d
284c284
< 0,        278,        278,        1,   152064, 0xc0d87e50
---
> 0,        278,        278,        1,   152064, 0x7c397dfe
286c286
< 0,        280,        280,        1,   152064, 0x47006123
---
> 0,        280,        280,        1,   152064, 0x2d6a60a8
288c288
< 0,        282,        282,        1,   152064, 0x494b8b9c
---
> 0,        282,        282,        1,   152064, 0x634a88c9
290c290
< 0,        284,        284,        1,   152064, 0xb82da5e2
---
> 0,        284,        284,        1,   152064, 0x972fa713
292c292
< 0,        286,        286,        1,   152064, 0x7ebff98d
---
> 0,        286,        286,        1,   152064, 0xbff8f90e
294c294
< 0,        288,        288,        1,   152064, 0xdee41ea2
---
> 0,        288,        288,        1,   152064, 0x5cf31cb1
296c296
< 0,        290,        290,        1,   152064, 0xce81051f
---
> 0,        290,        290,        1,   152064, 0x258002cc
298c298
< 0,        292,        292,        1,   152064, 0xd7719e35
---
> 0,        292,        292,        1,   152064, 0xe3809ce0
300c300
< 0,        294,        294,        1,   152064, 0x466d98b4
---
> 0,        294,        294,        1,   152064, 0x6e71916a
302c302
< 0,        296,        296,        1,   152064, 0x26bc139e
---
> 0,        296,        296,        1,   152064, 0xd47f07c9
304c304
< 0,        298,        298,        1,   152064, 0xa39737cb
---
> 0,        298,        298,        1,   152064, 0xc4023a80
306c306
< 0,        300,        300,        1,   152064, 0xa971f6e2
---
> 0,        300,        300,        1,   152064, 0x9982f47b
308c308
< 0,        302,        302,        1,   152064, 0xdb8b5e06
---
> 0,        302,        302,        1,   152064, 0x49925e53
310c310
< 0,        304,        304,        1,   152064, 0x060cd1a6
---
> 0,        304,        304,        1,   152064, 0xd4b5d0f7
312c312
< 0,        306,        306,        1,   152064, 0xe79f0b93
---
> 0,        306,        306,        1,   152064, 0x4e610934
314c314
< 0,        308,        308,        1,   152064, 0xacb715bc
---
> 0,        308,        308,        1,   152064, 0x3a750d80
316c316
< 0,        310,        310,        1,   152064, 0x09aa4f10
---
> 0,        310,        310,        1,   152064, 0x3284519f
318c318
< 0,        312,        312,        1,   152064, 0x4811dc21
---
> 0,        312,        312,        1,   152064, 0x4ec5d1e3
320c320
< 0,        314,        314,        1,   152064, 0x2db60b70
---
> 0,        314,        314,        1,   152064, 0xe33609b5
322c322
< 0,        316,        316,        1,   152064, 0x6c20cab3
---
> 0,        316,        316,        1,   152064, 0x5479cd3d
324c324
< 0,        318,        318,        1,   152064, 0x514df2c3
---
> 0,        318,        318,        1,   152064, 0x3a7deaf4
326c326
< 0,        320,        320,        1,   152064, 0x1c64bc82
---
> 0,        320,        320,        1,   152064, 0x3b36b53f
328c328
< 0,        322,        322,        1,   152064, 0xe6c7ff46
---
> 0,        322,        322,        1,   152064, 0x45d4fceb
330c330
< 0,        324,        324,        1,   152064, 0x5a9458ee
---
> 0,        324,        324,        1,   152064, 0x60625190
332c332
< 0,        326,        326,        1,   152064, 0xbd081682
---
> 0,        326,        326,        1,   152064, 0x77ad1d8c
334c334
< 0,        328,        328,        1,   152064, 0x6bc261a9
---
> 0,        328,        328,        1,   152064, 0xd11d52c6
336c336
< 0,        330,        330,        1,   152064, 0xd14ca712
---
> 0,        330,        330,        1,   152064, 0x174ca55b
338c338
< 0,        332,        332,        1,   152064, 0x34efa950
---
> 0,        332,        332,        1,   152064, 0x3844a495
340c340
< 0,        334,        334,        1,   152064, 0xad91b2ed
---
> 0,        334,        334,        1,   152064, 0xf672b44f
342c342
< 0,        336,        336,        1,   152064, 0xba4cfd8e
---
> 0,        336,        336,        1,   152064, 0xbc99fd7d
344c344
< 0,        338,        338,        1,   152064, 0x45ab6684
---
> 0,        338,        338,        1,   152064, 0xef8066f7
346c346
< 0,        340,        340,        1,   152064, 0xdfc8be01
---
> 0,        340,        340,        1,   152064, 0x5921c088
348c348
< 0,        342,        342,        1,   152064, 0xca1be9c6
---
> 0,        342,        342,        1,   152064, 0xfb03e9b5
350c350
< 0,        344,        344,        1,   152064, 0xef30c978
---
> 0,        344,        344,        1,   152064, 0x2faec717
352c352
< 0,        346,        346,        1,   152064, 0x8731a9ec
---
> 0,        346,        346,        1,   152064, 0xede7a97f
356c356
< 0,        350,        350,        1,   152064, 0xb80510ae
---
> 0,        350,        350,        1,   152064, 0x2b25104b
diff -r android/contrib/ffmpeg-x86/tests/ref/fate/vp5 /tmp/ffmpeg-x86/tests/ref/fate/vp5
252c252
< 0,        246,        246,        1,   233472, 0xbf73f1b7
---
> 0,        246,        246,        1,   233472, 0x4f3ef38c
