[prerequisites]

xzcat ffmpeg-3.4-latest.xz | tar -C ./ -xf -

mv  ffmpeg-x86_64 ffmpeg-x86-64.now
mv  ffmpeg-latest ffmpeg-x86_64


[add cde_log.h cde_log.c to ffmpeg]

cp ffmpeg-x86_64.now/libavutil/cde_log.* ffmpeg-x86_64/libavutil/

edit ffmpeg-x86_64/libavutil/log.h
 
add #include "cde_log.h" in last line

edit ffmpeg-x86_64/libavutil/log.c

add #include "cde_log.c" in last line

edit ffmpeg-x86_64/libavutil/Makefile

add cde_log.h to HEADERS


[differ between ff3.4--ijk0.8.7--20180103--001 & ffmpeg-3.4-latest]

Only in android/contrib/ffmpeg-x86/libavutil: dns_cache.c
Only in android/contrib/ffmpeg-x86/libavutil: dns_cache.h
Only in android/contrib/ffmpeg-x86/libavformat: ijkutils.c
Only in android/contrib/ffmpeg-x86/libavutil: application.c
Only in android/contrib/ffmpeg-x86/libavutil: application.h

diff android/contrib/ffmpeg-x86/libavutil/Makefile  /tmp/ffmpeg-x86/libavutil/Makefile
7d6
<           application.h                                                 \
28d26
<           dns_cache.h                                                   \
81d78
<           thread.h                                                      \
98d94
<        application.o                                                    \
115d110
<        dns_cache.o                                                      \
diff android/contrib/ffmpeg-x86/libavformat/Makefile  /tmp/ffmpeg-x86/libavformat/Makefile
7,9d6
<           avc.h                                                         \
<           url.h                                                         \
<           internal.h                                                    \
29,30d25
<        avc.o                \
<        ijkutils.o           \


diff -r android/contrib/ffmpeg-x86/libavformat/http.c /tmp/ffmpeg-x86/libavformat/http.c
33d32
< #include "libavutil/application.h"
127,129d125
<     char *tcp_hook;
<     int64_t app_ctx_intptr;
<     AVApplicationContext *app_ctx;
170,171d165
<     { "http-tcp-hook", "hook protocol on tcp", OFFSET(tcp_hook), AV_OPT_TYPE_STRING, { .str = "tcp" }, 0, 0, D | E },
<     { "ijkapplication", "AVApplicationContext", OFFSET(app_ctx_intptr), AV_OPT_TYPE_INT64, { .i64 = 0 }, INT64_MIN, INT64_MAX, .flags = D },
198d191
<     char prev_location[4096];
201,202d193
<     lower_proto = s->tcp_hook;
< 
213d203
<         av_dict_set_int(options, "fastopen", 0, 0);
240d229
<         av_dict_set_int(options, "ijkapplication", (int64_t)(intptr_t)s->app_ctx, 0);
248d236
<     av_strlcpy(prev_location, s->location, sizeof(prev_location));
502,503d489
<     s->app_ctx = (AVApplicationContext *)(intptr_t)s->app_ctx_intptr;
< 
533d518
<     av_application_will_http_open(s->app_ctx, (void*)h, uri);
535d519
<     av_application_did_http_open(s->app_ctx, (void*)h, uri, ret, s->http_code, s->filesize);
556a541
>     return 0;
557a543,545
>     if (c) {
>         ffurl_closep(c);
>     }
886c874
<             while (!av_isspace(*p))
---
>             while (*p && !av_isspace(*p))
1126d1113
<     uint64_t filesize = s->filesize;
1288,1296d1274
<     /* Some buggy servers may missing 'Content-Range' header for range request */
<     if (off > 0 && s->off <= 0 && (off + s->filesize == filesize)) {
<         av_log(NULL, AV_LOG_WARNING,
<                "try to fix missing 'Content-Range' at server side (%"PRId64",%"PRId64") => (%"PRId64",%"PRId64")",
<                s->off, s->filesize, off, filesize);
<         s->off = off;
<         s->filesize = filesize;
<     }
< 
1347,1355c1325
< 
<         len = size;
<         if (s->filesize > 0 && s->filesize != UINT64_MAX && s->filesize != 2147483647) {
<             int64_t unread = s->filesize - s->off;
<             if (len > unread)
<                 len = (int)unread;
<         }
<         if (len > 0)
<             len = ffurl_read(s->hd, buf, len);
---
>         len = ffurl_read(s->hd, buf, size);
1647d1616
<     av_application_will_http_seek(s->app_ctx, (void*)h, s->location, off);
1649d1617
<         av_application_did_http_seek(s->app_ctx, (void*)h, s->location, off, ret, s->http_code);
1658d1625
<     av_application_did_http_seek(s->app_ctx, (void*)h, s->location, off, ret, s->http_code);
1751,1752d1717
<     s->app_ctx = (AVApplicationContext *)(intptr_t)s->app_ctx_intptr;
< 
1765c1730
<     ff_url_join(lower_url, sizeof(lower_url), s->tcp_hook, NULL, hostname, port,
---
>     ff_url_join(lower_url, sizeof(lower_url), "tcp", NULL, hostname, port,




diff -r android/contrib/ffmpeg-x86/libavformat/protocols.c /tmp/ffmpeg-x86/libavformat/protocols.c
42,47d41
< extern const URLProtocol ff_ijkhttphook_protocol;
< extern const URLProtocol ff_ijklongurl_protocol;
< extern const URLProtocol ff_ijkmediadatasource_protocol;
< extern const URLProtocol ff_ijksegment_protocol;
< extern const URLProtocol ff_ijktcphook_protocol;
< extern const URLProtocol ff_ijkio_protocol;



diff -r android/contrib/ffmpeg-x86/libavformat/tcp.c /tmp/ffmpeg-x86/libavformat/tcp.c
26,27d25
< #include "libavutil/application.h"
< #include "libavutil/dns_cache.h"
36,38d33
< #if HAVE_PTHREADS
< #include <pthread.h>
< #endif
49,60d43
<     int64_t app_ctx_intptr;
< 
<     int addrinfo_one_by_one;
<     int addrinfo_timeout;
<     int64_t dns_cache_timeout;
<     int dns_cache_clear;
< 
<     AVApplicationContext *app_ctx;
<     char uri[1024];
<     int fastopen;
<     int tcp_connected;
<     int fastopen_success;
63,64d45
< #define FAST_OPEN_FLAG 0x20000000
< 
71d51
<     { "connect_timeout",  "set connect timeout (in microseconds) of socket", OFFSET(open_timeout),     AV_OPT_TYPE_INT, { .i64 = -1 },         -1, INT_MAX, .flags = D|E },
75,81d54
<     { "ijkapplication",   "AVApplicationContext",                              OFFSET(app_ctx_intptr),   AV_OPT_TYPE_INT64, { .i64 = 0 }, INT64_MIN, INT64_MAX, .flags = D },
< 
<     { "addrinfo_one_by_one",  "parse addrinfo one by one in getaddrinfo()",    OFFSET(addrinfo_one_by_one), AV_OPT_TYPE_INT, { .i64 = 0 },         0, 1, .flags = D|E },
<     { "addrinfo_timeout", "set timeout (in microseconds) for getaddrinfo()",   OFFSET(addrinfo_timeout), AV_OPT_TYPE_INT, { .i64 = -1 },       -1, INT_MAX, .flags = D|E },
<     { "dns_cache_timeout", "dns cache TTL (in microseconds)",   OFFSET(dns_cache_timeout), AV_OPT_TYPE_INT, { .i64 = -1 },       -1, INT64_MAX, .flags = D|E },
<     { "dns_cache_clear", "clear dns cache",   OFFSET(dns_cache_clear), AV_OPT_TYPE_INT, { .i64 = 0},       -1, INT_MAX, .flags = D|E },
<     { "fastopen", "enable fastopen",          OFFSET(fastopen), AV_OPT_TYPE_INT, { .i64 = 0},       0, INT_MAX, .flags = D|E },
92,339d64
< int ijk_tcp_getaddrinfo_nonblock(const char *hostname, const char *servname,
<                                  const struct addrinfo *hints, struct addrinfo **res,
<                                  int64_t timeout,
<                                  const AVIOInterruptCB *int_cb, int one_by_one);
< #ifdef HAVE_PTHREADS
< 
< typedef struct TCPAddrinfoRequest
< {
<     AVBufferRef *buffer;
< 
<     pthread_mutex_t mutex;
<     pthread_cond_t cond;
< 
<     AVIOInterruptCB interrupt_callback;
< 
<     char            *hostname;
<     char            *servname;
<     struct addrinfo  hints;
<     struct addrinfo *res;
< 
<     volatile int     finished;
<     int              last_error;
< } TCPAddrinfoRequest;
< 
< static void tcp_getaddrinfo_request_free(TCPAddrinfoRequest *req)
< {
<     av_assert0(req);
<     if (req->res) {
<         freeaddrinfo(req->res);
<         req->res = NULL;
<     }
< 
<     av_freep(&req->servname);
<     av_freep(&req->hostname);
<     pthread_cond_destroy(&req->cond);
<     pthread_mutex_destroy(&req->mutex);
<     av_freep(&req);
< }
< 
< static void tcp_getaddrinfo_request_free_buffer(void *opaque, uint8_t *data)
< {
<     av_assert0(opaque);
<     TCPAddrinfoRequest *req = (TCPAddrinfoRequest *)opaque;
<     tcp_getaddrinfo_request_free(req);
< }
< 
< static int tcp_getaddrinfo_request_create(TCPAddrinfoRequest **request,
<                                           const char *hostname,
<                                           const char *servname,
<                                           const struct addrinfo *hints,
<                                           const AVIOInterruptCB *int_cb)
< {
<     TCPAddrinfoRequest *req = (TCPAddrinfoRequest *) av_mallocz(sizeof(TCPAddrinfoRequest));
<     if (!req)
<         return AVERROR(ENOMEM);
< 
<     if (pthread_mutex_init(&req->mutex, NULL)) {
<         av_freep(&req);
<         return AVERROR(ENOMEM);
<     }
< 
<     if (pthread_cond_init(&req->cond, NULL)) {
<         pthread_mutex_destroy(&req->mutex);
<         av_freep(&req);
<         return AVERROR(ENOMEM);
<     }
< 
<     if (int_cb)
<         req->interrupt_callback = *int_cb;
< 
<     if (hostname) {
<         req->hostname = av_strdup(hostname);
<         if (!req->hostname)
<             goto fail;
<     }
< 
<     if (servname) {
<         req->servname = av_strdup(servname);
<         if (!req->hostname)
<             goto fail;
<     }
< 
<     if (hints) {
<         req->hints.ai_family   = hints->ai_family;
<         req->hints.ai_socktype = hints->ai_socktype;
<         req->hints.ai_protocol = hints->ai_protocol;
<         req->hints.ai_flags    = hints->ai_flags;
<     }
< 
<     req->buffer = av_buffer_create(NULL, 0, tcp_getaddrinfo_request_free_buffer, req, 0);
<     if (!req->buffer)
<         goto fail;
< 
<     *request = req;
<     return 0;
< fail:
<     tcp_getaddrinfo_request_free(req);
<     return AVERROR(ENOMEM);
< }
< 
< static void *tcp_getaddrinfo_worker(void *arg)
< {
<     TCPAddrinfoRequest *req = arg;
< 
<     getaddrinfo(req->hostname, req->servname, &req->hints, &req->res);
<     pthread_mutex_lock(&req->mutex);
<     req->finished = 1;
<     pthread_cond_signal(&req->cond);
<     pthread_mutex_unlock(&req->mutex);
<     av_buffer_unref(&req->buffer);
<     return NULL;
< }
< 
< static void *tcp_getaddrinfo_one_by_one_worker(void *arg)
< {
<     struct addrinfo *temp_addrinfo = NULL;
<     struct addrinfo *cur = NULL;
<     int ret = EAI_FAIL;
<     int i = 0;
<     int option_length = 0;
< 
<     TCPAddrinfoRequest *req = (TCPAddrinfoRequest *)arg;
< 
<     int family_option[2] = {AF_INET, AF_INET6};
< 
<     option_length = sizeof(family_option) / sizeof(family_option[0]);
< 
<     for (; i < option_length; ++i) {
<         struct addrinfo *hint = &req->hints;
<         hint->ai_family = family_option[i];
<         ret = getaddrinfo(req->hostname, req->servname, hint, &temp_addrinfo);
<         if (ret) {
<             req->last_error = ret;
<             continue;
<         }
<         pthread_mutex_lock(&req->mutex);
<         if (!req->res) {
<             req->res = temp_addrinfo;
<         } else {
<             cur = req->res;
<             while (cur->ai_next)
<                 cur = cur->ai_next;
<             cur->ai_next = temp_addrinfo;
<         }
<         pthread_mutex_unlock(&req->mutex);
<     }
<     pthread_mutex_lock(&req->mutex);
<     req->finished = 1;
<     pthread_cond_signal(&req->cond);
<     pthread_mutex_unlock(&req->mutex);
<     av_buffer_unref(&req->buffer);
<     return NULL;
< }
< 
< int ijk_tcp_getaddrinfo_nonblock(const char *hostname, const char *servname,
<                                  const struct addrinfo *hints, struct addrinfo **res,
<                                  int64_t timeout,
<                                  const AVIOInterruptCB *int_cb, int one_by_one)
< {
<     int     ret;
<     int64_t start;
<     int64_t now;
<     AVBufferRef        *req_ref = NULL;
<     TCPAddrinfoRequest *req     = NULL;
<     pthread_t work_thread;
< 
<     if (hostname && !hostname[0])
<         hostname = NULL;
< 
<     if (timeout <= 0)
<         return getaddrinfo(hostname, servname, hints, res);
< 
<     ret = tcp_getaddrinfo_request_create(&req, hostname, servname, hints, int_cb);
<     if (ret)
<         goto fail;
< 
<     req_ref = av_buffer_ref(req->buffer);
<     if (req_ref == NULL) {
<         ret = AVERROR(ENOMEM);
<         goto fail;
<     }
< 
<     /* FIXME: using a thread pool would be better. */
<     if (one_by_one)
<         ret = pthread_create(&work_thread, NULL, tcp_getaddrinfo_one_by_one_worker, req);
<     else
<         ret = pthread_create(&work_thread, NULL, tcp_getaddrinfo_worker, req);
< 
<     if (ret) {
<         ret = AVERROR(ret);
<         goto fail;
<     }
< 
<     pthread_detach(work_thread);
< 
<     start = av_gettime();
<     now   = start;
< 
<     pthread_mutex_lock(&req->mutex);
<     while (1) {
<         int64_t wait_time = now + 100000;
<         struct timespec tv = { .tv_sec  =  wait_time / 1000000,
<                                .tv_nsec = (wait_time % 1000000) * 1000 };
< 
<         if (req->finished || (start + timeout < now)) {
<             if (req->res) {
<                 ret = 0;
<                 *res = req->res;
<                 req->res = NULL;
<             } else {
<                 ret = req->last_error ? req->last_error : AVERROR_EXIT;
<             }
<             break;
<         }
< #if defined(__ANDROID__) && defined(HAVE_PTHREAD_COND_TIMEDWAIT_MONOTONIC)
<         ret = pthread_cond_timedwait_monotonic_np(&req->cond, &req->mutex, &tv);
< #else
<         ret = pthread_cond_timedwait(&req->cond, &req->mutex, &tv);
< #endif
<         if (ret != 0 && ret != ETIMEDOUT) {
<             av_log(NULL, AV_LOG_ERROR, "pthread_cond_timedwait failed: %d\n", ret);
<             ret = AVERROR_EXIT;
<             break;
<         }
< 
<         if (ff_check_interrupt(&req->interrupt_callback)) {
<             ret = AVERROR_EXIT;
<             break;
<         }
< 
<         now = av_gettime();
<     }
<     pthread_mutex_unlock(&req->mutex);
< fail:
<     av_buffer_unref(&req_ref);
<     return ret;
< }
< 
< #else
< int ijk_tcp_getaddrinfo_nonblock(const char *hostname, const char *servname,
<                                  const struct addrinfo *hints, struct addrinfo **res,
<                                  int64_t timeout,
<                                  const AVIOInterruptCB *int_cb)
< {
<     return getaddrinfo(hostname, servname, hints, res);
< }
< #endif
< 
351,365c76
<     char hostname_bak[1024] = {0};
<     AVAppTcpIOControl control = {0};
<     DnsCacheEntry *dns_entry = NULL;
< 
<     if (s->open_timeout < 0) {
<         s->open_timeout = 15000000;
<     }
< 
<     s->app_ctx = (AVApplicationContext *)(intptr_t)s->app_ctx_intptr;
< 
<     if (s->fastopen) {
<         s->tcp_connected = 0;
<         strcpy(s->uri, uri);
<         return 0;
<     }
---
>     s->open_timeout = 5000000;
386,388d96
<             if (s->rw_timeout >= 0) {
<                 s->open_timeout = s->rw_timeout;
<             }
394,395c102,104
<     if (s->rw_timeout >= 0 ) {
<         h->rw_timeout = s->rw_timeout;
---
>     if (s->rw_timeout >= 0) {
>         s->open_timeout =
>         h->rw_timeout   = s->rw_timeout;
397d105
< 
403,411c111,119
< 
<     if (s->dns_cache_timeout > 0) {
<         memcpy(hostname_bak, hostname, 1024);
<         if (s->dns_cache_clear) {
<             av_log(NULL, AV_LOG_INFO, "will delete cache entry, hostname = %s\n", hostname);
<             remove_dns_cache_entry(hostname);
<         } else {
<             dns_entry = get_dns_cache_reference(hostname);
<         }
---
>     if (!hostname[0])
>         ret = getaddrinfo(NULL, portstr, &hints, &ai);
>     else
>         ret = getaddrinfo(hostname, portstr, &hints, &ai);
>     if (ret) {
>         av_log(h, AV_LOG_ERROR,
>                "Failed to resolve hostname %s: %s\n",
>                hostname, gai_strerror(ret));
>         return AVERROR(EIO);
414,437c122
<     if (!dns_entry) {
< #ifdef HAVE_PTHREADS
<         ret = ijk_tcp_getaddrinfo_nonblock(hostname, portstr, &hints, &ai, s->addrinfo_timeout, &h->interrupt_callback, s->addrinfo_one_by_one);
< #else
<         if (s->addrinfo_timeout > 0)
<             av_log(h, AV_LOG_WARNING, "Ignore addrinfo_timeout without pthreads support.\n");
<         if (!hostname[0])
<             ret = getaddrinfo(NULL, portstr, &hints, &ai);
<         else
<             ret = getaddrinfo(hostname, portstr, &hints, &ai);
< #endif
< 
<         if (ret) {
<             av_log(h, AV_LOG_ERROR,
<                 "Failed to resolve hostname %s: %s\n",
<                 hostname, gai_strerror(ret));
<             return AVERROR(EIO);
<         }
< 
<         cur_ai = ai;
<     } else {
<         av_log(NULL, AV_LOG_INFO, "Hit DNS cache hostname = %s\n", hostname);
<         cur_ai = dns_entry->res;
<     }
---
>     cur_ai = ai;
479,484d163
<         ret = av_application_on_tcp_will_open(s->app_ctx);
<         if (ret) {
<             av_log(NULL, AV_LOG_WARNING, "terminated by application in AVAPP_CTRL_WILL_TCP_OPEN");
<             goto fail1;
<         }
< 
487,611d165
<             if (av_application_on_tcp_did_open(s->app_ctx, ret, fd, &control))
<                 goto fail1;
<             if (ret == AVERROR_EXIT)
<                 goto fail1;
<             else
<                 goto fail;
<         } else {
<             ret = av_application_on_tcp_did_open(s->app_ctx, 0, fd, &control);
<             if (ret) {
<                 av_log(NULL, AV_LOG_WARNING, "terminated by application in AVAPP_CTRL_DID_TCP_OPEN");
<                 goto fail1;
<             } else if (!dns_entry && strcmp(control.ip, hostname_bak)) {
<                 add_dns_cache_entry(hostname_bak, cur_ai, s->dns_cache_timeout);
<                 av_log(NULL, AV_LOG_INFO, "Add dns cache hostname = %s, ip = %s\n", hostname_bak , control.ip);
<             }
<         }
<     }
< 
<     h->is_streamed = 1;
<     s->fd = fd;
< 
<     if (dns_entry) {
<         release_dns_cache_reference(hostname_bak, &dns_entry);
<     } else {
<         freeaddrinfo(ai);
<     }
<     return 0;
< 
<  fail:
<     if (cur_ai->ai_next) {
<         /* Retry with the next sockaddr */
<         cur_ai = cur_ai->ai_next;
<         if (fd >= 0)
<             closesocket(fd);
<         ret = 0;
<         goto restart;
<     }
<  fail1:
<     if (fd >= 0)
<         closesocket(fd);
< 
<     if (dns_entry) {
<         av_log(NULL, AV_LOG_ERROR, "Hit dns cache but connect fail hostname = %s, ip = %s\n", hostname , control.ip);
<         release_dns_cache_reference(hostname_bak, &dns_entry);
<         remove_dns_cache_entry(hostname_bak);
<     } else {
<         freeaddrinfo(ai);
<     }
< 
<     return ret;
< }
< 
< /* return non zero if error */
< static int tcp_fast_open(URLContext *h, const char *http_request, const char *uri, int flags)
< {
<     struct addrinfo hints = { 0 }, *ai, *cur_ai;
<     int port, fd = -1;
<     TCPContext *s = h->priv_data;
<     const char *p;
<     char buf[256];
<     int ret;
<     char hostname[1024],proto[1024],path[1024];
<     char portstr[10];
<     char hostname_bak[1024] = {0};
<     AVAppTcpIOControl control = {0};
<     DnsCacheEntry *dns_entry = NULL;
<     av_url_split(proto, sizeof(proto), NULL, 0, hostname, sizeof(hostname),
<         &port, path, sizeof(path), uri);
<     if (strcmp(proto, "tcp"))
<         return AVERROR(EINVAL);
<     if (port <= 0 || port >= 65536) {
<         av_log(h, AV_LOG_ERROR, "Port missing in uri\n");
<         return AVERROR(EINVAL);
<     }
<     p = strchr(uri, '?');
< 
<     if (p) {
<         if (av_find_info_tag(buf, sizeof(buf), "listen", p)) {
<             char *endptr = NULL;
<             s->listen = strtol(buf, &endptr, 10);
<             /* assume if no digits were found it is a request to enable it */
<             if (buf == endptr)
<                 s->listen = 1;
<         }
<         if (av_find_info_tag(buf, sizeof(buf), "timeout", p)) {
<             s->rw_timeout = strtol(buf, NULL, 10);
<             if (s->rw_timeout >= 0) {
<                 s->open_timeout = s->rw_timeout;
<             }
<         }
<         if (av_find_info_tag(buf, sizeof(buf), "listen_timeout", p)) {
<             s->listen_timeout = strtol(buf, NULL, 10);
<         }
<     }
<     if (s->rw_timeout >= 0 ) {
<         h->rw_timeout = s->rw_timeout;
<     }
< 
<     hints.ai_family = AF_UNSPEC;
<     hints.ai_socktype = SOCK_STREAM;
<     snprintf(portstr, sizeof(portstr), "%d", port);
<     if (s->listen)
<         hints.ai_flags |= AI_PASSIVE;
< 
<     if (s->dns_cache_timeout > 0) {
<         memcpy(hostname_bak, hostname, 1024);
<         if (s->dns_cache_clear) {
<             av_log(NULL, AV_LOG_INFO, "will delete cache entry, hostname = %s\n", hostname);
<             remove_dns_cache_entry(hostname);
<         } else {
<             dns_entry = get_dns_cache_reference(hostname);
<         }
<     }
< 
<     if (!dns_entry) {
< #ifdef HAVE_PTHREADS
<         ret = ijk_tcp_getaddrinfo_nonblock(hostname, portstr, &hints, &ai, s->addrinfo_timeout, &h->interrupt_callback, s->addrinfo_one_by_one);
< #else
<         if (s->addrinfo_timeout > 0)
<             av_log(h, AV_LOG_WARNING, "Ignore addrinfo_timeout without pthreads support.\n");
<         if (!hostname[0])
<             ret = getaddrinfo(NULL, portstr, &hints, &ai);
<         else
<             ret = getaddrinfo(hostname, portstr, &hints, &ai);
< #endif
613,673d166
<         if (ret) {
<             av_log(h, AV_LOG_ERROR,
<                 "Failed to resolve hostname %s: %s\n",
<                 hostname, gai_strerror(ret));
<             return AVERROR(EIO);
<         }
< 
<         cur_ai = ai;
<     } else {
<         av_log(NULL, AV_LOG_INFO, "Hit DNS cache hostname = %s\n", hostname);
<         cur_ai = dns_entry->res;
<     }
< 
<  restart:
< #if HAVE_STRUCT_SOCKADDR_IN6
<     // workaround for IOS9 getaddrinfo in IPv6 only network use hardcode IPv4 address can not resolve port number.
<     if (cur_ai->ai_family == AF_INET6){
<         struct sockaddr_in6 * sockaddr_v6 = (struct sockaddr_in6 *)cur_ai->ai_addr;
<         if (!sockaddr_v6->sin6_port){
<             sockaddr_v6->sin6_port = htons(port);
<         }
<     }
< #endif
<     fd = ff_socket(cur_ai->ai_family,
<                    cur_ai->ai_socktype,
<                    cur_ai->ai_protocol);
<     if (fd < 0) {
<         ret = ff_neterrno();
<         goto fail;
<     }
<     /* Set the socket's send or receive buffer sizes, if specified.
<        If unspecified or setting fails, system default is used. */
<     if (s->recv_buffer_size > 0) {
<         setsockopt (fd, SOL_SOCKET, SO_RCVBUF, &s->recv_buffer_size, sizeof (s->recv_buffer_size));
<     }
<     if (s->send_buffer_size > 0) {
<         setsockopt (fd, SOL_SOCKET, SO_SNDBUF, &s->send_buffer_size, sizeof (s->send_buffer_size));
<     }
<     if (s->listen == 2) {
<         // multi-client
<         if ((ret = ff_listen(fd, cur_ai->ai_addr, cur_ai->ai_addrlen)) < 0)
<             goto fail1;
<     } else if (s->listen == 1) {
<         // single client
<         if ((ret = ff_listen_bind(fd, cur_ai->ai_addr, cur_ai->ai_addrlen,
<                                   s->listen_timeout, h)) < 0)
<             goto fail1;
<         // Socket descriptor already closed here. Safe to overwrite to client one.
<         fd = ret;
<     } else {
<         ret = av_application_on_tcp_will_open(s->app_ctx);
<         if (ret) {
<             av_log(NULL, AV_LOG_WARNING, "terminated by application in AVAPP_CTRL_WILL_TCP_OPEN");
<             goto fail1;
<         }
< 
<         if ((ret = ff_sendto(fd, http_request, strlen(http_request), FAST_OPEN_FLAG,
<                  cur_ai->ai_addr, cur_ai->ai_addrlen, s->open_timeout / 1000, h, !!cur_ai->ai_next)) < 0) {
<             s->fastopen_success = 0;
<             if (av_application_on_tcp_did_open(s->app_ctx, ret, fd, &control))
<                 goto fail1;
678,691d170
<         } else {
<             if (ret == 0) {
<                 s->fastopen_success = 0;
<             } else {
<                 s->fastopen_success = 1;
<             }
<             ret = av_application_on_tcp_did_open(s->app_ctx, 0, fd, &control);
<             if (ret) {
<                 av_log(NULL, AV_LOG_WARNING, "terminated by application in AVAPP_CTRL_DID_TCP_OPEN");
<                 goto fail1;
<             } else if (!dns_entry && strcmp(control.ip, hostname_bak)) {
<                 add_dns_cache_entry(hostname_bak, cur_ai, s->dns_cache_timeout);
<                 av_log(NULL, AV_LOG_INFO, "Add dns cache hostname = %s, ip = %s\n", hostname_bak , control.ip);
<             }
698,702c177
<     if (dns_entry) {
<         release_dns_cache_reference(hostname_bak, &dns_entry);
<     } else {
<         freeaddrinfo(ai);
<     }
---
>     freeaddrinfo(ai);
717,725c192
< 
<     if (dns_entry) {
<         av_log(NULL, AV_LOG_ERROR, "Hit dns cache but connect fail hostname = %s, ip = %s\n", hostname , control.ip);
<         release_dns_cache_reference(hostname_bak, &dns_entry);
<         remove_dns_cache_entry(hostname_bak);
<     } else {
<         freeaddrinfo(ai);
<     }
< 
---
>     freeaddrinfo(ai);
756,757d222
<     if (ret > 0)
<         av_application_did_io_tcp_read(s->app_ctx, (void*)h, ret);
771,789d235
< 
<     if (s->fastopen && !s->tcp_connected && av_stristart(buf, "GET", NULL)) {
<         ret = tcp_fast_open(h, buf, s->uri, 0);
<         if (!ret) {
<             s->tcp_connected = 1;
<             if (!s->fastopen_success) {
<                 ret = send(s->fd, buf, size, MSG_NOSIGNAL);
<                 if (ret > 0) {
<                     s->fastopen_success = 1;
<                 }
<                 return ret < 0 ? ff_neterrno() : ret;
<             }
<             return ret;
<         } else {
<             av_log(NULL, AV_LOG_WARNING, "tcp_fast_open is error ret = %d\n", ret);
<             return ret;
<         }
<     }
< 

recompile ffmpeg-x86_64



[history]
2021-05-11,12:01, zhou.weiguo, initial it
2021-05-20,18:12, zhou.weiguo, refine it
